#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: setupDbccdb.scr -S <DBSERVER> -C <cache name> -cachemb <max dbcc cache> -worker <max worker processes>
#
#  Description: Set up dbccdb configurations for sybase databases
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<parm1> - short description of parm if not obvious
#              	<parm2> - short description of parm if not obvious
#
#  Modification History:
#       09/22/03 M. Siatczynski	Initial Script (modified version of dbccdbSetup.scr)
#       08/03/04 M. Siatczynski	Centralized script
#       02/13/06 M. Siatczynski	Implement ISQLEXE, getPass, ADMINLOGIN
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#--------------------------------------------------------------------------
#  Validate parms
#--------------------------------------------------------------------------
export USAGE="ERROR - Usage: $0 -S <DBSERVER> -C <cache name> -cachemb <max dbcc cache> -worker <max worker processes>"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 1
else
	while [ $# -gt 0 ]
	do
	        case $1 in
	                -S)		export DBSERVER=$2;shift 2;;
	                -C)		export CACHE_NAME=$2;shift 2;;
			-worker)	export MAX_WORKER=$2;shift 2;;
			-cachemb)	export MAX_CACHE=$2;shift 2;;
	                -*)		echo $USAGE;exit 1;;
	                *)		echo $USAGE;exit 1;;
	        esac
	done
fi

if [ ! "$DBSERVER" -o ! "$MAX_WORKER" -o ! "$MAX_CACHE" -o ! "$CACHE_NAME" ] 
then
	echo $USAGE
	echo "ERROR - ALL parms MUST be supplied"
	exit 1
fi

#--------------------------------------------------------------------------
#  Initialize Variables
#--------------------------------------------------------------------------
export SQLFILE=/tmp/sqlfile.$$
export OUTFILE=$LOGDIR/dbcc/$DBSERVER/$DBSERVER.setupDbccdb.$DATETIME
test "$CACHE_NAME" = "default_data_cache" && export CACHE_NAME="default data cache"

#--------------------------------------------------------------------------
#  Cleanup work files and set trap
#--------------------------------------------------------------------------
function tempCleanup {
	test -f $SQLFILE && \rm -f $SQLFILE
}

trap 'tempCleanup' EXIT INT TERM

#--------------------------------------------------------------------------
#  Format the SQL to configure defaults in dbccdb (use max settings for defaults)
#--------------------------------------------------------------------------
> $SQLFILE
echo "use dbccdb" >> $SQLFILE
echo "go" >> $SQLFILE
echo "sp_dbcc_updateconfig NULL, \"max worker processes\",\"$MAX_WORKER\"" >> $SQLFILE
echo "go" >> $SQLFILE
echo "sp_dbcc_updateconfig NULL, \"dbcc named cache\",\"$CACHE_NAME\",\"${MAX_CACHE}M\"" >> $SQLFILE
echo "go" >> $SQLFILE
echo "sp_dbcc_updateconfig NULL, \"OAM count threshold\",\"5\"" >> $SQLFILE
echo "go" >> $SQLFILE
echo "sp_dbcc_updateconfig NULL, \"IO error abort\",\"3\"" >> $SQLFILE
echo "go" >> $SQLFILE
echo "sp_dbcc_updateconfig NULL, \"linkage error abort\",\"8\"" >> $SQLFILE
echo "go" >> $SQLFILE

#--------------------------------------------------------------------------
#  Execute the SQL
#--------------------------------------------------------------------------
> $OUTFILE
echo "Executing $0 from `hostname`" >> $OUTFILE
getPass $DBSERVER $ADMINLOGIN | $ISQLEXE -U$ADMINLOGIN -S$DBSERVER -e -w200 -i$SQLFILE | grep -v Password >> $OUTFILE

#-----------------------------------------------------------------------
# Check for errors
# If errors, exit with 1, else exit with 0
#-----------------------------------------------------------------------
checkSqlErr $OUTFILE
if [ $? -ne 0 ]
then
	echo "$0 FAILED"
	echo "Review errors in $OUTFILE"
	exit 1
else
	echo "$0 SUCCESSFUL"
	exit 0
fi
