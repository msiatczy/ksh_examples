#!/bin/ksh 
#--------------------------------------------------------------------------
#        Usage: dbccCheckalloc -S <DBSERVER> {-D <dbname>|-L <dblist> -single -fix -m <maildest> -p <pagedest>}
#
#  Description: Run dbcc checkalloc against database(s)
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	DBSERVER - database server
#              	DBNAME - database name
#              	DBLIST - list of databases
#              	SINGLE - flag to put database in single user mode
#              	FIX - flag to specify fix option
#              	MAILDEST - override default maildest of dba
#              	PAGEDEST - page destination/flag
#
#
#  Modification History:
#	02/25/05 M. Siatczynski	Original script (copied from checkstorage)
#	04/28/05 M. Siatczynski	Add -fix parm
#	02/10/06 M. Siatczynski	Implement ISQLEXE, getPass, ADMINLOGIN
#	03/03/06 M. Siatczynski	Ignore read only (status 1024) databases when processing all databases on an ASE
#	05/29/09 M. Siatczynski	Updated to call getDbList function
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

## unset the centrally-set PAGEDEST variable - setting determines whether or not to send page
unset PAGEDEST

#------------------------------------------------------------------------------
# Sample block for input parameters
#------------------------------------------------------------------------------
export USAGE="ERROR - Usage: $0 -S <DBSERVER> {-D <dbname>|-L <dblist> -single -fix -m <maildest> -p <pagedest>}"
export CALLED="$0 $*"

if [ $# -eq 0 ]
then
        echo $USAGE
        exit 1
else
        while [ $# -gt 0 ]
        do
                case $1 in
                        -S)     export DBSERVER=$2;shift 2;;
                        -D)     export DBNAME=$2;shift 2;;
                        -L)     export DBLIST=$2;shift 2;;
                        -single)     export SINGLE=1;shift 1;;
                        -fix)   export FIX=1;shift 1;;
                        -m)     export MAILDEST=$2;shift 2;;
                        -p)     export PAGEDEST=$2;shift 2;;
                        -*)     echo $USAGE;exit 1;;
                        *)      echo $USAGE;exit 1;;
                esac
        done
fi

if [ ! "$DBSERVER" ]
then
    echo $USAGE
    exit 1
fi

if [ "$DBNAME" -a "$DBLIST" ]
then
        echo "$USAGE"
        echo "ERROR - DBNAME and DBLIST are mutually exclusive"
        exit 1
fi

if [ "$DBLIST" -a ! -s "$DBLIST" ]
then
        echo "$USAGE"
        echo "ERROR - DBLIST does not exist or is 0 bytes"
        exit 1
fi

test ! "$SINGLE" && export SINGLE=0
test ! "$FIX" && export FIX=0

if [ "$FIX" -eq 1 -a "$SINGLE" -eq 0 ]
then
        echo "$USAGE"
        echo "ERROR - MUST specify -single with -fix"
        exit 1
fi

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
export ERRORFLAG=0
export XLIST=$CTLDIR/$DBSERVER/$DBSERVER.dbccExclude.lst
export DBCCSQL=/tmp/dbccsql.$$
export SORTDBLIST=/tmp/sortdblist.$$
export TMPDBLIST=/tmp/dblist.$$
export TMPXLIST=/tmp/xlist.$$
export MAILFILE=/tmp/mailfile.$$
export PAGEMSG=/tmp/pagemsg.$$
if [ "$DBNAME" ]
then
	export LOGFILE=$LOGDIR/dbcc/$DBSERVER/$DBSERVER.$DBNAME.dbccCheckalloc.$DATETIME
else
	export LOGFILE=$LOGDIR/dbcc/$DBSERVER/$DBSERVER.dbccCheckalloc.$DATETIME
fi

> $LOGFILE
> $MAILFILE

echo "SCRIPT START: `date`" >> $LOGFILE

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test -f $DBCCSQL && \rm -f $DBCCSQL
	test -f $SORTDBLIST && \rm -f $SORTDBLIST
	test -f $TMPDBLIST && \rm -f $TMPDBLIST
	test -f $TMPXLIST && \rm -f $TMPXLIST
	test -f $MAILFILE && \rm -f $MAILFILE
	test -f $PAGEMSG && \rm -f $PAGEMSG
}

trap 'tempCleanup' EXIT INT TERM

#--------------------------------------------------------------------------
#  Determine what databases to run dbcc checkalloc on:
#	- single database (-D option)
#	- list of databases (-L option)
#	- all databases (no option) 
#		Exclude list is only used when running against all databases.
#  NOTE:  sed removes the spaces from the isql output, otherwise the files can't 
#  be accurately compared to the exclusion list
#--------------------------------------------------------------------------
> $SORTDBLIST
if [ "$DBNAME" ]
then
	echo $DBNAME > $TMPDBLIST
elif [ "$DBLIST" ]
then
	sort $DBLIST > $TMPDBLIST
else
	getDbList -S $DBSERVER -user -system -xreadonly | sort > $SORTDBLIST

#--------------------------------------------------------------------------
#  Exclude database in the exclusion list
#--------------------------------------------------------------------------
	if [ -s $XLIST ]
	then
		sort $XLIST > $TMPXLIST
		comm -23 $SORTDBLIST $TMPXLIST > $TMPDBLIST

		echo "The following databases are excluded from checkalloc:\n" >> $LOGFILE
		cat $TMPXLIST >> $LOGFILE
		echo "" >> $LOGFILE
	else
		cat $SORTDBLIST > $TMPDBLIST
	fi
fi

#--------------------------------------------------------------------------
#  Execute checkalloc for each database
#  This single user logic should be improved--the database will still be checked
#  even if the database can't be put in single user mode, but the output will report errors.
#  If FIX=1, then include fix option
#--------------------------------------------------------------------------
for DBNAME in `cat $TMPDBLIST`
do
	> $DBCCSQL
	if [ $SINGLE -eq 1 ]
	then
		echo "use master" >> $DBCCSQL
		echo "go" >> $DBCCSQL
		echo "sp_dboption $DBNAME,single,true" >> $DBCCSQL
		echo "go" >> $DBCCSQL
		echo "use $DBNAME" >> $DBCCSQL
		echo "go" >> $DBCCSQL
		echo "checkpoint" >> $DBCCSQL
		echo "go" >> $DBCCSQL

		test $FIX -eq 1 && echo "dbcc checkalloc ($DBNAME,fix)" >> $DBCCSQL || echo "dbcc checkalloc ($DBNAME)" >> $DBCCSQL
		echo "go" >> $DBCCSQL

		echo "use master" >> $DBCCSQL
		echo "go" >> $DBCCSQL
		echo "sp_dboption $DBNAME,single,false" >> $DBCCSQL
		echo "go" >> $DBCCSQL
		echo "use $DBNAME" >> $DBCCSQL
		echo "go" >> $DBCCSQL
		echo "checkpoint" >> $DBCCSQL
		echo "go" >> $DBCCSQL
	else
		test $FIX -eq 1 && echo "dbcc checkalloc ($DBNAME,fix)" >> $DBCCSQL || echo "dbcc checkalloc ($DBNAME)" >> $DBCCSQL
		echo "go" >> $DBCCSQL
	fi

	$SCRDIR/sqlTimer.scr -S $DBSERVER -i $DBCCSQL -o $LOGFILE -m $MAILFILE
	if [ $? -ne 0 ]
	then
		export ERRORFLAG=1
	fi
done

echo "SCRIPT END: `date`" >> $LOGFILE

#--------------------------------------------------------------------------
# If there were any failures, send email
# If a page destination is set, then send a page
#--------------------------------------------------------------------------
if [ $ERRORFLAG -eq 1 ]
then
	echo "\nNOTE: Check $LOGFILE for further details.\n" >> $MAILFILE
	export MAILSUBJECT="$DBSERVER DBCC CHECKALLOC FAILED"
	sendMail
	if [ "$PAGEDEST" ]
	then
		echo "$DBSERVER DBCC CHECKALLOC FAILED" > $PAGEMSG
		sendPage
	fi
	exit 1
else
	exit 0
fi
