#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: nativeBackup.scr -S DBSERVER -dumpdir <main dump directory> {-D DBNAME -compress <compression level> -m <maildest> -pagedone <pagedest>}
#
#  Description: Perform native sybase dump of one or all databases on a server
#  NOTE:  Databases are dumped sequentially, one at a time, in alpha order.
#
#     Location:	/sccm/dba/sybase/scripts/nativeBackup.scr
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<DBSERVER> - database server
#              	<DBNAME> - database name
#              	<DUMPDIR> - base dump directory
#              	<COMPLEVEL> - compression level (defaults to 0--no compression)
#
#  Modification History:
#	12/23/04 M. Siatczynski	Original script
#	12/28/04 M. Siatczynski	Replace -p parm with pagedone parm
#	06/03/05 M. Siatczynski	Comment out "starting" page
#	02/13/06 M. Siatczynski	Implement ISQLEXE, getPass, ADMINLOGIN
#	05/19/09 M. Siatczynski	Updated to use new compression syntax (required format for archive database compatibility)
#	05/29/09 M. Siatczynski	Updated to call getDbList function
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -S <DBSERVER> -dumpdir <main dump directory> {-D <DBNAME> -compress <compression level> -m <maildest> -pagedone <pagedest>}"

if [ $# -eq 0 ]
then
        echo $USAGE
        exit 1
else
        while [ $# -gt 0 ]
        do
                case $1 in
                        -S)		export DBSERVER=$2;shift 2;;
                        -D)		export DBNAME=$2;shift 2;;
                        -L)     	export DBLIST=$2;shift 2;;
                        -dumpdir)	export DUMPDIR=$2;shift 2;;
                        -compress)	export COMPLEVEL=$2;shift 2;;
                        -m)		export MAILDEST=$2;shift 2;;
                        -pagedone)	export PAGEDONE=$2;shift 2;;
                        -*)		echo $USAGE;exit 1;;
                        *)		echo $USAGE;exit 1;;
                esac
        done
fi

if [ ! "$DBSERVER" -o ! "$DUMPDIR" ]
then
        echo $USAGE
        exit 1
fi

if [ "$DBNAME" -a "$DBLIST" ]
then
        echo "$USAGE"
        echo "ERROR - DBNAME and DBLIST are mutually exclusive"
        exit 1
fi
 
if [ "$DBLIST" -a ! -s "$DBLIST" ]
then
        echo "$USAGE"
        echo "ERROR - DBLIST does not exist or is 0 bytes"
        exit 1
fi

export ERRORFLAG=0
export EXITRC=0
export SQLFILE=/tmp/nativeBackup.sql.$$
export TMPDBLIST=/tmp/dblist.$$
export MAILFILE=/tmp/mailfile.$$
export PAGEMSG=/tmp/pagemsg.$$
if [ "$DBNAME" ]
then
	export LOGFILE=$LOGDIR/backup/$DBSERVER/$DBSERVER.$DBNAME.nativeBackup.$DATETIME
else
	export LOGFILE=$LOGDIR/backup/$DBSERVER/$DBSERVER.nativeBackup.$DATETIME
fi

#--------------------------------------------------------------------------
# validate dump directory and compression level
# for Evergreen, running from remote server, ignore check for dumpdir
#--------------------------------------------------------------------------
#if [ ! -d $DUMPDIR ]
#then
#        echo "ERROR - $DUMPDIR is not a valid directory"
#        exit 1
#fi

#create the DBSERVER subdirectory if it doesn't already exist
#test ! -d $DUMPDIR/$DBSERVER && mkdir $DUMPDIR/$DBSERVER

# if no compression level is specified, then default to 0 (no compression)
# 0 is not a valid compression level, but it will be used later for comparison
test ! "$COMPLEVEL" && export COMPLEVEL=0

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test $SQLFILE && \rm -f $SQLFILE
	test $TMPDBLIST && \rm -f $TMPDBLIST
	test $MAILFILE && \rm -f $MAILFILE
	test $PAGEMSG && \rm -f $PAGEMSG
}

trap 'tempCleanup' EXIT INT TERM

#------------------------------------------------------------------------------
# Send special "start" page for 2004 year-end backups
#------------------------------------------------------------------------------
#echo "`date` $DBSERVER native backup STARTING" > $PAGEMSG
#export PAGEDEST=$PAGEDONE
#sendPage

#------------------------------------------------------------------------------
# Write headers
#------------------------------------------------------------------------------
> $LOGFILE
> $MAILFILE

echo "SCRIPT START: `date`" >> $LOGFILE

#--------------------------------------------------------------------------
# Create a working dblist
# Ignore tempdb% databases
# Check for errors
#--------------------------------------------------------------------------
> $SORTDBLIST
if [ "$DBNAME" ]
then
        echo $DBNAME > $TMPDBLIST
elif [ "$DBLIST" ]
then
	sort $DBLIST > $TMPDBLIST
else
	getDbList -S $DBSERVER -user -system | sort > $TMPDBLIST
# check for sql errors - leave this check here, because any sql errors will be in the TMPDBLIST, return code from getDbList can not be used, since it's piped through a sort
	checkSqlErr $TMPDBLIST
	if [ $? -eq 1 ]
	then
		echo "ERROR - unable to obtain list of databases from $DBSERVER"
		echo "Review output in $LOGFILE"
		cat $TMPDBLIST >> $LOGFILE
		echo "SCRIPT END: `date`" >> $LOGFILE
		exit 1
	fi
fi

echo "Performing native database dump for the following database(s) on $DBSERVER:" >> $LOGFILE
cat $TMPDBLIST >> $LOGFILE
echo "" >> $LOGFILE

#------------------------------------------------------------------------------
# Execute backup for each database
# For Evergreen, do not append DBSERVER subdir to DUMPDIR
#------------------------------------------------------------------------------
cat $TMPDBLIST |
while read DBNAME
do
	export DBNAME
#	export DUMPFILE=$DUMPDIR/$DBSERVER/$DBSERVER.$DBNAME.$DATETIME.dmp
	export DUMPFILE=$DUMPDIR/$DBSERVER.$DBNAME.$DATETIME.dmp
        > $SQLFILE
        echo "set nocount on" >> $SQLFILE
        echo "go" >> $SQLFILE
	echo "dump database $DBNAME to \"$DUMPFILE\"" >> $SQLFILE
	test $COMPLEVEL -gt 0 && echo "with compression = $COMPLEVEL" >> $SQLFILE
	echo "go" >> $SQLFILE

	echo "$DBSERVER.$DBNAME NATIVE BACKUP:" >> $LOGFILE
        $SCRDIR/sqlTimer.scr -S $DBSERVER -i $SQLFILE -o $LOGFILE -m $MAILFILE
        if [ $? -ne 0 ]
        then
                export ERRORFLAG=1
        fi
done

echo "SCRIPT END: `date`" >> $LOGFILE

#--------------------------------------------------------------------------
# If there were any failures, send email
# Set page status and final exit
#--------------------------------------------------------------------------
if [ $ERRORFLAG -eq 1 ]
then
        echo "\nNOTE: Check $LOGFILE for further details.\n" >> $MAILFILE
        export MAILSUBJECT="$DBSERVER NATIVE BACKUP FAILED"
        sendMail

	export PAGESTATUS=FAILED
	export EXITRC=1
else
	export PAGESTATUS=SUCCESSFUL
	export EXITRC=0
fi


#--------------------------------------------------------------------------
#  If PAGEDONE set, send page
#--------------------------------------------------------------------------
if [ "$PAGEDONE" ]
then
	echo "`date` $DBSERVER native backup $PAGESTATUS" > $PAGEMSG
	export PAGEDEST=$PAGEDONE
	sendPage
fi

#--------------------------------------------------------------------------
#  Exit
#--------------------------------------------------------------------------
exit $EXITRC
