#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: checkDbs.scr -S <DBSERVER> {-D <DBNAME>}
#
#  Description: Check one or all databases on a server
#
#     Location:	/sccm/dba/sybase/adhoc/checkDbs.scr
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	-S Database Server
#              	-D Database
#
#
#  Modification History:
#	04/15/03 M. Siatczynski	Initial Script
#	06/28/04 M. Siatczynski	Centralized script
#	02/10/06 M. Siatczynski	Implement ISQLEXE, getPass, ADMINLOGIN
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -S <DBSERVER> {-D <dbname>}"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 1
else
	while [ $# -gt 0 ]
	do
	        case $1 in
	                -S)	export DBSERVER=$2;shift 2;;
	                -D)	export DBNAME=$2;shift 2;;
	                -*)	echo $USAGE;exit 1;;
	                *)	echo $USAGE;exit 1;;
	        esac
	done
fi

export DBLIST=/tmp/dbnamelist.$$
export SQL1=/tmp/tempsql.$$
export OUTFILE=$LOGDIR/misc/$DBSERVER/$DBSERVER.checkDbs.$DATETIME

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test $SQL1 && \rm -f $SQL1
	test $DBLIST && \rm -f $DBLIST
}

trap 'tempCleanup' EXIT INT TERM

#--------------------------------------------------------------------------
# If a single dbname is passed, put it in the list, otherwise
# generate a list of all DBs on the server (excluding system dbs)
# Also set OUTFILE, depending on DBNAME
#--------------------------------------------------------------------------
> $DBLIST
if [ "$DBNAME" ]
then
	echo $DBNAME >> $DBLIST
else
	getDbList -S $DBSERVER -user -system >> $DBLIST
fi

#--------------------------------------------------------------------------
# Format the sql to be run against each database
#--------------------------------------------------------------------------
> $SQL1
echo "set nocount on" >> $SQL1
echo "go" >> $SQL1

for DBNAME in `cat $DBLIST`
do
	export DBNAME
	echo "print '$DBNAME'" >> $SQL1
	echo "use $DBNAME" >> $SQL1
	echo "go" >> $SQL1

#	echo "select db_name(),*,user_name(lrid),role_id(user_name(lrid)) from $DBNAME..sysroles where id = -1" >> $SQL1
#	echo "select db_name(),id,lrid,role_name(id) from sysroles where role_name(id) <> user_name(lrid)" >> $SQL1

#	echo "select db_name(),count(*) from $DBNAME..sysreferences" >> $SQL1
#	echo "select db_name(),pmrydbid,frgndbid,db_id(db_name()) from $DBNAME..sysreferences where db_id() <> pmrydbid or db_id() <> frgndbid" >> $SQL1


#	echo "select convert(varchar(40),db_name()) + ' ' + convert(varchar(50),object_name(i.id)) + '(' + convert(varchar(100),dbo.sp_f_indexcols(object_name(i.id),i.name)) + ')'" >> $SQL1
#	echo "from sysindexes i" >> $SQL1
#	echo "where i.id > 99 and i.indid > 0 and i.indid < 255" >> $SQL1
#	echo "and row_count(db_id(),i.id) > 0" >> $SQL1
#	echo "and not exists" >> $SQL1
#	echo "(select dbo.sp_f_colstats(s.colidarray,s.id)" >> $SQL1
#	echo "from sysstatistics s" >> $SQL1
#	echo "where id > 99 and formatid=100)" >> $SQL1

#	echo "exec sp_missing_indexstats" >> $SQL1
#	echo "select db_name(),* from sysattributes where class = 9" >> $SQL1
	echo "sp_helpgroup DML" >> $SQL1

	echo "go" >> $SQL1

done

#--------------------------------------------------------------------------
# Pipe in the sql
#--------------------------------------------------------------------------
> $OUTFILE

getPass $DBSERVER $ADMINLOGIN | $ISQLEXE -U$ADMINLOGIN -S$DBSERVER -w200 -i$SQL1 -b | grep -v Password: >> $OUTFILE

#--------------------------------------------------------------------------
# Check for errors
#--------------------------------------------------------------------------
checkSqlErr $OUTFILE
if [ $? -eq 1 ]
then
        echo "$0 FAILED"
	echo "Results in $OUTFILE"
        exit 1
else
        echo "$0 SUCCESSFUL"
	echo "Results in $OUTFILE"
        exit 0
fi
