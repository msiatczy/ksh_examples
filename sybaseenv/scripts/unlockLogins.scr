#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: unlockLogins.scr -S <DBSERVER> {-L <login|unlock list> -noprompt -perm -quiet}
#
#  Description: Unlock one or more logins logins on a dbserver
#
#     Location:	/sccm/dba/sybase/scripts/unlockLogins.scr
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<DBSERVER> - Database server name
#		<login list> - specific list of logins to unlock
#		<noprompt> - do not prompt for confirmation
#
#  NOTE:  It is not possible to permanently unlock ALL logins on an ASE
#
#  Modification History:
#	06/24/04 M. Siatczynski	Initial Script - functionality split from original lockLogins.scr
#	07/09/04 M. Siatczynski	Added option of unlocking a list of specific logins
#	02/13/06 M. Siatczynski	Implement ISQLEXE, getPass, ADMINLOGIN
#	05/24/06 M. Siatczynski	Change location of LOGDIR from misc to useradmin
#	12/04/06 M. Siatczynski	Modify so -L can be list or single login
#	12/06/06 M. Siatczynski	Add -perm parm to remove login from dba..locked_logins, change UNLOCKSQL to SQLFILE
#	10/21/08 M. Siatczynski Do not exit with error for empty list, add TEMPLIST variable
#       04/17/09 M. Siatczynski Add -quiet option so status messages are logged but don't show on console
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#------------------------------------------------------------------------------
# Input parameters
#------------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -S <DBSERVER> {-L <login|unlock list> -noprompt -perm -quiet}"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 1
else
	while [ $# -gt 0 ]
	do
	        case $1 in
	                -S)		export DBSERVER=$2;shift 2;;
	                -L)		export LOGINSPEC=$2;shift 2;;
	                -noprompt)	export PROMPT=0;shift 1;;
	                -perm)		export PERM=1;shift 1;;
	                -quiet)		export QUIET=1;shift 1;;
	                -*)		echo $USAGE;exit 1;;
	                *)		echo $USAGE;exit 1;;
	        esac
	done
fi

if [ ! "$DBSERVER" ]
then
	echo $USAGE
	exit 1
fi

test ! "$PROMPT" && export PROMPT=1
test ! "$PERM" && export PERM=0
test ! "$QUIET" && export QUIET=0

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
export LOGFILE=$LOGDIR/useradmin/$DBSERVER/$DBSERVER.unlockLogins.$DATETIME
export SQLFILE=/tmp/sqlfile.$$
export SQLOUT=/tmp/sqlout.$$
export TEMPLIST=/tmp/templist.$$
export LOGINLIST=/tmp/loginlist.$$
export NUMTOUNLOCK=0
export HIGHRC=0

# if running in quiet mode, then use OUTDEST to send WARNING messages to log rather than console
# NOTE:  eval MUST be used when specifying OUTDEST
test $QUIET -eq 1 && export OUTDEST=" >> $LOGFILE" || export OUTDEST="| tee -a $LOGFILE"

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test $SQLFILE && \rm -f $SQLFILE
	test $SQLOUT && \rm -f $SQLOUT
	test $LOGINLIST && \rm -f $LOGINLIST
	test $TEMPLIST && \rm -f $TEMPLIST
}

trap 'tempCleanup' EXIT INT TERM

#------------------------------------------------------------------------------
# write logfile headers
#------------------------------------------------------------------------------
> $LOGFILE
echo "`date` Unlocking logins on $DBSERVER" >> $LOGFILE

#------------------------------------------------------------------------------
# If LOGINSPEC is passed, validate and format list of logins
# If a specific list IS passed, force the unlock of those logins--don't check dba database
# else if LOGINSPEC is NOT passed, get list of logins from DBSERVER
# Get list of logins currently locked which do not have an entry in dba..locked_logins
# check for errors
#------------------------------------------------------------------------------
if [ "$LOGINSPEC" ]
then
# make sure control file exists and has entries
        if [ -f $LOGINSPEC ]
        then
                if [ -s $LOGINSPEC ]
                then
                        sort $LOGINSPEC > $TEMPLIST
                else
                        eval echo "WARNING - $LOGINSPEC is 0 bytes" $OUTDEST
                fi
        else
# make sure the loginspec doesn't contain slashes--otherwise it may be an invalid file reference
                echo $LOGINSPEC | grep '/' > /dev/null
                if [ $? -eq 0 ]
                then
                        echo "ERROR - $LOGINSPEC is not valid--possible invalid filename?"
                        exit 1
                else
                        echo $LOGINSPEC > $TEMPLIST
                fi
        fi
else
	> $SQLOUT
	$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -w200 -b <<-! | grep -v Password > $SQLOUT
	`getPass $DBSERVER $ADMINLOGIN`
	set nocount on
	go
	select name from master..syslogins m
	where m.status & 2 = 2
	and m.name not in (select d.name from dba..locked_logins d)
	go
	!

	checkSqlErr $SQLOUT
	if [ $? -eq 1 ]
	then
	        echo "ERROR - getting list of logins for $DBSERVER" | tee -a $LOGFILE
		cat $SQLOUT >> $LOGFILE
	        exit 1
	else
		cat $SQLOUT > $TEMPLIST
	fi
fi

# if there are logins to be unlocked, then remove spaces, sort, and count
	if [ -s $TEMPLIST ]
	then
		sed -e 's/  *//g' $TEMPLIST | sort > $LOGINLIST
		export NUMTOUNLOCK=`wc -l < $LOGINLIST`
	else
		eval echo "There are no logins to unlock on $DBSERVER" $OUTDEST
		exit 0
	fi

#------------------------------------------------------------------------------
# Prompt for confirmation
#------------------------------------------------------------------------------
if [ $PROMPT -eq 1 ]
then
        echo "\nYou are about to unlock $NUMTOUNLOCK logins on $DBSERVER\n"
        CONTINUE=""
        while [ "$CONTINUE" != "Y" -a "$CONTINUE" != "y" -a "$CONTINUE" != "N" -a "$CONTINUE" != "n" ]
        do
                echo "DO YOU WISH TO CONTINUE? {y/n}"
                read CONTINUE
        done

        if [ "$CONTINUE" = "n" -o "$CONTINUE" = "N" ]
        then
                echo "\n`date` Script exiting - no action taken on $DBSERVER.\n" | tee -a $LOGFILE
                exit 0
        fi
fi

#------------------------------------------------------------------------------
# Format the sql statements
# If -perm is passed, remove the logins in the dba..locked_logins table
#  (only check PERM once, not for each login)
#------------------------------------------------------------------------------
> $SQLFILE
echo "use master" >> $SQLFILE
echo "go" >> $SQLFILE

cat $LOGINLIST |
while read LOGIN
do
	export LOGIN
	echo "exec sp_locklogin $LOGIN,\"unlock\"" >> $SQLFILE
	echo "go" >> $SQLFILE
done

if [ $PERM -eq 1 ]
then
	cat $LOGINLIST |
	while read LOGIN
	do
		export LOGIN
		echo "if exists (select name from dba..locked_logins where name = \"$LOGIN\")" >> $SQLFILE
		echo "delete dba..locked_logins where name = \"$LOGIN\"" >> $SQLFILE
		echo "go" >> $SQLFILE
	done
fi

# summarize lock status for all logins
echo "set nocount on" >> $SQLFILE
echo "select 'num accounts locked',count(*)" >> $SQLFILE
echo "from master..syslogins" >> $SQLFILE
echo "where status & 2 = 2" >> $SQLFILE
echo "select 'num accounts unlocked',count(*)" >> $SQLFILE
echo "from master..syslogins" >> $SQLFILE
echo "where status & 2 <> 2" >> $SQLFILE
echo "go" >> $SQLFILE

#------------------------------------------------------------------------------
# Execute the unlock SQL
# check for errors
#------------------------------------------------------------------------------
> $SQLOUT
getPass $DBSERVER $ADMINLOGIN | $ISQLEXE -U$ADMINLOGIN -S$DBSERVER -w200 -e -i $SQLFILE | grep -v Password > $SQLOUT

checkSqlErr $SQLOUT
if [ $? -eq 1 ]
then
        echo "ERROR - unlocking logins on $DBSERVER" | tee -a $LOGFILE
	cat $SQLOUT >> $LOGFILE
        export HIGHRC=1
else
	cat $SQLOUT >> $LOGFILE
fi

#------------------------------------------------------------------------------
# exit
#------------------------------------------------------------------------------
echo "`date` Unlock complete" >> $LOGFILE
test $HIGHRC -eq 0 && exit 0 || exit 1
