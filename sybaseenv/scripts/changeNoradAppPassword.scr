#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: changeNoradAppPassword.scr -L <LOGIN> (-SAM <SAMNAME>|-TEST -PROD>) {-fileonly -pushnfs <nfsenv>,<nfsenv>,etc|all}
#
#  Description: Change password for a norad application account
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#
#  Modification History:
#	01/20/11 M. Siatczynski Separated original resetNoradPassword.scr into two scripts, one for app and one for ASE
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile
. /sccm/dba/sybase/.dbaSybProfile.norad

#------------------------------------------------------------------------------
# Input parameters
#------------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -L <LOGIN> (-SAM <SAMNAME>|-TEST -PROD>) {-fileonly -pushnfs <nfsenv>,<nfsenv>,etc|all}"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 2
else
	while [ $# -gt 0 ]
	do
	        case $1 in
			-L)		export LOGIN=$2;shift 2;;
			-TEST)		export DOTEST=1;shift 1;;
			-PROD)		export DOPROD=1;shift 1;;
			-SAM)		export ONESAM=$2;shift 2;;
			-fileonly)	export FILEONLY=1;shift 1;;
			-pushnfs)	export NFSENVS=$2;shift 2;;
			-*)		echo $USAGE;exit 2;;
			*)		echo $USAGE;exit 2;;
	        esac
	done
fi

#--------------------------------------------------------------------------
# Validate parameters
#--------------------------------------------------------------------------
# login must be passed
if [ ! "$LOGIN" ]
then
	echo $USAGE
	exit 2
fi

# set default parms
test ! "$FILEONLY" && export FILEONLY=0
test ! "$DOTEST" && export DOTEST=0
test ! "$DOPROD" && export DOPROD=0
test "$NFSENVS" && export PUSHNFS=1 || export PUSHNFS=0

# default login for norad console
export NORADADMIN=admin

# can't specify envs AND single SAM
if [ `expr $DOPROD + $DOTEST` -gt 0 -a "$ONESAM" ]
then
        echo "ERROR - TEST/PROD not valid with single SAM"
	echo $USAGE
	exit 2
fi

# pushnfs can not be specified unless fileonly is specified
if [ $PUSHNFS -gt $FILEONLY ]
then
	echo "ERROR - pushnfs is only valid with -fileonly parameter"
	exit 2
fi

#--------------------------------------------------------------------------
#  Initialize variables  
#--------------------------------------------------------------------------
export LOGFILE=$LOGDIR/useradmin/central/changeNoradAppPassword.$LOGIN.$DATETIME
export TMPSAMLIST=/tmp/tmpsamlist.$$
export TMPFILE=/tmp/tmpfile.$$
export TMPOUT=/tmp/tmpout.$$
export OPENSSLOUT=/tmp/opensslout.$$
export HIGHRC=0

# save the original stty settings
export STTY_ORIG=`stty -g`

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
        test -f $TMPSAMLIST && \rm -f $TMPSAMLIST
        test -f $TMPFILE && \rm -f $TMPFILE
        test -f $OPENSSLOUT && \rm -f $OPENSSLOUT
        test -f $TMPOUT && \rm -f $TMPOUT
# reinstate the original stty settings
        stty $STTY_ORIG
}

trap 'tempCleanup' EXIT INT TERM

#------------------------------------------------------------------------------
# Format working sam list
#------------------------------------------------------------------------------
> $TMPSAMLIST
if [ "$ONESAM" ]
then
	grep " $ONESAM " $NORADSAMLIST | cut -d" " -f1,2,5 | sort | uniq >> $TMPSAMLIST
fi

if [ $DOTEST -eq 1 ]
then
	grep "^TEST " $NORADSAMLIST | cut -d" " -f1,2,5 | sort | uniq >> $TMPSAMLIST
fi

if [ $DOPROD -eq 1 ]
then
	grep "^PROD " $NORADSAMLIST | cut -d" " -f1,2,5 | sort | uniq >> $TMPSAMLIST
fi

# Make sure the working list is not empty
if [ ! -s $TMPSAMLIST ]
then
	echo "ERROR - No SAMs to process.  Exiting"
	exit 2
else
# determine whether to prompt for TEST/PROD passwords
	export PROMPTTEST=0
	export PROMPTPROD=0
	cut -d" " -f1 $TMPSAMLIST | sort | uniq |
	while read SAMENV
	do
                case $SAMENV in
                        TEST)		export PROMPTTEST=1;;
                        PROD)		export PROMPTPROD=1;;
                        *)		echo "ERROR - Unknown SAM env";exit 2;;
                esac
	done
fi

#------------------------------------------------------------------------------
# Write headers
# chmod 600 as norad writes password info to the file
#------------------------------------------------------------------------------
> $LOGFILE
chmod 600 $LOGFILE

> $TMPOUT
chmod 600 $TMPOUT

#------------------------------------------------------------------------------
# Prompt for the passwords
#------------------------------------------------------------------------------
# Prompt for new test passwords
export NEWTESTPWD=""
export NEWPRODPWD=""

if [ $PROMPTTEST -eq 1 ]
then
	NEWPW1=""
	while [ "$NEWPW1" = "" ]
	do
	        echo "Enter NEW TEST password for $LOGIN:"
	        stty -echo
	        read NEWPW1
	        stty echo
	done
	NEWPW2=""
	while [ "$NEWPW2" = "" ]
	do
	        echo "Re-enter NEW TEST password for $LOGIN:"
	        stty -echo
	        read NEWPW2
	        stty echo
	done
	if [ "$NEWPW1" = "$NEWPW2" ]
	then
		export NEWTESTPWD=$NEWPW1
	else
		echo "ERROR - New TEST passwords entered do not match.  Exiting."
		exit 2
	fi
fi

# Prompt for new prod passwords
if [ $PROMPTPROD -eq 1 ]
then
	NEWPW1=""
	while [ "$NEWPW1" = "" ]
	do
	        echo "Enter NEW PROD password for $LOGIN:"
	        stty -echo
	        read NEWPW1
	        stty echo
	done
	NEWPW2=""
	while [ "$NEWPW2" = "" ]
	do
	        echo "Re-enter NEW PROD password for $LOGIN:"
	        stty -echo
	        read NEWPW2
	        stty echo
	done
	if [ "$NEWPW1" = "$NEWPW2" ]
	then
		export NEWPRODPWD=$NEWPW1
	else
		echo "ERROR - New PROD passwords entered do not match.  Exiting."
		exit 2
	fi
fi

#------------------------------------------------------------------------------
# Change norad application account password
#------------------------------------------------------------------------------
echo "`date` Resetting norad app password change for $LOGIN on the following SAMs:" >> $LOGFILE
test $FILEONLY -eq 1 && echo "ONLY encrypted password files will be updated.  App will not be updated." >> $LOGFILE
cat $TMPSAMLIST >> $LOGFILE

cat $TMPSAMLIST |
while read SAMENV SAMNAME DOMAIN
do
	export SAMENV SAMNAME DOMAIN
	
	if [ "$SAMENV" = "PROD" ]
	then
		export NEWPWD=$NEWPRODPWD	
	else
		export NEWPWD=$NEWTESTPWD	
	fi

	echo "\nProcessing $SAMNAME.$DOMAIN - LOGIN($LOGIN)" | tee -a $LOGFILE

	if [ $FILEONLY -eq 0 ]
	then
		> $TMPOUT
		$NSM_HOME/bin/console -c -e $SAMNAME.$DOMAIN $NORADADMIN <<-ENDCOMMAND >> $TMPOUT
		`getPass $SAMNAME $NORADADMIN`
		target .
		alter user $LOGIN password=`$NSM_HOME/bin/sqlrepos /ENCRYPT /PASSWORD $NEWPWD | grep -v password` cap="$NORADADMIN" 
		wait 5
		targetoff
		exit
		ENDCOMMAND
	
		cat $TMPOUT >> $LOGFILE
		checkNoradErr $TMPOUT
		if [ $? -ne 0 ]
		then
		        echo "ERROR - changing norad password for $LOGIN on $SAMNAME" | tee -a $LOGFILE
		        export HIGHRC=2
		else
		        echo "Password change SUCCESSFUL for $LOGIN on $SAMNAME" | tee -a $LOGFILE
		fi
	elif [ $FILEONLY -eq 1 ]
	then
		export PASSPHRASE=$CTLDIR/.passphrase.$LOGIN
		export PWDFILE=$CTLDIR/.syb_pw.$SAMNAME.$LOGIN.enc
		export BACKUPFILE=$CTLDIR/sybpw_bak/.syb_pw.$SAMNAME.$LOGIN.enc.$DATETIME 

		if [ ! -s $PASSPHRASE ]
		then
	        	echo "ERROR - $PASSPHRASE does not exist or is 0 bytes"
	        	exit 2
		fi

		if [ -f $PWDFILE ]
		then
# chmod just in case perms were wrong to start with--perms will carry over to backup file, but chmod that too
			chmod 600 $PWDFILE
			cp -p $PWDFILE $BACKUPFILE
			if [ $? -ne 0 ]
			then
				export HIGHRC=2
				echo "NORAD SAM $SAMNAME ($LOGIN) - file backup FAILED - $PWDFILE WILL NOT BE CHANGED" | tee -a $LOGFILE
				echo "NORAD SAM $SAMNAME ($LOGIN) - skipping to next SAM" | tee -a $LOGFILE
				continue
			else
				echo "NORAD SAM $SAMNAME ($LOGIN) - file backup SUCCESSFUL" | tee -a $LOGFILE
				chmod 600 $BACKUPFILE
			fi
		else
			echo "NORAD SAM $SAMNAME ($LOGIN) - $PWDFILE does not exist--new file will be created"
# create and chmod the new password file before putting anything in it
			touch $PWDFILE;chmod 600 $PWDFILE
		fi

		echo "NORAD SAM $SAMNAME ($LOGIN) - modifying $PWDFILE" | tee -a $LOGFILE

#------------------------------------------------------------------------------
# Store the encrypted password in the file
# A temp file is used to hold the password because I can't figure out how to
# encrypt a string directly into a target file.
# stderr from the openssl commands is directed to a single output file
# push file to designated NFS envs and check return status
#------------------------------------------------------------------------------
		touch $TMPFILE;chmod 600 $TMPFILE
		echo $NEWPWD > $TMPFILE
		> $OPENSSLOUT;chmod 600 $OPENSSLOUT
		echo "\n" | $SWBIN/openssl des3 -d -in $PASSPHRASE -pass stdin 2>>$OPENSSLOUT | $SWBIN/openssl des3 -e -pass stdin -in $TMPFILE -out $PWDFILE >> $OPENSSLOUT 2>&1
		test -f $TMPFILE && \rm $TMPFILE

		if [ -s $OPENSSLOUT ]
		then
			export HIGHRC=2
			echo "NORAD SAM $SAMNAME ($LOGIN) - file modify FAILED" | tee -a $LOGFILE
			cat $OPENSSLOUT >> $LOGFILE
			echo "NORAD SAM $SAMNAME ($LOGIN) - skipping to next server" | tee -a $LOGFILE
			continue
		else
			echo "NORAD SAM $SAMNAME ($LOGIN) - file modify SUCCESSFUL" | tee -a $LOGFILE
			if [ $PUSHNFS -eq 1 ]
			then
				echo "NORAD SAM $SAMNAME ($LOGIN) - pushing file to $NFSENVS NFS envs" | tee -a $OUTFILE
				$SCRDIR/pushNfs.scr -E $NFSENVS -F $PWDFILE -noprompt
				test $? -ne 0 && export HIGHRC=2
			fi
		fi
#------------------------------------------------------------------------------
# How can we validate the connection using the encrypted file?
# File push must be done from wpsfa3000, but norad is not installed on wpsfa300, so console command can not be executed
# Comment out section for now....
#------------------------------------------------------------------------------
#		echo "NORAD SAM $SAMNAME ($LOGIN) - checking connection with new password file" | tee -a $LOGFILE
#		> $TMPOUT
#		$NSM_HOME/bin/console -c -e $SAMNAME.$DOMAIN $NORADADMIN <<-ENDCOMMAND >> $TMPOUT
#		`getPass $SAMNAME $NORADADMIN`
#		target .
#		wait 5
#		targetoff
#		exit
#		ENDCOMMAND
#	
#		cat $TMPOUT >> $LOGFILE
#		checkNoradErr $TMPOUT
#		if [ $? -ne 0 ]
#		then
#			echo "NORAD SAM $SAMNAME ($LOGIN) - connection FAILED" | tee -a $LOGFILE
#		        export HIGHRC=2
#			continue 
#		else
#			echo "NORAD SAM $SAMNAME ($LOGIN) - connection SUCCESSFUL" | tee -a $LOGFILE
#		fi
	fi
done

#------------------------------------------------------------------------------
# Check for errors
# Exit
#------------------------------------------------------------------------------
if [ $HIGHRC -ne 0 ]
then
        echo "\nERROR(S) FOUND during script execution" | tee -a $LOGFILE
        echo "Review $LOGFILE"
        exit $HIGHRC
else
        echo "\nScript execution SUCCESSFUL" | tee -a $LOGFILE
        echo "Review $LOGFILE"
        exit $HIGHRC
fi
