#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: changeAdminPassword.scr -login <login> (-S <DBSERVER> | -prod -nonprod) -ase -rep -vip {-fileonly -pushnfs <nfsenv>,<nfsenv>,etc|all}
#
#  Description: Change password for login on one or more Sybase ASEs, RSs, or VIPs
#		This script changes server passwords and passwords stored in corresponding control files.
#		Use the -fileonly parm to change only the files and not server passwords.
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<prod> - update login passwords for all prod servers
#              	<nonprod> - update login passwords for all nonprod servers
#              	<DBSERVER> - update login password for a single ASE, RS, or VIP
#              	<ase> - update login password for ASEs
#              	<rep> - update login password for RSs
#              	<vip> - update login password for VIPs
#
#  NOTE:  This file should be rwx for sybase user only.
#
#  Modification History:
#	10/07/05 M. Siatczynski	Rewrite/merge original scripts
#	10/28/05 M. Siatczynski	Check for existence of passphrase file
#	10/28/05 M. Siatczynski	Commented out code to update plaintext password files
#	11/07/05 M. Siatczynski	Fully qualify path to openssl
#	12/01/05 M. Siatczynski	Uncommented code to update plaintext password files (think these are still used)
#	02/13/06 M. Siatczynski	Implement ISQLEXE
#	03/06/06 M. Siatczynski	Remove code for plaintext password files--no longer used.
#	06/14/06 M. Siatczynski	Execute sp_remote_password, if it exists, otherwise execute sp_password
#				(because sp_remote_password/password validation has not been rolled out to all ASEs yet)
#	09/13/06 M. Siatczynski	Redirect RPTFILE to useradmin subdir of RPTDIR
#	12/15/06 M. Siatczynski	Add code to place server in ping exceptions list before changing password
#	04/11/07 M. Siatczynski	If FILEONLY=1 for VIPs, don't test connection BEFORE creating encrypted file
#	10/01/07 M. Siatczynski	Remove -X from ISQLEXE call (this parm is included in ISQLEXE definition)
#	09/23/08 M. Siatczynski	Add code to update password on ERSSD for REPSERVERS
#	06/11/09 M. Siatczynski	Ignore attempts to change sa password on ERSSD--login doesn't exist there
#	11/17/10 M. Siatczynski	Add parm and call to pushNfs.scr to push encrypted password file
#	01/19/11 M. Siatczynski	Move nfs push after verifying connection with updated file
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#------------------------------------------------------------------------------
# Sample block for input parameters
#------------------------------------------------------------------------------
export USAGE="ERROR - Usage: $0 -login <login> (-S <DBSERVER> | -prod -nonprod) -ase -rep -vip {-fileonly -pushnfs <nfsenv>,<nfsenv>,etc|all}"
export CALLED="$0 $*"

if [ $# -eq 0 ]
then
        echo $USAGE
        exit 1
else
        while [ $# -gt 0 ]
        do
                case $1 in
                        -login)		export LOGIN=$2;shift 2;;
                        -S)		export ONEDBSERVER=$2;shift 2;;
                        -prod)		export PROD=1;shift 1;;
                        -nonprod)	export NONPROD=1;shift 1;;
                        -ase)		export DOASE=1;shift 1;;
                        -rep)		export DOREP=1;shift 1;;
                        -vip)		export DOVIP=1;shift 1;;
                        -fileonly)	export FILEONLY=1;shift 1;;
                        -pushnfs)	export NFSENVS=$2;shift 2;;
                        -*)		echo $USAGE;exit 1;;
                        *)		echo $USAGE;exit 1;;
                esac
        done
fi

if [ ! "$LOGIN" ]
then
        echo $USAGE
        echo "ERROR - Login MUST be specified"
        exit 1
fi

test ! "$PROD" && export PROD=0
test ! "$NONPROD" && export NONPROD=0
test ! "$DOASE" && export DOASE=0
test ! "$DOREP" && export DOREP=0
test ! "$DOVIP" && export DOVIP=0
test ! "$FILEONLY" && export FILEONLY=0
test "$NFSENVS" && export PUSHNFS=1 || export PUSHNFS=0

export ENVSUM=`expr $PROD + $NONPROD`
export SRVSUM=`expr $DOASE + $DOREP + $DOVIP`

if [ "$ONEDBSERVER" -a $ENVSUM -gt 0 ]
then
        echo $USAGE
        echo "ERROR - DBSERVER can not be specified with other parameters"
        exit 1
fi

if [ $SRVSUM -eq 0 ]
then
        echo $USAGE
        echo "ERROR - at least one server class must be specified (-ase -rep -vip)"
        exit 1
fi

#--------------------------------------------------------------------------
# Validate the passphrase file for $LOGIN
# If the file doesn't exist--don't go any farther
#--------------------------------------------------------------------------
export PASSPHRASE=$CTLDIR/.passphrase.$LOGIN
if [ ! -s $PASSPHRASE ]
then
        echo "ERROR - $PASSPHRASE does not exist or is 0 bytes"
        exit 1
fi

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
export TMPFILE=/tmp/tmpfile.$$
export SQLOUT=/tmp/sqlout.$$
export TMPASE=/tmp/tmpase.$$
export TMPREP=/tmp/tmprep.$$
export TMPVIP=/tmp/tmpvip.$$
export OPENSSLOUT=/tmp/opensslout.$$
export PINGRESULT=/tmp/pingresult.$$
export RPTFILE=$RPTDIR/useradmin/central/changeAdminPassword.$DATETIME
export EXCEPT_LIST=$CTLDIR/sybPingExcept.lst
# save the original stty settings
export STTY_ORIG=`stty -g`

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test -f $TMPFILE && \rm -f $TMPFILE
	test -f $SQLOUT && \rm -f $SQLOUT
	test -f $TMPASE && \rm -f $TMPASE
	test -f $TMPREP && \rm -f $TMPREP
	test -f $TMPVIP && \rm -f $TMPVIP
	test -f $OPENSSLOUT && \rm -f $OPENSSLOUT
	test -f $PINGRESULT && \rm -f $PINGRESULT
# reinstate the original stty settings
        stty $STTY_ORIG
}

trap 'tempCleanup' EXIT INT TERM

#------------------------------------------------------------------------------
# Format dbserverlist
#------------------------------------------------------------------------------
> $TMPASE
> $TMPREP
> $TMPVIP
if [ "$ONEDBSERVER" ]
then
	test $DOASE -eq 1 && grep "^$ONEDBSERVER " $ASEDIRLIST | cut -d" " -f1,5 >> $TMPASE
	test $DOREP -eq 1 && grep "^$ONEDBSERVER " $REPDIRLIST | cut -d" " -f1,7,8,9 >> $TMPREP
	test $DOVIP -eq 1 && grep "^$ONEDBSERVER " $VIPSERVERLIST | cut -d" " -f1,4 >> $TMPVIP
fi

if [ $NONPROD -eq 1 ]
then
	test $DOASE -eq 1 && grep -v "^#" $ASEDIRLIST | cut -d" " -f1,5 | grep nonprod >> $TMPASE
	test $DOREP -eq 1 && grep -v "^#" $REPDIRLIST | cut -d" " -f1,7,8,9 | grep nonprod >> $TMPREP	
	test $DOVIP -eq 1 && grep -v "^#" $VIPSERVERLIST | cut -d" " -f1,4 | grep nonprod >> $TMPVIP	
fi

if [ $PROD -eq 1 ]
then
	test $DOASE -eq 1 && grep -v "^#" $ASEDIRLIST | cut -d" " -f1,5 | grep -v nonprod >> $TMPASE	
	test $DOREP -eq 1 && grep -v "^#" $REPDIRLIST | cut -d" " -f1,7,8,9 | grep -v nonprod >> $TMPREP	
	test $DOVIP -eq 1 && grep -v "^#" $VIPSERVERLIST | cut -d" " -f1,4 | grep -v nonprod >> $TMPVIP	
fi

#------------------------------------------------------------------------------
# Make sure the server class matches a specific servername passed
#------------------------------------------------------------------------------
if [ ! -s $TMPASE -a ! -s $TMPREP -a ! -s $TMPVIP ]
then
	echo "ERROR - Servername not found in specified control list.  Exiting"
	exit 1
fi

#------------------------------------------------------------------------------
# Prompt for the passwords
# If a single dbserver was passed, determine if it's prod/nonprod and set appropriate flag
# Otherwise, 
# 	if nonprod, set flag to prompt for nonprod password
#	if prod, set flag to prompt for prod password
#------------------------------------------------------------------------------
export PROMPTTEST=0
export PROMPTPROD=0

if [ "$ONEDBSERVER" ]
then
	export STATUS=`cut -d" " -f2 $TMPASE $TMPREP $TMPVIP`
	test "$STATUS" = "prod" && export PROMPTPROD=1 || export PROMPTTEST=1
fi

test $NONPROD -eq 1 && export PROMPTTEST=1
test $PROD -eq 1 && export PROMPTPROD=1

export OLDTESTPWD=""
export OLDPRODPWD=""
export NEWTESTPWD=""
export NEWPRODPWD=""

#------------------------------------------------------------------------------
# If updating nonprod servers, prompt for old and new passwords
# If only updating file(s), don't prompt for OLD passwords
#------------------------------------------------------------------------------
if [ $PROMPTTEST -eq 1 ]
then
	if [ $FILEONLY -eq 0 ]
	then
# prompt for the old password
		OLDPW1=""
		while [ "$OLDPW1" = "" ]
		do
		        echo "Enter OLD TEST password:"
		        stty -echo
		        read OLDPW1
		        stty echo
		done
		OLDPW2=""
		while [ "$OLDPW2" = "" ]
		do
		        echo "Re-enter OLD TEST password:"
		        stty -echo
		        read OLDPW2
		        stty echo
		done
		if [ "$OLDPW1" = "$OLDPW2" ]
		then
			export OLDTESTPWD=$OLDPW1
		else
			echo "ERROR - Old TEST passwords entered do not match.  Exiting."
			exit 1
		fi
	fi
# prompt for the new password
	NEWPW1=""
	while [ "$NEWPW1" = "" ]
	do
	        echo "Enter NEW TEST password:"
	        stty -echo
	        read NEWPW1
	        stty echo
	done
	NEWPW2=""
	while [ "$NEWPW2" = "" ]
	do
	        echo "Re-enter NEW TEST password:"
	        stty -echo
	        read NEWPW2
	        stty echo
	done
	if [ "$NEWPW1" = "$NEWPW2" ]
	then
		export NEWTESTPWD=$NEWPW1
	else
		echo "ERROR - New TEST passwords entered do not match.  Exiting."
		exit 1
	fi
fi

#------------------------------------------------------------------------------
# If updating prod servers, prompt for old and new passwords
# If only updating file(s), don't prompt for OLD passwords
#------------------------------------------------------------------------------
if [ $PROMPTPROD -eq 1 ]
then
	if [ $FILEONLY -eq 0 ]
	then
# prompt for the old password
		OLDPW1=""
		while [ "$OLDPW1" = "" ]
		do
		        echo "Enter OLD PROD password:"
		        stty -echo
		        read OLDPW1
		        stty echo
		done
		OLDPW2=""
		while [ "$OLDPW2" = "" ]
		do
		        echo "Re-enter OLD PROD password:"
		        stty -echo
		        read OLDPW2
		        stty echo
		done
		if [ "$OLDPW1" = "$OLDPW2" ]
		then
			export OLDPRODPWD=$OLDPW1
		else
			echo "ERROR - Old PROD passwords entered do not match.  Exiting."
			exit 1
		fi
	fi

# prompt for the new password
	NEWPW1=""
	while [ "$NEWPW1" = "" ]
	do
	        echo "Enter NEW PROD password:"
	        stty -echo
	        read NEWPW1
	        stty echo
	done
	NEWPW2=""
	while [ "$NEWPW2" = "" ]
	do
	        echo "Re-enter NEW PROD password:"
	        stty -echo
	        read NEWPW2
	        stty echo
	done
	if [ "$NEWPW1" = "$NEWPW2" ]
	then
		export NEWPRODPWD=$NEWPW1
	else
		echo "ERROR - New PROD passwords entered do not match.  Exiting."
		exit 1
	fi
fi

#--------------------------------------------------------------------------
# Write report headers
#--------------------------------------------------------------------------
> $RPTFILE
chmod 600 $RPTFILE
echo $CALLED >> $RPTFILE
echo "`date` Changing password for $LOGIN on the following servers:" >> $RPTFILE
cat $TMPASE $TMPREP $TMPVIP >> $RPTFILE

export SQLRC=0
export CPRC=0
export MODRC=0
export PINGRC=0
export PPRC=0
export NFSRC=0

#------------------------------------------------------------------------------
# Add ASE to ping exceptions list
# Update login password on each ASE
# Ping connection to validate login before attempting to change password
# Do not use the current password file to connect--use the old password from the prompt
# Check for errors
# If only updating file(s), don't change password, just update the file and test connection with the new file
#------------------------------------------------------------------------------
cat $TMPASE |
while read DBSERVER STATUS
do
	export DBSERVER STATUS

	echo $DBSERVER >> $EXCEPT_LIST

	if [ "$STATUS" = "prod" ]
	then
		export OLDPWD=$OLDPRODPWD	
		export NEWPWD=$NEWPRODPWD	
	else
		export OLDPWD=$OLDTESTPWD	
		export NEWPWD=$NEWTESTPWD	
	fi

        export PWDFILE=$CTLDIR/.syb_pw.$DBSERVER.$LOGIN.enc
        export BACKUPFILE=$CTLDIR/sybpw_bak/.syb_pw.$DBSERVER.$LOGIN.enc.$DATETIME

	if [ $FILEONLY -eq 0 ]
	then
# Ping the server
		echo "\nASE $DBSERVER ($LOGIN) - checking connection" | tee -a $RPTFILE
		> $PINGRESULT
		pingServer $DBSERVER $LOGIN $OLDPWD
		if [ $? -eq 1 ]
		then
			export PINGRC=1
			echo "ASE $DBSERVER ($LOGIN) - connection FAILED" | tee -a $RPTFILE
			cat $PINGRESULT >> $RPTFILE
			echo "ASE $DBSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
			continue
		else
			echo "ASE $DBSERVER ($LOGIN) - connection SUCCESSFUL" | tee -a $RPTFILE
		fi

# Change the password
		echo "ASE $DBSERVER ($LOGIN) - changing ASE password" | tee -a $RPTFILE
		> $SQLOUT
		$ISQLEXE -U$LOGIN -S$DBSERVER -w200 <<-! | grep -v Password: >> $SQLOUT
		`echo $OLDPWD`
		if exists (select name from sybsystemprocs..sysobjects where type = 'P' and name = 'sp_remote_password')
			exec sp_remote_password $OLDPWD,$NEWPWD,$LOGIN 
		else
			exec sp_password $OLDPWD,$NEWPWD,$LOGIN 
		go
		!

		checkSqlErr $SQLOUT
		if [ $? -eq 1 ]
		then
			export SQLRC=1
			echo "ASE $DBSERVER ($LOGIN) - ASE password change FAILED" | tee -a $RPTFILE
			cat $SQLOUT >> $RPTFILE
			echo "ASE $DBSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
			continue
		fi

		echo "ASE $DBSERVER ($LOGIN) - ASE password change SUCCESSFUL" | tee -a $RPTFILE
		cat $SQLOUT >> $RPTFILE
	fi

#------------------------------------------------------------------------------
# If no sql errors, update the encrypted password file (save a copy first)
#------------------------------------------------------------------------------

        echo "ASE $DBSERVER ($LOGIN) - backing up $PWDFILE to $BACKUPFILE" | tee -a $RPTFILE

	if [ -f $PWDFILE ]
	then
# chmod just in case perms were wrong to start with--perms will carry over to backup file, but chmod that too
		chmod 600 $PWDFILE
		cp -p $PWDFILE $BACKUPFILE
		if [ $? -ne 0 ]
		then
			export CPRC=1
			echo "ASE $DBSERVER ($LOGIN) - file backup FAILED - $PWDFILE WILL NOT BE CHANGED" | tee -a $RPTFILE
			echo "ASE $DBSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
			continue
		else
			echo "ASE $DBSERVER ($LOGIN) - file backup SUCCESSFUL" | tee -a $RPTFILE
			chmod 600 $BACKUPFILE
		fi
	else
		echo "ASE $DBSERVER ($LOGIN) - $PWDFILE does not exist--new file will be created"
# create and chmod the new password file before putting anything in it
		touch $PWDFILE;chmod 600 $PWDFILE
	fi

	echo "ASE $DBSERVER ($LOGIN) - modifying $PWDFILE" | tee -a $RPTFILE

#------------------------------------------------------------------------------
# Store the encrypted password in the file
# A temp file is used to hold the password because I can't figure out how to
# encrypt a string directly into a target file.
# stderr from the openssl commands is directed to a single output file
# push file to designated NFS envs and check return status
#------------------------------------------------------------------------------
	touch $TMPFILE;chmod 600 $TMPFILE
	echo $NEWPWD > $TMPFILE
	> $OPENSSLOUT;chmod 600 $OPENSSLOUT
	echo "\n" | $SWBIN/openssl des3 -d -in $PASSPHRASE -pass stdin 2>>$OPENSSLOUT | $SWBIN/openssl des3 -e -pass stdin -in $TMPFILE -out $PWDFILE >> $OPENSSLOUT 2>&1
	test -f $TMPFILE && \rm $TMPFILE

	if [ -s $OPENSSLOUT ]
	then
		export MODRC=1
		echo "ASE $DBSERVER ($LOGIN) - file modify FAILED" | tee -a $RPTFILE
		cat $OPENSSLOUT >> $RPTFILE
		echo "ASE $DBSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
		continue
	else
		echo "ASE $DBSERVER ($LOGIN) - file modify SUCCESSFUL" | tee -a $RPTFILE
	fi
#------------------------------------------------------------------------------
# Test connection to ASE using newly encrypted file
#------------------------------------------------------------------------------
	echo "ASE $DBSERVER ($LOGIN) - checking connection with new password file" | tee -a $RPTFILE
	> $PINGRESULT
	pingServer $DBSERVER $LOGIN $PWDFILE
	if [ $? -eq 1 ]
	then
		export PINGRC=1
		echo "ASE $DBSERVER ($LOGIN) - connection FAILED" | tee -a $RPTFILE
		cat $PINGRESULT >> $RPTFILE
		echo "ASE $DBSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
		continue
	else
		echo "ASE $DBSERVER ($LOGIN) - connection SUCCESSFUL" | tee -a $RPTFILE
		cat $PINGRESULT >> $RPTFILE
		if [ $PUSHNFS -eq 1 ]
		then
			echo "ASE $DBSERVER ($LOGIN) - pushing file to $NFSENVS NFS envs" | tee -a $RPTFILE
			$SCRDIR/pushNfs.scr -E $NFSENVS -F $PWDFILE -noprompt
			test $? -ne 0 && export NFSRC=1
		fi
	fi
done

#------------------------------------------------------------------------------
# Add repserver to ping exceptions list
# Update login password on each REP server
# If the RSASA name is the same as the RSSD name, then this repserver uses ERSSD and sybdmin password must be changed on the ASA
# Check for errors against each server
# If no errors, update the encrypted password file (save a copy first)
# If only updating file(s), don't change password, just update the file and test connection with the new file
#------------------------------------------------------------------------------
cat $TMPREP |
while read REPSERVER STATUS RSASA RSSD
do
	export REPSERVER STATUS RSASA RSSD
	test "$RSASA" = "$RSSD" && export ERSSD=1 || export ERSSD=0

	echo $REPSERVER >> $EXCEPT_LIST
	test $ERSSD -eq 1 && echo $RSASA >> $EXCEPT_LIST

	if [ "$STATUS" = "prod" ]
	then
		export OLDPWD=$OLDPRODPWD	
		export NEWPWD=$NEWPRODPWD	
	else
		export OLDPWD=$OLDTESTPWD	
		export NEWPWD=$NEWTESTPWD	
	fi

#------------------------------------------------------------------------------
# First update REPSERVER password -- ERSSD will be done after entire REPSERVER section
#------------------------------------------------------------------------------

        export PWDFILE=$CTLDIR/.syb_pw.$REPSERVER.$LOGIN.enc
        export BACKUPFILE=$CTLDIR/sybpw_bak/.syb_pw.$REPSERVER.$LOGIN.enc.$DATETIME

	if [ $FILEONLY -eq 0 ]
	then
# Ping the server
		echo "\nREP $REPSERVER ($LOGIN) - checking connection" | tee -a $RPTFILE
		> $PINGRESULT
		pingServer $REPSERVER $LOGIN $OLDPWD
		if [ $? -eq 1 ]
		then
			export PINGRC=1
			echo "REP $REPSERVER ($LOGIN) - connection FAILED" | tee -a $RPTFILE
			cat $PINGRESULT >> $RPTFILE
			echo "REP $REPSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
			continue
		else
			echo "REP $REPSERVER ($LOGIN) - connection SUCCESSFUL" | tee -a $RPTFILE
		fi

# Change the password
		echo "REP $REPSERVER ($LOGIN) - changing REP password" | tee -a $RPTFILE
		> $SQLOUT
		$ISQLEXE -U$LOGIN -S$REPSERVER -w200 <<-! | grep -v Password: >> $SQLOUT
		`echo $OLDPWD`
		alter user $LOGIN set password $NEWPWD verify password $OLDPWD
		go
		!

		checkSqlErr $SQLOUT
		if [ $? -eq 1 ]
		then
			export SQLRC=1
			echo "REP $REPSERVER ($LOGIN) - REP password change FAILED" | tee -a $RPTFILE
			cat $SQLOUT >> $RPTFILE
			echo "REP $REPSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
			continue
		fi

		echo "REP $REPSERVER ($LOGIN) - password change SUCCESSFUL" | tee -a $RPTFILE
		cat $SQLOUT >> $RPTFILE
	fi

#------------------------------------------------------------------------------
# If no sql errors, update the encrypted password file (save a copy first)
#------------------------------------------------------------------------------

        echo "REP $REPSERVER ($LOGIN) - backing up $PWDFILE to $BACKUPFILE" | tee -a $RPTFILE

	if [ -f $PWDFILE ]
	then
# chmod just in case perms were wrong to start with--perms will carry over to backup file, but chmod that too
		chmod 600 $PWDFILE
		cp -p $PWDFILE $BACKUPFILE
		if [ $? -ne 0 ]
		then
			export CPRC=1
			echo "REP $REPSERVER ($LOGIN) - file backup FAILED - $PWDFILE WILL NOT BE CHANGED" | tee -a $RPTFILE
			echo "ASE $REPSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
			continue
		else
			echo "REP $REPSERVER ($LOGIN) - file backup SUCCESSFUL" | tee -a $RPTFILE
			chmod 600 $BACKUPFILE
		fi
	else
		echo "REP $REPSERVER ($LOGIN)  - $PWDFILE does not exist--new file will be created"
# create and chmod the new password file before putting anything in it
		touch $PWDFILE;chmod 600 $PWDFILE
	fi

	echo "REP $REPSERVER ($LOGIN) - modifying $PWDFILE" | tee -a $RPTFILE

#------------------------------------------------------------------------------
# Store the encrypted password in the file
# A temp file is used to hold the password because I can't figure out how to
# encrypt a string directly into a target file.
# stderr from the openssl commands is directed to a single output file
#------------------------------------------------------------------------------
	touch $TMPFILE;chmod 600 $TMPFILE
	echo $NEWPWD > $TMPFILE
	> $OPENSSLOUT;chmod 600 $OPENSSLOUT
	echo "\n" | $SWBIN/openssl des3 -d -in $PASSPHRASE -pass stdin 2>>$OPENSSLOUT | $SWBIN/openssl des3 -e -pass stdin -in $TMPFILE -out $PWDFILE >> $OPENSSLOUT 2>&1
	test -f $TMPFILE && \rm $TMPFILE

	if [ -s $OPENSSLOUT ]
	then
		export MODRC=1
		echo "REP $REPSERVER ($LOGIN) - file modify FAILED" | tee -a $RPTFILE
		cat $OPENSSLOUT >> $RPTFILE
		echo "REP $REPSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
		continue
	else
		echo "REP $REPSERVER ($LOGIN) - file modify SUCCESSFUL" | tee -a $RPTFILE
	fi
#------------------------------------------------------------------------------
# Test connection to REP using newly encrypted file
#------------------------------------------------------------------------------
	echo "REP $REPSERVER ($LOGIN) - checking connection with new password file" | tee -a $RPTFILE
	> $PINGRESULT
	pingServer $REPSERVER $LOGIN $PWDFILE
	if [ $? -eq 1 ]
	then
		export PINGRC=1
		echo "REP $REPSERVER ($LOGIN) - connection FAILED" | tee -a $RPTFILE
		cat $PINGRESULT >> $RPTFILE
		echo "REP $REPSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
		continue
	else
		echo "REP $REPSERVER ($LOGIN) - connection SUCCESSFUL" | tee -a $RPTFILE
		cat $PINGRESULT >> $RPTFILE
		if [ $PUSHNFS -eq 1 ]
		then
			echo "REP $REPSERVER ($LOGIN) - pushing file to $NFSENVS NFS envs" | tee -a $RPTFILE
			$SCRDIR/pushNfs.scr -E $NFSENVS -F $PWDFILE -noprompt
			test $? -ne 0 && export NFSRC=1
		fi
	fi

#------------------------------------------------------------------------------
# Now update ERSSD password
# sa login does not exist on RS 15 ERSSDs....skip these
# Can't use ISQLEXE with -X parm, use isql call directly
#------------------------------------------------------------------------------

	if [ $ERSSD -eq 1  ]
	then

		if [ "$LOGIN" = "sa" ]
		then
			echo "REP $RSASA ($LOGIN) - this login does not exist in ERSSD -  skipping to next server" | tee -a $RPTFILE
			continue
		fi

	        export PWDFILE=$CTLDIR/.syb_pw.$RSASA.$LOGIN.enc
	        export BACKUPFILE=$CTLDIR/sybpw_bak/.syb_pw.$RSASA.$LOGIN.enc.$DATETIME

		if [ $FILEONLY -eq 0 ]
		then
# Ping the server
			echo "\nREP $RSASA ($LOGIN) - checking connection" | tee -a $RPTFILE
			> $PINGRESULT
			pingServer $RSASA $LOGIN $OLDPWD
			if [ $? -eq 1 ]
			then
				export PINGRC=1
				echo "REP $RSASA ($LOGIN) - connection FAILED" | tee -a $RPTFILE
				cat $PINGRESULT >> $RPTFILE
				echo "REP $RSASA ($LOGIN) - skipping to next server" | tee -a $RPTFILE
				continue
			else
				echo "REP $RSASA ($LOGIN) - connection SUCCESSFUL" | tee -a $RPTFILE
			fi

# Change the password
			echo "REP $RSASA ($LOGIN) - changing RSASA password" | tee -a $RPTFILE
			> $SQLOUT
			$OCSBIN/isql -U$LOGIN -S$RSASA -w200 <<-! | grep -v Password: >> $SQLOUT
			`echo $OLDPWD`
			grant connect to $LOGIN identified by $NEWPWD
			go
			!

			checkSqlErr $SQLOUT
			if [ $? -eq 1 ]
			then
				export SQLRC=1
				echo "REP $RSASA ($LOGIN) - RSASA password change FAILED" | tee -a $RPTFILE
				cat $SQLOUT >> $RPTFILE
				echo "REP $RSASA ($LOGIN) - skipping to next server" | tee -a $RPTFILE
				continue
			fi

			echo "REP $RSASA ($LOGIN) - password change SUCCESSFUL" | tee -a $RPTFILE
			cat $SQLOUT >> $RPTFILE
		fi

#------------------------------------------------------------------------------
# If no sql errors, update the encrypted password file (save a copy first)
#------------------------------------------------------------------------------

		echo "REP $RSASA ($LOGIN) - backing up $PWDFILE to $BACKUPFILE" | tee -a $RPTFILE

		if [ -f $PWDFILE ]
		then
# chmod just in case perms were wrong to start with--perms will carry over to backup file, but chmod that too
			chmod 600 $PWDFILE
			cp -p $PWDFILE $BACKUPFILE
			if [ $? -ne 0 ]
			then
				export CPRC=1
				echo "REP $RSASA ($LOGIN) - file backup FAILED - $PWDFILE WILL NOT BE CHANGED" | tee -a $RPTFILE
				echo "ASE $RSASA ($LOGIN) - skipping to next server" | tee -a $RPTFILE
				continue
			else
				echo "REP $RSASA ($LOGIN) - file backup SUCCESSFUL" | tee -a $RPTFILE
				chmod 600 $BACKUPFILE
			fi
		else
			echo "REP $RSASA ($LOGIN)  - $PWDFILE does not exist--new file will be created"
# create and chmod the new password file before putting anything in it
			touch $PWDFILE;chmod 600 $PWDFILE
		fi

		echo "REP $RSASA ($LOGIN) - modifying $PWDFILE" | tee -a $RPTFILE

#------------------------------------------------------------------------------
# Store the encrypted password in the file
# A temp file is used to hold the password because I can't figure out how to
# encrypt a string directly into a target file.
# stderr from the openssl commands is directed to a single output file
#------------------------------------------------------------------------------
		touch $TMPFILE;chmod 600 $TMPFILE
		echo $NEWPWD > $TMPFILE
		> $OPENSSLOUT;chmod 600 $OPENSSLOUT
		echo "\n" | $SWBIN/openssl des3 -d -in $PASSPHRASE -pass stdin 2>>$OPENSSLOUT | $SWBIN/openssl des3 -e -pass stdin -in $TMPFILE -out $PWDFILE >> $OPENSSLOUT 2>&1
		test -f $TMPFILE && \rm $TMPFILE

		if [ -s $OPENSSLOUT ]
		then
			export MODRC=1
			echo "REP $RSASA ($LOGIN) - file modify FAILED" | tee -a $RPTFILE
			cat $OPENSSLOUT >> $RPTFILE
			echo "REP $RSASA ($LOGIN) - skipping to next server" | tee -a $RPTFILE
			continue
		else
			echo "REP $RSASA ($LOGIN) - file modify SUCCESSFUL" | tee -a $RPTFILE
		fi
#------------------------------------------------------------------------------
# Test connection to REP using newly encrypted file
#------------------------------------------------------------------------------
		echo "REP $RSASA ($LOGIN) - checking connection with new password file" | tee -a $RPTFILE
		> $PINGRESULT
		pingServer $RSASA $LOGIN $PWDFILE
		if [ $? -eq 1 ]
		then
			export PINGRC=1
			echo "REP $RSASA ($LOGIN) - connection FAILED" | tee -a $RPTFILE
			cat $PINGRESULT >> $RPTFILE
			echo "REP $RSASA ($LOGIN) - skipping to next server" | tee -a $RPTFILE
			continue
		else
			echo "REP $RSASA ($LOGIN) - connection SUCCESSFUL" | tee -a $RPTFILE
			cat $PINGRESULT >> $RPTFILE
			if [ $PUSHNFS -eq 1 ]
			then
				echo "REP $RSASA ($LOGIN) - pushing file to $NFSENVS NFS envs" | tee -a $RPTFILE
				$SCRDIR/pushNfs.scr -E $NFSENVS -F $PWDFILE -noprompt
				test $? -ne 0 && export NFSRC=1
			fi
		fi

	fi

done

#------------------------------------------------------------------------------
# Add VIP to ping exceptions list
# Update login password file for each VIP
#------------------------------------------------------------------------------
cat $TMPVIP |
while read VIPSERVER STATUS
do
	export VIPSERVER STATUS

	echo $VIPSERVER >> $EXCEPT_LIST

	if [ "$STATUS" = "prod" ]
	then
		export OLDPWD=$OLDPRODPWD	
		export NEWPWD=$NEWPRODPWD	
	else
		export OLDPWD=$OLDTESTPWD	
		export NEWPWD=$NEWTESTPWD	
	fi

	export PWDFILE=$CTLDIR/.syb_pw.$VIPSERVER.$LOGIN.enc
	export BACKUPFILE=$CTLDIR/sybpw_bak/.syb_pw.$VIPSERVER.$LOGIN.enc.$DATETIME

#------------------------------------------------------------------------------
# Verify connection with NEW password -- to determine if login exists
# NOTE: NEW password needs to be used because it was changed against
#	actual ASE in ASE loop above
#------------------------------------------------------------------------------
	if [ $FILEONLY -eq 0 ]
	then
		echo "\nVIP $VIPSERVER ($LOGIN) - checking connection" | tee -a $RPTFILE
		> $PINGRESULT
		pingServer $VIPSERVER $LOGIN $NEWPWD
		if [ $? -eq 1 ]
		then
			export PINGRC=1
			echo "VIP $VIPSERVER ($LOGIN) - connection FAILED" | tee -a $RPTFILE
			cat $PINGRESULT >> $RPTFILE
			echo "VIP $VIPSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
			continue
		else
			echo "VIP $VIPSERVER ($LOGIN) - connection SUCCESSFUL" | tee -a $RPTFILE
			cat $PINGRESULT >> $RPTFILE
		fi
	fi

#------------------------------------------------------------------------------
# If no errors on test connection, update the encrypted password file (save a copy first)
#------------------------------------------------------------------------------

        echo "VIP $VIPSERVER ($LOGIN) - backing up $PWDFILE to $BACKUPFILE" | tee -a $RPTFILE

	if [ -f $PWDFILE ]
	then
# chmod just in case perms were wrong to start with--perms will carry over to backup file, but chmod that too
		chmod 600 $PWDFILE
		cp -p $PWDFILE $BACKUPFILE
		if [ $? -ne 0 ]
		then
			export CPRC=1
			echo "VIP $VIPSERVER ($LOGIN) - file backup FAILED - $PWDFILE WILL NOT BE CHANGED" | tee -a $RPTFILE
			echo "VIP $VIPSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
			continue
		else
			echo "VIP $VIPSERVER ($LOGIN) - file backup SUCCESSFUL" | tee -a $RPTFILE
			chmod 600 $BACKUPFILE
		fi
	else
		echo "VIP $VIPSERVER ($LOGIN) - $PWDFILE does not exist--new file will be created"
# create and chmod the new password file before putting anything in it
		touch $PWDFILE;chmod 600 $PWDFILE
	fi

	echo "VIP $VIPSERVER ($LOGIN) - modifying $PWDFILE" | tee -a $RPTFILE

#------------------------------------------------------------------------------
# Store the encrypted password in the file
# A temp file is used to hold the password because I can't figure out how to
# encrypt a string directly into a target file.
# stderr from the openssl commands is directed to a single output file
#------------------------------------------------------------------------------
	touch $TMPFILE;chmod 600 $TMPFILE
	echo $NEWPWD > $TMPFILE
	> $OPENSSLOUT;chmod 600 $OPENSSLOUT
	echo "\n" | $SWBIN/openssl des3 -d -in $PASSPHRASE -pass stdin 2>>$OPENSSLOUT | $SWBIN/openssl des3 -e -pass stdin -in $TMPFILE -out $PWDFILE >> $OPENSSLOUT 2>&1
	test -f $TMPFILE && \rm $TMPFILE

	if [ -s $OPENSSLOUT ]
	then
		export MODRC=1
		echo "VIP $VIPSERVER ($LOGIN) - file modify FAILED" | tee -a $RPTFILE
		cat $OPENSSLOUT >> $RPTFILE
		echo "VIP $VIPSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
		continue
	else
		echo "VIP $VIPSERVER ($LOGIN) - file modify SUCCESSFUL" | tee -a $RPTFILE
	fi
#------------------------------------------------------------------------------
# Test connection to VIP using newly encrypted file
#------------------------------------------------------------------------------
	echo "VIP $VIPSERVER ($LOGIN) - checking connection with new password file" | tee -a $RPTFILE
	> $PINGRESULT
	pingServer $VIPSERVER $LOGIN $PWDFILE
	if [ $? -eq 1 ]
	then
		export PINGRC=1
		echo "VIP $VIPSERVER ($LOGIN) - connection FAILED" | tee -a $RPTFILE
		cat $PINGRESULT >> $RPTFILE
		echo "VIP $VIPSERVER ($LOGIN) - skipping to next server" | tee -a $RPTFILE
		continue
	else
		echo "VIP $VIPSERVER ($LOGIN) - connection SUCCESSFUL" | tee -a $RPTFILE
		cat $PINGRESULT >> $RPTFILE
		if [ $PUSHNFS -eq 1 ]
		then
			echo "VIP $VIPSERVER ($LOGIN) - pushing file to $NFSENVS NFS envs" | tee -a $RPTFILE
			$SCRDIR/pushNfs.scr -E $NFSENVS -F $PWDFILE -noprompt
			test $? -ne 0 && export NFSRC=1
		fi
	fi
done

#------------------------------------------------------------------------------
# Exit with final status
#------------------------------------------------------------------------------
if [ $SQLRC -eq 1 -o $CPRC -eq 1 -o $MODRC -eq 1 -o $PINGRC -eq 1 -o $NFSRC -eq 1 ]
then
	echo "\nOVERALL SCRIPT STATUS: FAILED\n"
	echo "Report file:  $RPTFILE"
	exit 1
else
	echo "\nOVERALL SCRIPT STATUS: SUCCESSFUL\n"
	echo "Report file:  $RPTFILE"
	exit 0
fi
