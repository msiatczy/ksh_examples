#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: grantWcmDefaultPerms.scr -S <DBSERVER> -D <dbname>|all {-m <maildest>}
#
#  Description: Grant default permissions to WC_ALL_DBREADONLY and WC_ALL_DBFULL on WCM Sybase ASEs
#		WC_ALL_DBREADONLY  - select on all user tables/views
#		WC_ALL_DBFULL  - insert,update,delete,select on all user tables/views, execute on all procs
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	-S DBSERVER
#              	-D DBNAME|all
#              	-m maildest override
#
#  NOTE:  corporate database is excluded from the grants
#
#  Modification History:
#	10/16/06 M. Siatczynski	Initial Script (copy of grantRelsupRolePerms.scr)
#	02/12/07 M. Siatczynski	remove oscar
#	01/13/10 M. Siatczynski	Updated to exclude Evergreen "system" dbs (dbadb, dba_tempdb)
#	02/25/11 M. Siatczynski	Update profile source block
#--------------------------------------------------------------------------
if [ -f /sccm/dba/sybase/.dbaSybProfile ]
then
	. /sccm/dba/sybase/.dbaSybProfile
elif [ -f /sybase/.dbaSybProfile ]
then
	. /sybase/.dbaSybProfile
fi

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -S <DBSERVER> -D <dbname>|all {-m <maildest>}"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 1
else
	while [ $# -gt 0 ]
	do
	        case $1 in
	                -S)	export ONEDBSERVER=$2;shift 2;;
	                -D)	export ONEDBNAME=$2;shift 2;;
	                -m)	export MAILDEST=$2;shift 2;;
	                -*)	echo $USAGE;exit 1;;
	                *)	echo $USAGE;exit 1;;
	        esac
	done
fi

#--------------------------------------------------------------------------
#  Validate parms
#--------------------------------------------------------------------------
if [ ! "$ONEDBSERVER" -a ! "$ONEDBNAME" ]
then
	echo $USAGE
	echo "DBSERVER and DBNAME parms  must be passed"
	exit 1
fi

#--------------------------------------------------------------------------
#  Use this to describe major sections of code
#--------------------------------------------------------------------------
export DBSERVERLIST=/tmp/serverlist.$$
export DBLIST=/tmp/dbnamelist.$$
export SQL1=/tmp/perm.sql1.$$
export SQL2=/tmp/perm.sql2.$$
export SQL3=/tmp/perm.sql3.$$
export SQLOUT=/tmp/sqlout.$$
export MAILFILE=/tmp/mailfile.$$

export HIGHRC=0

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test $SQL1 && \rm -f $SQL1
	test $SQL2 && \rm -f $SQL2
	test $SQL3 && \rm -f $SQL3
	test $SQLOUT && \rm -f $SQLOUT
	test $DBLIST && \rm -f $DBLIST
	test $DBSERVERLIST && \rm -f $DBSERVERLIST
	test $MAILFILE && \rm -f $MAILFILE
}

trap 'tempCleanup' EXIT INT TERM

#--------------------------------------------------------------------------
# Initialize list of dbservers
# Using DBSERVERLIST leaves flexibility for running against multiple ASEs in the future
#--------------------------------------------------------------------------
echo "$ONEDBSERVER" > $DBSERVERLIST

#--------------------------------------------------------------------------
# Process each DBSERVER separately
# If a single dbname is passed, put it in the list, otherwise generate a 
# list of all DBs on the server
# Ignore read only databases (status=1024) and offline databases (status2=16)
#--------------------------------------------------------------------------
cat $DBSERVERLIST |
while read DBSERVER
do
#--------------------------------------------------------------------------
# Write headers
#--------------------------------------------------------------------------
	export LOGFILE=$LOGDIR/useradmin/$DBSERVER/$DBSERVER.grantWcmDefaultPerms.$DATETIME
	> $LOGFILE
	echo "`date` Granting default perms to WC_ALL_DBFULL and WC_ALL_DBREADONLY on $DBSERVER" >> $LOGFILE

	if [ "$ONEDBNAME" = "all" ]
	then
		$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -b -w200 <<-! | grep -v Password > $DBLIST
		`getPass $DBSERVER $ADMINLOGIN`
		set nocount on
		go
		select name from master..sysdatabases where 
		name not in ('master','model','lookjack','dba','dbadb','corporate') and 
		name not like 'dbcc%' and 
		name not like 'sybsystem%' and
		name not like 'sybsecurity%' and
		name not like '%tempdb%' and
		status & 1024 <> 1024 and
		status2 & 16 <> 16
		go
		!
		checkSqlErr $DBLIST
		if [ $? -eq 1 ]
		then
			export HIGHRC=1
			echo "ERROR - getting list of databases for $DBSERVER" >> $LOGFILE
			echo "Skipping default grants for $DBSERVER" >> $LOGFILE
			cat $DBLIST >> $LOGFILE
			continue
		fi
	else
		echo $ONEDBNAME > $DBLIST
	fi

#--------------------------------------------------------------------------
# Format the sql statements to generate the grant perm sql statements
# action 193 = select
# action 195 = insert
# action 196 = delete
# action 197 = update
# action 224 = execute
# the group by and having is needed to check if ALL perms exist
# Do not grant perms on replication related objects (repmon and rs_ objects)
#--------------------------------------------------------------------------
	> $SQL1
	cat $DBLIST |
	while read DBNAME
	do
		export DBNAME
		echo "use $DBNAME" >> $SQL1
		echo "go" >> $SQL1
		echo "set nocount on" >> $SQL1
		echo "go" >> $SQL1
#--------------------------------------------------------------------------
# format insert,update,delete,select grants for WC_ALL_DBFULL
#--------------------------------------------------------------------------
		echo "if exists (select * from $DBNAME..sysobjects where type in ('U','V') and name != 'repmon' and name not like 'rs[_]%' and id not in (select id from $DBNAME..sysprotects where (uid=user_id(\"WC_ALL_DBFULL\")) and action in (193,195,196,197) group by id having count(*) = 4))" >> $SQL1
		echo "begin" >> $SQL1
		echo "select \"use $DBNAME\"" >> $SQL1
		echo "select \"go\"" >> $SQL1
                echo "select \"grant insert,update,delete,select on \",user_name(uid)+\".\"+name,\" to WC_ALL_DBFULL\",convert(char(1),0xa)+\"go\"" >> $SQL1
                echo "from $DBNAME..sysobjects" >> $SQL1
                echo "where type in ('U','V')" >> $SQL1
                echo "and name != 'repmon' and name not like 'rs[_]%'" >> $SQL1
                echo "and id not in (select id from $DBNAME..sysprotects where (uid=user_id(\"WC_ALL_DBFULL\")) and action in (193,195,196,197) group by id having count(*) = 4)" >> $SQL1
                echo "order by name" >> $SQL1
		echo "end" >> $SQL1
		echo "go" >> $SQL1

#--------------------------------------------------------------------------
# format execute grants for WC_ALL_DBFULL
#--------------------------------------------------------------------------
		echo "if exists (select * from $DBNAME..sysobjects where type = 'P' and name != 'repmon' and name not like 'rs[_]%' and id not in (select id from $DBNAME..sysprotects where (uid=user_id(\"WC_ALL_DBFULL\")) and action = 224 group by id having count(*) = 1))" >> $SQL1
		echo "begin" >> $SQL1
		echo "select \"use $DBNAME\"" >> $SQL1
		echo "select \"go\"" >> $SQL1
                echo "select \"grant execute on \",user_name(uid)+\".\"+name,\" to WC_ALL_DBFULL\",convert(char(1),0xa)+\"go\"" >> $SQL1
                echo "from $DBNAME..sysobjects" >> $SQL1
                echo "where type = 'P'" >> $SQL1
                echo "and name != 'repmon' and name not like 'rs[_]%'" >> $SQL1
                echo "and id not in (select id from $DBNAME..sysprotects where (uid=user_id(\"WC_ALL_DBFULL\")) and action = 224 group by id having count(*) = 1)" >> $SQL1
                echo "order by name" >> $SQL1
		echo "end" >> $SQL1
		echo "go" >> $SQL1

#--------------------------------------------------------------------------
# format select grants for WC_ALL_DBREADONLY
#--------------------------------------------------------------------------
		echo "if exists (select * from $DBNAME..sysobjects where type in ('U','V') and name != 'repmon' and name not like 'rs[_]%' and id not in (select id from $DBNAME..sysprotects where (uid=user_id(\"WC_ALL_DBREADONLY\")) and action = 193 group by id having count(*) = 1))" >> $SQL1
		echo "begin" >> $SQL1
		echo "select \"use $DBNAME\"" >> $SQL1
		echo "select \"go\"" >> $SQL1
                echo "select \"grant select on \",user_name(uid)+\".\"+name,\" to WC_ALL_DBREADONLY\",convert(char(1),0xa)+\"go\"" >> $SQL1
                echo "from $DBNAME..sysobjects" >> $SQL1
                echo "where type in ('U','V')" >> $SQL1
                echo "and name != 'repmon' and name not like 'rs[_]%'" >> $SQL1
                echo "and id not in (select id from $DBNAME..sysprotects where (uid=user_id(\"WC_ALL_DBREADONLY\")) and action = 193 group by id having count(*) = 1)" >> $SQL1
                echo "order by name" >> $SQL1
		echo "end" >> $SQL1
		echo "go" >> $SQL1
	done

#--------------------------------------------------------------------------
# Execute the sql statements that will generate the grant perm statements
#--------------------------------------------------------------------------
	echo "`date` $DBSERVER - Checking existing perms..." >> $LOGFILE
	> $SQL2
	getPass $DBSERVER $ADMINLOGIN | $ISQLEXE -U$ADMINLOGIN -S$DBSERVER -b -w200 -i$SQL1 | grep -v Password | sed 's/^ //g' >> $SQL2
	checkSqlErr $SQL2
	if [ $? -eq 1 ]
	then
		export HIGHRC=1
		echo "ERROR - querying $DBSERVER" >> $LOGFILE
		echo "Skipping default grants for $DBSERVER" >> $LOGFILE
		cat $SQL2 >> $LOGFILE
		continue
	fi

# if there are any perms that need to be granted...
	if [ -s $SQL2 ]
	then
		> $SQL3
		echo "set replication off" >> $SQL3
		echo "go" >> $SQL3
		cat $SQL2 >> $SQL3
	else
		echo "`date` $DBSERVER - No perms need to be granted" >> $LOGFILE
		continue
	fi

#--------------------------------------------------------------------------
# Pipe in the sql to grant the perms
# If errors, send email
#--------------------------------------------------------------------------
	echo "`date` $DBSERVER - Granting perms..." >> $LOGFILE
	> $SQLOUT
	getPass $DBSERVER $ADMINLOGIN | $ISQLEXE -U$ADMINLOGIN -S$DBSERVER -w200 -e -i$SQL3 | grep -v Password >> $SQLOUT

	cat $SQLOUT >> $LOGFILE

	checkSqlErr $SQLOUT
	if [ $? -eq 1 ]
	then
		export HIGHRC=1
		echo "ERROR - Granting default perms on $DBSERVER" >> $LOGFILE
		echo "$DBSERVER - Default perm grants FAILED" >> $MAILFILE
		continue
	fi
done

#--------------------------------------------------------------------------
# Write trailer
# send email
# Exit
#--------------------------------------------------------------------------
echo "`date` Script complete" >> $LOGFILE

if [ $HIGHRC -eq 1 ]
then
	echo "See $LOGFILE for error details" >> $MAILFILE
	export MAILSUBJECT="$DBSERVER: ERRORS granting default perms"
	sendMail
fi

exit $HIGHRC
