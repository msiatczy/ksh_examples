#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: changeAdminPassword.scr -login <login> -S <DBSERVER>
#
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#------------------------------------------------------------------------------
# Sample block for input parameters
#------------------------------------------------------------------------------
export USAGE="ERROR - Usage: $0 -login <login> -S <DBSERVER>"
export CALLED="$0 $*"

if [ $# -eq 0 ]
then
        echo $USAGE
        exit 1
else
        while [ $# -gt 0 ]
        do
                case $1 in
                        -login)		export LOGIN=$2;shift 2;;
                        -S)		export DBSERVER=$2;shift 2;;
                        -*)		echo $USAGE;exit 1;;
                        *)		echo $USAGE;exit 1;;
                esac
        done
fi

if [ ! "$LOGIN" -o ! "$DBSERVER" ]
then
        echo $USAGE
        echo "ERROR - Login and ASE MUST be specified"
        exit 1
fi

export PWDFILE=$CTLDIR/.syb_pw.$DBSERVER.$LOGIN.enc
touch $PWDFILE
chmod 600 $PWDFILE

#--------------------------------------------------------------------------
# Validate the passphrase file for $LOGIN
# If the file doesn't exist--don't go any farther
#--------------------------------------------------------------------------
export PASSPHRASE=$CTLDIR/.passphrase.$LOGIN
if [ ! -s $PASSPHRASE ]
then
        echo "ERROR - $PASSPHRASE does not exist or is 0 bytes"
        exit 1
fi

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
export TMPFILE=/tmp/tmpfile.$$
export OPENSSLOUT=/tmp/opensslout.$$
# save the original stty settings
export STTY_ORIG=`stty -g`

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test -f $TMPFILE && \rm -f $TMPFILE
	test -f $OPENSSLOUT && \rm -f $OPENSSLOUT
# reinstate the original stty settings
        stty $STTY_ORIG
}

trap 'tempCleanup' EXIT INT TERM

#------------------------------------------------------------------------------
# Prompt for the passwords
# If a single dbserver was passed, determine if it's prod/nonprod and set appropriate flag
# Otherwise, 
# 	if nonprod, set flag to prompt for nonprod password
#	if prod, set flag to prompt for prod password
#------------------------------------------------------------------------------

export NEWPWD=""

# prompt for the new password
	NEWPW1=""
	while [ "$NEWPW1" = "" ]
	do
	        echo "Enter NEW password:"
	        stty -echo
	        read NEWPW1
	        stty echo
	done
	NEWPW2=""
	while [ "$NEWPW2" = "" ]
	do
	        echo "Re-enter NEW password:"
	        stty -echo
	        read NEWPW2
	        stty echo
	done
	if [ "$NEWPW1" = "$NEWPW2" ]
	then
		export NEWPWD=$NEWPW1
	else
		echo "ERROR - New passwords entered do not match.  Exiting."
		exit 1
	fi

#------------------------------------------------------------------------------
# Store the encrypted password in the file
# A temp file is used to hold the password because I can't figure out how to
# encrypt a string directly into a target file.
# stderr from the openssl commands is directed to a single output file
#------------------------------------------------------------------------------
	touch $TMPFILE;chmod 600 $TMPFILE
	echo $NEWPWD > $TMPFILE
	> $OPENSSLOUT;chmod 600 $OPENSSLOUT
	echo "\n" | $SWBIN/openssl des3 -d -in $PASSPHRASE -pass stdin 2>>$OPENSSLOUT | $SWBIN/openssl des3 -e -pass stdin -in $TMPFILE -out $PWDFILE >> $OPENSSLOUT 2>&1
	test -f $TMPFILE && \rm $TMPFILE

	if [ -s $OPENSSLOUT ]
	then
		echo "ASE $DBSERVER ($LOGIN) - file modify FAILED"
		cat $OPENSSLOUT
	else
		echo "ASE $DBSERVER ($LOGIN) - file modify SUCCESSFUL"
	fi

exit 0
