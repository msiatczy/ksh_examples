#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: MissingStatsFormatter.scr -U <user> -F <FileGeneratedFromTrace> -S <DBSERVER> 
#
#  Description: Format sql to update stats based on the output from a MISSING STATS trace.
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	
#	 	The -F file MUST be piped through the following commands to pare it down:
# 		cat TRACEFILENAMES.TXT | grep STATS | sort | uniq -c > NEWFILENAME.out
# 		the NEWFILENAME.out would be used to feed this script.
#
#  Modification History:
#       12/11/09 M. Siatczynski Initial script
#	12/14/09 J. Aspenleiter Modified it to handle a raw file generated by searching STATS from trace files.
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#------------------------------------------------------------------------------
# Input parameters
#------------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -U <user> -F <FileGeneratedFromTrace> -S <DBSERVER> "

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 1
else
	while [ $# -gt 0 ]
	do
	        case $1 in
			-U)		export EXEUSER=$2;shift 2;;
			-F)		export FILE=$2;shift 2;;
			-S)		export DBSERVER=$2;shift 2;;
			-*)		echo $USAGE;exit 1;;
			*)		echo $USAGE;exit 1;;
	        esac
	done
fi

# these parms must be passed
if [ ! "$EXEUSER" -o ! "$DBSERVER" -o ! "$FILE" ]
then
	echo $USAGE
	exit 1
fi

#--------------------------------------------------------------------------
#  Initialize variables  
#--------------------------------------------------------------------------
export SQLFILE=/tmp/sqlfile.$$
export SQLOUT=/tmp/sqlout.$$
export OBJECTLIST=/tmp/objectlist.$$
export LOGFILE=$LOGDIR/misc/$DBSERVER/MissingStatsFormatter.$DATETIME
export SQL_STATS=$SQLDIR/$DBSERVER/$DBSERVER.updateStats.$DATETIME.sql
export HIGHRC=0

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test $SQLFILE && \rm -f $SQLFILE
	test $SQLOUT && \rm -f $SQLOUT
	test $OBJECTLIST && \rm -f $OBJECTLIST
}

trap 'tempCleanup' EXIT INT TERM

#------------------------------------------------------------------------------
# Create a working object list
#------------------------------------------------------------------------------
if [ -f $FILE ]
then
	if [ -s $FILE ]
	then
		#Format by getting the space out after the comma...
		cat $FILE | sed 's/, //g' > $OBJECTLIST
	else
		echo "WARNING - $FILE is 0 bytes"
		exit 1
	fi
else
# make sure the objectspec doesn't contain slashes--otherwise it may be an invalid file reference
	echo $FILE | grep '/' > /dev/null
	if [ $? -eq 0 ]
	then
		echo "ERROR - $FILE is not valid--possible invalid filename?"
		exit 1
	else
		#Format by getting the space out after the comma...
		cat $FILE | sed 's/, //g' > $OBJECTLIST
	fi
fi

#------------------------------------------------------------------------------
# Format the database table column file 
#------------------------------------------------------------------------------
echo "`date` Formatting Object List File for $DBSERVER" >> $LOGFILE
> $OBJECTLIST

cat $FILE | sed 's/, /,/g' |
while read LINE_ELEMENT
do
	#SET OUR ARRAY...
	set -A ARRAY_OBJECTS $LINE_ELEMENT
	
	#find column or densisty - this will help break out what we need out of the file.
	if [[ ${ARRAY_OBJECTS[4]} = column ]]
	then
		#echo ${ARRAY_OBJECTS[5]} | sed 's/\.\./ /g' | sed 's/\.*\./ /g' | sed 's/\./ /g' >> $OBJECTLIST
		echo ${ARRAY_OBJECTS[5]} | sed 's/\.dbo\./ /g' | sed 's/\.\./ /g' | sed 's/\./ /g' >> $OBJECTLIST
	
	elif [[ ${ARRAY_OBJECTS[4]} = density ]]
	then
#		echo ${ARRAY_OBJECTS[7]} | sed 's/={/ /g' | sed 's/}//g' | sed 's/\.\./ /g' >> $OBJECTLIST
		echo ${ARRAY_OBJECTS[7]} | sed 's/\.dbo\./ /g' | sed 's/\.\./ /g' | sed 's/\./ /g' | sed 's/={/ /g' | sed 's/}//g' >> $OBJECTLIST
	fi

done	
#------------------------------------------------------------------------------
# Format the sql file - if database name not reference, use the sp_findobject proc
# to locate which database the object resides. 
#------------------------------------------------------------------------------

#setting this var to something to test later... 
#there may be a bunch of duplicate objects, so let's only check it once.
typeset OBJECT_DUP=BUNK
typeset COUNTER=0
> $SQL_STATS
echo "select getdate()" >> $SQL_STATS
echo "go" >> $SQL_STATS
cat $OBJECTLIST |
while read OBJECT_ELEMENT
do
	#used to show processing...;-)
	let "COUNTER=$COUNTER + 1"

        #SET ANOTHER ARRAY....
       	set -A ARRAY_OBJECTS $OBJECT_ELEMENT
       	#if number of elements in an array = 3, that means a database is in there, if it's 2, then we have to look up what it should be.
      	if [[ ${#ARRAY_OBJECTS[*]} = 2 ]]
	then
		if [[ $OBJECT_DUP != ${ARRAY_OBJECTS[0]} ]]
		then
			echo "EXEC sp_findobject ${ARRAY_OBJECTS[0]}" > $SQLFILE
			echo "go" >> $SQLFILE
#DEBUG
cat $SQLFILE
			getPass $DBSERVER $EXEUSER | $ISQLEXE -U$EXEUSER -S$DBSERVER -b -w200 -i$SQLFILE | grep -v Password > $SQLOUT
#DEBUG
cat $SQLOUT

			typeset OBJECT_DUP=${ARRAY_OBJECTS[0]}
			checkSqlErr $SQLOUT
		fi
		if [[ $? = 0 ]]
		then
			cat $SQLOUT |
			while read DB_ELEMENT
			do

				set -A ARRAY_DB $DB_ELEMENT
				echo "use ${ARRAY_DB[0]}" >> $SQL_STATS
				echo "go" >> $SQL_STATS
				if [[ ${ARRAY_DB[1]} < 9999999 ]]
				then
					echo "update statistics ${ARRAY_OBJECTS[0]}(${ARRAY_OBJECTS[1]})" | sed 's/,/, /g' >> $SQL_STATS
					echo "go" >> $SQL_STATS
				else
					echo "update statistics ${ARRAY_OBJECTS[0]}(${ARRAY_OBJECTS[1]}) with sampling = 25 percent" | sed 's/,/, /g' >> $SQL_STATS
					echo "go" >> $SQL_STATS
				fi
			done	
		fi	
		
	elif [[ ${#ARRAY_OBJECTS[*]} = 3 ]]
	then
                if [[ $OBJECT_DUP != ${ARRAY_OBJECTS[1]} ]]
                then
                        echo "EXEC sp_findobject ${ARRAY_OBJECTS[1]}" > $SQLFILE
                        echo "go" >> $SQLFILE
#DEBUG
cat $SQLFILE
                        getPass $DBSERVER $EXEUSER | $ISQLEXE -U$EXEUSER -S$DBSERVER -b -w200 -i$SQLFILE | grep -v Password > $SQLOUT
#DEBUG
cat $SQLOUT

                        typeset OBJECT_DUP=${ARRAY_OBJECTS[1]}
                        checkSqlErr $SQLOUT
                fi
                if [[ $? = 0 ]]
                then
                        cat $SQLOUT |
                        while read DB_ELEMENT
                        do

                                set -A ARRAY_DB $DB_ELEMENT
                                echo "use ${ARRAY_DB[0]}" >> $SQL_STATS
                                echo "go" >> $SQL_STATS
                                if [[ ${ARRAY_DB[1]} < 9999999 ]]
                                then
                                        echo "update statistics ${ARRAY_OBJECTS[1]}(${ARRAY_OBJECTS[2]})" | sed 's/,/, /g' >> $SQL_STATS
                                        echo "go" >> $SQL_STATS
                                else
                                        echo "update statistics ${ARRAY_OBJECTS[1]}(${ARRAY_OBJECTS[2]}) with sampling = 25 percent" | sed 's/,/, /g' >> $SQ
L_STATS
                                        echo "go" >> $SQL_STATS
                                fi
                        done
                fi

	fi
	echo "select getdate()" >> $SQL_STATS
	echo "go" >> $SQL_STATS

	if [[ $COUNTER == 25 ]]
	then
#		echo "`clear`processing."
		echo "STATS GENERATED:  $COUNTER"
	elif [[ $COUNTER == 50 ]]
	then
#		echo "`clear`processing.."
		echo "STATS GENERATED:  $COUNTER"
	elif [[ $COUNTER == 75 ]]
	then
#		echo "`clear`processing..."
		echo "STATS GENERATED:  $COUNTER"
	elif [[ $COUNTER == 100 ]]
	then
#		echo "`clear`processing...."
		echo "STATS GENERATED:  $COUNTER"
		typeset COUNTER=0
	fi
done

	

#------------------------------------------------------------------------------
# Check for errors
# If any errors found, see if error related to account owning objects (18790)--if so, print informational message
#------------------------------------------------------------------------------
checkSqlErr $SQLOUT
if [ $? -eq 1 ]
then
	export HIGHRC=1
	echo "`date` Object search FAILED for $DBSERVER" | tee -a $LOGFILE
else
	echo "`date` Object search SUCCESSFUL for $DBSERVER" | tee -a $LOGFILE
	echo ""
	echo "THE UPDATE STATS SQL FILE HAS BEEN CREATED: $SQL_STATS" | tee -a $LOGFILE
fi

echo "`date` END Object search" >> $LOGFILE
#------------------------------------------------------------------------------
# exit with final return status
#------------------------------------------------------------------------------
if [ $HIGHRC -eq 1 ]
then
        echo "\nScript FAILED - output in $LOGFILE"
	exit 1
else
	exit 0
fi
