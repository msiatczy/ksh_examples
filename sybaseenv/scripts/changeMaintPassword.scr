#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: changeMaintPassword.scr -RS <REPSERVER> -D <dbname>|all
#
#  Description: Change password for replication maint user on one or more replicated databases 
#		This script changes ASE passwords and RS passwords.
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<REPSERVER> - replication server
#		<dbname> - database name (one or all)
#
#  NOTE:  This file should be rwx for sybase user only.
#
#  Modification History:
#	11/29/06 M. Siatczynski	Original script
#	05/17/07 M. Siatczynski	Update parms for getRepDbs.scr
#	10/01/07 M. Siatczynski	Remove -X from ISQLEXE call (parm included in ISQLEXE definition)
#	07/16/10 M. Siatczynski	Add REPSERVER to CTLFILE names
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#------------------------------------------------------------------------------
# Sample block for input parameters
#------------------------------------------------------------------------------
export USAGE="ERROR - Usage: $0 -RS <REPSERVER> -D <dbname>|all"
export CALLED="$0 $*"

if [ $# -eq 0 ]
then
        echo $USAGE
        exit 1
else
        while [ $# -gt 0 ]
        do
                case $1 in
                        -RS)		export REPSERVER=$2;shift 2;;
                        -D)		export ONEDBNAME=$2;shift 2;;
                        -*)		echo $USAGE;exit 1;;
                        *)		echo $USAGE;exit 1;;
                esac
        done
fi

if [ ! "$REPSERVER" -o ! "$ONEDBNAME" ]
then
        echo $USAGE
        exit 1
fi

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
export REPCTL=$REPSERVER.maintrep.lst
export TMPREPCTL=$REPSERVER.maintrep.lst.tmp
export SCROUT=/tmp/scrout.$$

export SQLOUT=/tmp/sqlout.$$

export RPTFILE=$RPTDIR/useradmin/central/changeMaintPassword.$DATETIME
# save the original stty settings
export STTY_ORIG=`stty -g`

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test -f $SCROUT && \rm -f $SCROUT
	test -f $SQLOUT && \rm -f $SQLOUT

# reinstate the original stty settings
        stty $STTY_ORIG
}

trap 'tempCleanup' EXIT INT TERM

#------------------------------------------------------------------------------
# Format control lists
# Execute getRepDbs.scr to get list of all replicated databases for RS
# Parse out the name of the control files, removing spaces
#------------------------------------------------------------------------------
$SCRDIR/getRepDbs.scr -RS $REPSERVER -genctl $REPCTL > $SCROUT
grep 'WARNING' $SCROUT > /dev/null
if [ $? -eq 0 ]
then
	echo "Replication control list contains NULL entries...exiting"
	exit 1
else
	export CTLFILE=`grep "Control file" $SCROUT | cut -d":" -f2 | sed -e 's/ //g'`
	export TMPCTLFILE=$CTLFILE.tmp
fi


> $TMPCTLFILE
if [ "$ONEDBNAME" = "all" ]
then
	cat $CTLFILE > $TMPCTLFILE
else
	grep " $ONEDBNAME " $CTLFILE > $TMPCTLFILE
fi

if [ ! -s $TMPCTLFILE ]
then
	echo "ERROR - No entries in $TMPCTLFILE...exiting"
	exit 1
fi

#------------------------------------------------------------------------------
# Prompt for new password
#------------------------------------------------------------------------------
export NEWPWD=""
export NEWPW1=""
while [ "$NEWPW1" = "" ]
do
        echo "Enter NEW maint user password:"
        stty -echo
        read NEWPW1
        stty echo
done
export NEWPW2=""
while [ "$NEWPW2" = "" ]
do
        echo "Re-enter NEW maint user password:"
        stty -echo
        read NEWPW2
        stty echo
done
if [ "$NEWPW1" = "$NEWPW2" ]
then
	export NEWPWD=$NEWPW1
else
	echo "ERROR - New passwords entered do not match.  Exiting."
	exit 1
fi

#--------------------------------------------------------------------------
# Write report headers
#--------------------------------------------------------------------------
> $RPTFILE
chmod 600 $RPTFILE
echo $CALLED >> $RPTFILE
echo "`date` Changing password for maint user(s) on the following replicated databases:" >> $RPTFILE
cat $TMPCTLFILE >> $RPTFILE

export RC_RDS_ASE=0
export RC_PDS_ASE=0
export RC_RS=0

#------------------------------------------------------------------------------
# Suspend DSI connections to PDS and RDS
#------------------------------------------------------------------------------
for RDS in `cut -d" " -f3 $TMPCTLFILE | sort | uniq`
do
	echo "\nSuspending DSI to $RDS..." | tee -a $RPTFILE
	$SCRDIR/replication/suspendDsi.scr -L $TMPREPCTL -RS $REPSERVER -S $RDS -fmt -run -noprompt
	if [ $? -ne 0 ]
	then
		echo "ERROR - Suspending DSI to RDS...exiting" | tee -a $RPTFILE
		exit 1
	else
		echo "Suspend DSI SUCCESSFUL" | tee -a $RPTFILE
	fi
done

for PDS in `cut -d" " -f1 $TMPCTLFILE | sort | uniq`
do
	echo "\nSuspending DSI to $PDS..." | tee -a $RPTFILE
	$SCRDIR/replication/suspendDsi.scr -L $TMPREPCTL -RS $REPSERVER -S $PDS -fmt -run -noprompt
	if [ $? -ne 0 ]
	then
		echo "ERROR - Suspending DSI to PDS...exiting" | tee -a $RPTFILE
		exit 1
	else
		echo "Suspend DSI SUCCESSFUL" | tee -a $RPTFILE
	fi
done

#------------------------------------------------------------------------------
# For each database:
# Update the ASE password for the maint user on RDS
# Update the ASE password for the maint user on PDS
# Update the RS password for the RDS connection and the PDS connection
# Check for errors
#------------------------------------------------------------------------------
cut -d" " -f1-3 $TMPCTLFILE |
while read PDS DBNAME RDS
do
	export PDS DBNAME RDS
	export MAINTUSER=${DBNAME}_maint
	echo "\n*** $DBNAME:" | tee -a $RPTFILE

# Change the ASE password on RDS
	echo "$RDS ($MAINTUSER) - Changing ASE password" | tee -a $RPTFILE
	> $SQLOUT
	$ISQLEXE -U$ADMINLOGIN -S$RDS -w200 -P`getPass $RDS $ADMINLOGIN` <<-! | grep -v Password: >> $SQLOUT
	exec sp_remote_password "`getPass $RDS $ADMINLOGIN`","$NEWPWD",$MAINTUSER
	go
	!
	checkSqlErr $SQLOUT
	if [ $? -eq 1 ]
	then
		export RC_RDS_ASE=1
		echo "$RDS ($MAINTUSER) - ASE password change FAILED" | tee -a $RPTFILE
		cat $SQLOUT >> $RPTFILE
		echo "Skipping to next dbname in control list" | tee -a $RPTFILE
		continue
	else
		echo "$RDS ($MAINTUSER) - ASE password change SUCCESSFUL" | tee -a $RPTFILE
		cat $SQLOUT >> $RPTFILE
	fi

# Change the ASE password on PDS
	echo "$PDS ($MAINTUSER) - Changing ASE password" | tee -a $RPTFILE
	> $SQLOUT
	$ISQLEXE -U$ADMINLOGIN -S$PDS -w200 -P`getPass $PDS $ADMINLOGIN` <<-! | grep -v Password: >> $SQLOUT
	exec sp_remote_password "`getPass $PDS $ADMINLOGIN`","$NEWPWD",$MAINTUSER
	go
	!
	checkSqlErr $SQLOUT
	if [ $? -eq 1 ]
	then
		export RC_PDS_ASE=1
		echo "$PDS ($MAINTUSER) - ASE password change FAILED" | tee -a $RPTFILE
		cat $SQLOUT >> $RPTFILE
		echo "Skipping to next dbname in control list" | tee -a $RPTFILE
		continue
	else
		echo "$PDS ($MAINTUSER) - ASE password change SUCCESSFUL" | tee -a $RPTFILE
		cat $SQLOUT >> $RPTFILE
	fi

# Change the RS password for the RDS and PDS connections
	echo "$REPSERVER ($DBNAME) - Altering password for RDS and PDS connections" | tee -a $RPTFILE
	> $SQLOUT
	$ISQLEXE -U$ADMINLOGIN -S$REPSERVER -w200 -P`getPass $REPSERVER $ADMINLOGIN` <<-! | grep -v Password: >> $SQLOUT
	alter connection to $RDS.$DBNAME set password to "$NEWPWD"
	go
	alter connection to $PDS.$DBNAME set password to "$NEWPWD"
	go
	!
	checkSqlErr $SQLOUT
	if [ $? -eq 1 ]
	then
		export RC_RS=1
		echo "$REPSERVER ($DBNAME) - Password change for connection(s) FAILED" | tee -a $RPTFILE
		cat $SQLOUT >> $RPTFILE
		echo "Skipping to next dbname in control list" | tee -a $RPTFILE
		continue
	else
		echo "$REPSERVER ($DBNAME) - Password change for connections SUCCESSFUL" | tee -a $RPTFILE
		cat $SQLOUT >> $RPTFILE
	fi
done

#------------------------------------------------------------------------------
# Resume DSI connections to PDS and RDS
#------------------------------------------------------------------------------
for RDS in `cut -d" " -f3 $TMPCTLFILE | sort | uniq`
do
	echo "\nResuming DSI to $RDS..." | tee -a $RPTFILE
	$SCRDIR/replication/resumeDsi.scr -L $TMPREPCTL -RS $REPSERVER -S $RDS -fmt -run -noprompt
	if [ $? -ne 0 ]
	then
		echo "ERROR - Resuming DSI to RDS...exiting" | tee -a $RPTFILE
		exit 1
	else
		echo "Resume DSI SUCCESSFUL" | tee -a $RPTFILE
	fi
done

for PDS in `cut -d" " -f1 $TMPCTLFILE | sort | uniq`
do
	echo "\nResuming DSI to $PDS..." | tee -a $RPTFILE
	$SCRDIR/replication/resumeDsi.scr -L $TMPREPCTL -RS $REPSERVER -S $PDS -fmt -run -noprompt
	if [ $? -ne 0 ]
	then
		echo "ERROR - Resuming DSI to PDS...exiting" | tee -a $RPTFILE
		exit 1
	else
		echo "Resume DSI SUCCESSFUL" | tee -a $RPTFILE
	fi
done

#------------------------------------------------------------------------------
# Exit with final status
#------------------------------------------------------------------------------
if [ $RC_RDS_ASE -eq 1 -o $RC_PDS_ASE -eq 1 -o $RC_RS -eq 1 ]
then
	echo "\nOVERALL SCRIPT STATUS: FAILED\n"
	echo "Report file:  $RPTFILE"
	exit 1
else
	echo "\nOVERALL SCRIPT STATUS: SUCCESSFUL\n"
	echo "Report file:  $RPTFILE"
	exit 0
fi
