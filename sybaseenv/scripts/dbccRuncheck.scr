#!/bin/ksh 
#--------------------------------------------------------------------------
#        Usage: dbccRuncheck -S <DBSERVER> {-D <dbname>|-L <dblist> -m <maildest> -p <pagedest> -checksoft}
#
#  Description: Run dbcc runcheck against database(s)
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	DBSERVER - database server
#              	DBNAME - database name
#              	DBLIST - list of databases
#              	MAILDEST - override default maildest of dba
#              	PAGEDEST - page destination/flag
#
#  Modification History:
#	07/14/10 K. Sawant   Rewrote earlier script of checkstorage with additional checks from checkverify 
#       08/17/10 K. Sawant   Added customized stored procedure sp_dbccFaultReport
#       03/21/11 M. Siatczynski   Update to accommodate AMG East
#--------------------------------------------------------------------------
if [ -f /sccm/dba/sybase/.dbaSybProfile ]
then
	. /sccm/dba/sybase/.dbaSybProfile
elif [ -f /sybase/.dbaSybProfile ]
then
	. /sybase/.dbaSybProfile
fi

## unset the centrally-set PAGEDEST variable - setting determines whether or not to send page
unset PAGEDEST

#------------------------------------------------------------------------------
# Sample block for input parameters
#------------------------------------------------------------------------------
export USAGE="ERROR - Usage: $0 -S <DBSERVER> {-D <dbname>|-L <dblist> -m <maildest> -p <pagedest> -checksoft}"
export CALLED="$0 $*"

if [ $# -eq 0 ]
then
        echo $USAGE
        exit 1
else
        while [ $# -gt 0 ]
        do
                case $1 in
                        -S)          export DBSERVER=$2;shift 2;;
                        -D)          export DBNAME=$2;shift 2;;
                        -L)          export DBLIST=$2;shift 2;;
                        -m)          export MAILDEST=$2;shift 2;;
                        -p)          export PAGEDEST=$2;shift 2;;
                        -checksoft)  export CHECKSOFT=1;shift 1;;
                        -*)          echo $USAGE;exit 1;;
                        *)           echo $USAGE;exit 1;;
                esac
        done
fi

if [ ! "$DBSERVER" ]
then
    echo $USAGE
    exit 1
fi

if [ "$DBNAME" -a "$DBLIST" ]
then
        echo "$USAGE"
        echo "ERROR - DBNAME and DBLIST are mutually exclusive"
        exit 1
fi

if [ "$DBLIST" -a ! -s "$DBLIST" ]
then
        echo "$USAGE"
        echo "ERROR - DBLIST does not exist or is 0 bytes"
        exit 1
fi

test ! "$CHECKSOFT" && export CHECKSOFT=0

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
export ERRORFLAG=0
export SOFTLIMIT=1000
export XLIST=$CTLDIR/$DBSERVER/$DBSERVER.dbccExclude.lst
export DBCCSQL=/tmp/dbccsql.$$
export SORTDBLIST=/tmp/sortdblist.$$
export TMPDBLIST=/tmp/dblist.$$
export TMPXLIST=/tmp/xlist.$$
export SOFTTEMP=/tmp/soft.$$
export SOFTLIST=/tmp/softlist.$$
export CHECKLIST=/tmp/checklist.$$
export CHECKSQL=/tmp/checksql.$$
export MAILFILE=/tmp/mailfile.$$
export PAGEMSG=/tmp/pagemsg.$$
export PARSERPT=/tmp/parserpt.$$
export TEMPMAIL=/tmp/tempmail.$$

if [ "$DBNAME" ]
then
	export LOGFILE=$LOGDIR/dbcc/$DBSERVER/$DBSERVER.$DBNAME.dbccRunCheck.$DATETIME
else
	export LOGFILE=$LOGDIR/dbcc/$DBSERVER/$DBSERVER.dbccRunCheck.$DATETIME
fi

> $LOGFILE
> $MAILFILE

echo "SCRIPT START: `date`" >> $LOGFILE

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test -f $DBCCSQL && \rm -f $DBCCSQL
	test -f $SORTDBLIST && \rm -f $SORTDBLIST
	test -f $TMPDBLIST && \rm -f $TMPDBLIST
	test -f $TMPXLIST && \rm -f $TMPXLIST
        test -f $SOFTLIST $$ \rm -f $SOFTLIST
        test -f $SOFTTEMP $$ \rm -f $SOFTTEMP
        test -f $CHECKLIST $$ \rm -f $CHECKLIST
        test -f $CHECKSQL $$ \rm -f $CHECKSQL
	test -f $MAILFILE && \rm -f $MAILFILE
	test -f $PAGEMSG && \rm -f $PAGEMSG
	test -f $TEMPMAIL && \rm -f $TEMPMAIL
	test -f $PARSERPT && \rm -f $PARSERPT
}

trap 'tempCleanup' EXIT INT TERM

#--------------------------------------------------------------------------
#  Determine what databases to run dbcc runcheck on:
#	- single database (-D option)
#	- list of databases (-L option)
#	- all databases (no option) 
#		Exclude list is only used when running against all databases.
#  NOTE:  sed removes the spaces from the isql output, otherwise the files can't 
#  be accurately compared to the exclusion list
#--------------------------------------------------------------------------
> $SORTDBLIST
if [ "$DBNAME" ]
then
	echo $DBNAME > $TMPDBLIST
elif [ "$DBLIST" ]
then
	sort $DBLIST > $TMPDBLIST
else
	getDbList -S $DBSERVER -user -system -xreadonly | sort > $SORTDBLIST

#--------------------------------------------------------------------------
#  Exclude database in the exclusion list
#--------------------------------------------------------------------------
	if [ -s $XLIST ]
	then
		sort $XLIST > $TMPXLIST
		comm -23 $SORTDBLIST $TMPXLIST > $TMPDBLIST

		echo "The following databases are excluded from runcheck:\n" >> $LOGFILE
		cat $TMPXLIST >> $LOGFILE
		echo "" >> $LOGFILE
	else
		cat $SORTDBLIST > $TMPDBLIST
	fi
fi

#--------------------------------------------------------------------------
#  Get a list of database with more than x soft faults
#  NOTE:  sed removes the spaces from the isql output, otherwise the files can't
#  be accurately compared to the exclusion list
#  The 'order by' must be included so that list can be compared to other lists.
#--------------------------------------------------------------------------
if [ $CHECKSOFT = 1 ]
then
	$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -b -w200 <<-! | grep -v Password | sed -e 's/^ //g' | sort > $SOFTTEMP
	`getPass $DBSERVER $ADMINLOGIN`
	set nocount on
	go
	select dbname=db_name(l.dbid),l.start,l.finish,r.intvalue
	from dbccdb..dbcc_operation_log l, dbccdb..dbcc_operation_results r
	where l.optype = 2
	and l.opid = (select max(opid) from dbccdb..dbcc_operation_log)
	and l.dbid = r.dbid
	and l.opid = r.opid
	and l.optype = r.optype
	and r.type_code = 1001
	and r.intvalue > $SOFTLIMIT
	order by db_name(l.dbid)
	go
	!
fi

#--------------------------------------------------------------------------
# Write the database list to the output file
#--------------------------------------------------------------------------
if [ -s $SOFTTEMP ]
then
# probably more efficient way to do this echo, but this works for now
        echo "THE FOLLOWING DATABASES HAVE MORE THAN $SOFTLIMIT SOFT FAULTS AND WILL NOT BE CHECKED BY CHECKVERIFY:" >> $LOGFILE
        echo "THE FOLLOWING DATABASES HAVE MORE THAN $SOFTLIMIT SOFT FAULTS AND WILL NOT BE CHECKED BY CHECKVERIFY:" >> $MAILFILE
        echo "Format:  dbname - start time - end time - soft faults\n" >> $LOGFILE
        echo "Format:  dbname - start time - end time - soft faults\n" >> $MAILFILE
        cat $SOFTTEMP >> $LOGFILE
        cat $SOFTTEMP >> $MAILFILE
        echo "" >> $LOGFILE
        echo "" >> $MAILFILE

# strip off database names
        cut -d" " -f1 $SOFTTEMP > $SOFTLIST
fi

#---------------------------------------------------------------------------
# Exclude databases in the soft list
# If the soft list contains one of the databases to be checked, then set the error flag
#---------------------------------------------------------------------------
if [ -s $SOFTLIST ]
then
        comm -23 $TMPDBLIST $SOFTLIST > $CHECKLIST
        egrep -f $SOFTLIST $TMPDBLIST > /dev/null
        export GREPRC=$?
        test $GREPRC -eq 0 && export ERRORFLAG=1
else
        cat $TMPDBLIST > $CHECKLIST
fi

#--------------------------------------------------------------------------
#  Execute runcheck for each database
#--------------------------------------------------------------------------
for DBNAME in `cat $CHECKLIST`
do
	> $DBCCSQL
	echo "use $DBNAME" >> $DBCCSQL
	echo "go" >> $DBCCSQL
	echo "sp_dbcc_runcheck $DBNAME, sp_dbccFaultReport" >> $DBCCSQL
	echo "go" >> $DBCCSQL

	$SCRDIR/sqlTimer.scr -S $DBSERVER -i $DBCCSQL -o $LOGFILE -m $MAILFILE
	if [ $? -ne 0 ]
	then
		export ERRORFLAG=1
	fi
done

echo "SCRIPT END: `date`" >> $LOGFILE

checkSqlErr $LOGFILE
if [ $? -ne 0 ]
then
        export ALLFAULTS=0
        export NFC=0
        export ALLFAULTS=`grep -c 'Msg ' $LOGFILE`
        export NFC=`grep -c 'Msg 18491' $LOGFILE`
# if total errors equals number of 18491 errors, then report is clean, clear out the CHECKSQL file
        if [ $ALLFAULTS -eq $NFC ]
        then
                > $CHECKSQL
        else
                cat $LOGFILE > $CHECKSQL
                export STATUS=FAILED
        fi
else
        cat $LOGFILE > $CHECKSQL
fi

#-------------------------------------------------------------------------
# Add uniq before sending MAILFILE to minimise duplicate messages
#-------------------------------------------------------------------------
if [ -s $CHECKSQL ]
then
	echo "\nReport will be emailed." >> $LOGFILE
	echo "Report Date:  `date`\n" >> $MAILFILE
	cat $CHECKSQL >> $MAILFILE
	export MAILSUBJECT="$DBSERVER DBCC FAULT REPORT $STATUS"
	sendMail
else
	echo "\nNo report will be emailed." >> $LOGFILE
fi
