#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: killSpid.scr -S <DBSERVER> -U <user> -spid <spid> {-noprompt}
#
#  Description: Kill a specific spid on a DBSERVER
#		Written primarily to allow operations to kill user connections
#		NOTE:  This script can not kill sa connections.
#
#     Location:	/sccm/dba/sybase/scripts/killSpid.scr
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<DBSERVER> - Database server name
#		<spid> - spid of the process to be killed
#
#  Modification History:
#	08/16/04 M. Siatczynski	Initial Script
#	02/13/06 M. Siatczynski	Implement ISQLEXE, getPass, ADMINLOGIN
#	12/22/06 M. Siatczynski	Change LOGNAME to USER
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#------------------------------------------------------------------------------
# Input parameters
#------------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -S <DBSERVER> -U <user> -spid <spid> {-noprompt}"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 1
else
	while [ $# -gt 0 ]
	do
	        case $1 in
	                -S)	export DBSERVER=$2;shift 2;;
	                -U)	export LOGIN=$2;shift 2;;
	                -spid)	export SPID=$2;shift 2;;
	                -noprompt)	export PROMPT=0;shift 1;;
	                -*)	echo $USAGE;exit 1;;
	                *)	echo $USAGE;exit 1;;
	        esac
	done
fi

if [ ! "$DBSERVER" -o ! "$LOGIN" -o ! "$SPID" ]
then
	echo $USAGE
	exit 1
fi

test ! "$PROMPT" && export PROMPT=1

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
export LOGFILE=$LOGDIR/misc/$DBSERVER/$DBSERVER.killSpid.$DATETIME
export KILLSQL=/tmp/kill.sql.$$
export SQLOUT=/tmp/sqlout.$$

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test $KILLSQL && \rm -f $KILLSQL
	test $SQLOUT && \rm -f $SQLOUT
}

trap 'tempCleanup' EXIT INT TERM

#------------------------------------------------------------------------------
# write log header
#------------------------------------------------------------------------------
> $LOGFILE
date >> $LOGFILE
echo "$0 executed by user $USER on `hostname`" >> $LOGFILE

#------------------------------------------------------------------------------
# Get details of spid to be killed
#------------------------------------------------------------------------------
> $SQLOUT
$ISQLEXE -U$LOGIN -S$DBSERVER -w200 <<-! | egrep -v '(Password|return status)' >> $SQLOUT
`getPass $DBSERVER $LOGIN`
set nocount on
go
if exists (select * from master..sysprocesses where spid = $SPID)
exec sp_uwho_spid $SPID
else
print "spid $SPID does not exist on $DBSERVER"
go
select "BEFOREINFO="+convert(varchar,spid)+"|"+convert(varchar,suid)+"|"+convert(char,loggedindatetime,9)
from sysprocesses where spid = $SPID
go
!

#------------------------------------------------------------------------------
# Check for sql errors
# If no errors, format the BEFORE string
#------------------------------------------------------------------------------
checkSqlErr $SQLOUT
if [ $? -ne 0 ]
then
        echo "ERROR - getting spid info on $DBSERVER" | tee -a $LOGFILE
	cat $SQLOUT >> $LOGFILE
        echo "See $LOGFILE for details"
	echo "\n`date` Script exiting" | tee -a $LOGFILE
        exit 1
else
	grep "spid $SPID does not exist on $DBSERVER" $SQLOUT > /dev/null
	if [ $? -eq 0 ]
	then
	        echo "\nspid $SPID does not exist on $DBSERVER\n" | tee -a $LOGFILE
		echo "\n`date` Script complete" >> $LOGFILE
		exit 0
	fi
# print the spid info to the console (filter out the BEFOREINFO line)
	echo "\nYou are about to KILL the following spid ($SPID) on $DBSERVER:\n" | tee -a $LOGFILE
	grep -v BEFOREINFO $SQLOUT | tee -a $LOGFILE

# set variables used for comparison
	export BEFOREINFO=`grep BEFOREINFO $SQLOUT | cut -d"=" -f2`
	export BEFORESPID=`echo $BEFOREINFO | nawk -F"|" '{print $1}'`
	export BEFORESUID=`echo $BEFOREINFO | nawk -F"|" '{print $2}'`
	export BEFOREDT=`echo $BEFOREINFO | nawk -F"|" '{print $3}'`
fi

#------------------------------------------------------------------------------
# If this is an sa connection, it can not be killed via this script
# suid=1=sa
# A DBA must be contacted to kill sa connections
#------------------------------------------------------------------------------
if [ $BEFORESUID -eq 1 ]
then
	echo "\nERROR - sa connections can not be killed via this script" | tee -a $LOGFILE
	echo "Please contact the Sybase/SQL Server DBA oncall for assistance" | tee -a $LOGFILE
	echo "\n`date` Script exiting" | tee -a $LOGFILE
	exit 1
fi

#------------------------------------------------------------------------------
# Prompt for confirmation
#------------------------------------------------------------------------------
if [ $PROMPT -eq 1 ]
then
	CONTINUE=""
	while [ "$CONTINUE" != "Y" -a "$CONTINUE" != "y" -a "$CONTINUE" != "N" -a "$CONTINUE" != "n" ]
	do
		echo "DO YOU WISH TO CONTINUE? {y/n}"
		read CONTINUE
		echo "CONTINUE=$CONTINUE" >> $LOGFILE
	done
	if [ "$CONTINUE" = "n" -o "$CONTINUE" = "N" ]
	then
		echo "\n`date` Script exiting - no action taken on $DBSERVER\n" | tee -a $LOGFILE
		exit 0
	fi
fi

#------------------------------------------------------------------------------
# Kill the spid that matches the BEFORE string
#------------------------------------------------------------------------------
#echo "\nKilling spid $SPID..."
> $SQLOUT
$ISQLEXE -U$LOGIN -S$DBSERVER -w200 <<-! | egrep -v '(Password|return status)' >> $SQLOUT
`getPass $DBSERVER $LOGIN`
set nocount on
go
if exists (select * from master..sysprocesses where
spid = $BEFORESPID and
suid = $BEFORESUID and
loggedindatetime = "$BEFOREDT")
kill $SPID
else
begin
print ""
print "spid $SPID no longer exists on $DBSERVER"
print ""
end
go
waitfor delay "00:00:03"
go
if exists (select * from master..sysprocesses where
spid = $BEFORESPID and
suid = $BEFORESUID and
loggedindatetime = "$BEFOREDT")
begin
print ""
print "Kill issued but spid $SPID still exists -- check Command column -- ROLLBACK may be in progress"
print ""
exec sp_uwho_spid $SPID
end
go
!

#------------------------------------------------------------------------------
# Check for sql errors and exit
#------------------------------------------------------------------------------
cat $SQLOUT | tee -a $LOGFILE
checkSqlErr $SQLOUT
if [ $? -ne 0 ]
then
        echo "\nERROR - killing spid $SPID on $DBSERVER" | tee -a $LOGFILE
        echo "See $LOGFILE for details"
	echo "\n`date` Script exiting" | tee -a $LOGFILE
        exit 1
else
	grep "spid $SPID no longer exists on $DBSERVER" $SQLOUT > /dev/null
	if [ $? -eq 0 ]
	then
#	        echo "\nspid $SPID no longer exists on $DBSERVER\n" | tee -a $LOGFILE
		echo "\n`date` Script complete" >> $LOGFILE
		exit 0
	else
	        echo "\nSUCCESSFULLY issued kill command for spid $SPID and spid no longer exists" | tee -a $LOGFILE
		echo "\n`date` Script complete" >> $LOGFILE
		exit 0
	fi
fi
