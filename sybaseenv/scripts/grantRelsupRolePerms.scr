#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: grantRelsupRolePerms.scr -S <DBSERVER>|all -D <dbname>|all {-m <maildest>}
#
#  Description: Grant permissions to TIGMF_ALL_RELSUP role
#		grant insert,update,delete,select on all user tables and views
#
#  NOTE:  Certain servers are excluded--see exclude list below.
#
#     Location:	/sccm/dba/sybase/scripts/grantRelsupRolePerms.scr
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	-S DBSERVER
#              	-D DBNAME
#              	-all process all dbservers 
#              	-m maildest override
#
#  Modification History:
#	09/19/06 M. Siatczynski	Initial Script (copy of grantMaintGroupPerms.scr)
#	04/26/06 M. Siatczynski	Exclude sybsec_arch_<DBSERVER> databases from grants
#	09/21/07 K. Hess	Exclude sybsyntax databases from grants
#	10/18/07 M. Siatczynski	If TIGMF_ALL_RELSUP roles does not exist on the server, then no grants need to be done
#	05/29/09 M. Siatczynski	Updated to call getDbList function
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -S <DBSERVER>|all -D <dbname>|all {-m <maildest>}"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 1
else
	while [ $# -gt 0 ]
	do
	        case $1 in
	                -S)	export ONEDBSERVER=$2;shift 2;;
	                -D)	export ONEDBNAME=$2;shift 2;;
	                -m)	export MAILDEST=$2;shift 2;;
	                -*)	echo $USAGE;exit 1;;
	                *)	echo $USAGE;exit 1;;
	        esac
	done
fi

#--------------------------------------------------------------------------
#  Validate parms
#--------------------------------------------------------------------------
if [ ! "$ONEDBSERVER" -a ! "$ONEDBNAME" ]
then
	echo $USAGE
	echo "DBSERVER and DBNAME parms  must be passed"
	exit 1
fi

#--------------------------------------------------------------------------
#  Use this to describe major sections of code
#--------------------------------------------------------------------------
export DBSERVERLIST=/tmp/serverlist.$$
export EXCLUDEDBSERVERS=/tmp/excludelist.$$
export DBLIST=/tmp/dbnamelist.$$
export SQL1=/tmp/perm.sql1.$$
export SQL2=/tmp/perm.sql2.$$
export SQL3=/tmp/perm.sql3.$$
export SQLOUT=/tmp/sqlout.$$
export MAILFILE=/tmp/mailfile.$$
export LOGFILE=$LOGDIR/useradmin/central/grantRelsupRolePerms.$DATETIME

export HIGHRC=0

# format list of servers to exclude
> $EXCLUDEDBSERVERS
echo "DOGWOOD" >> $EXCLUDEDBSERVERS
echo "DBA_RS_ASE" >> $EXCLUDEDBSERVERS
echo "SAM_RS_ASE" >> $EXCLUDEDBSERVERS

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test $SQL1 && \rm -f $SQL1
	test $SQL2 && \rm -f $SQL2
	test $SQL3 && \rm -f $SQL3
	test $SQLOUT && \rm -f $SQLOUT
	test $DBLIST && \rm -f $DBLIST
	test $DBSERVERLIST && \rm -f $DBSERVERLIST
	test $EXCLUDEDBSERVERS && \rm -f $EXCLUDEDBSERVERS
	test $MAILFILE && \rm -f $MAILFILE
}

trap 'tempCleanup' EXIT INT TERM

#--------------------------------------------------------------------------
# Initialize list of dbservers
# exclude DOGWOOD
#--------------------------------------------------------------------------
if [ "$ONEDBSERVER" = "all" ]
then
	getAseList | egrep -vf $EXCLUDEDBSERVERS > $DBSERVERLIST
else
	echo "$ONEDBSERVER" > $DBSERVERLIST
fi

#--------------------------------------------------------------------------
# Write headers
#--------------------------------------------------------------------------
> $LOGFILE
echo "`date` Granting perms to TIGMF_ALL_RELSUP role for the following list of DBSERVERS:" >> $LOGFILE
cat $DBSERVERLIST >> $LOGFILE

#--------------------------------------------------------------------------
# Process each DBSERVER separately
# First check to see if the TIGMF_ALL_RELSUP role exists on the ASE...if it doesn't, then skip to next ASE
# 	(Do not set HIGHRC if role does not exist...just print message)
# If a single dbname is passed, put it in the list, otherwise generate a 
# list of all DBs on the server
# Ignore read only databases (status=1024) and offline databases (status2=16)
#--------------------------------------------------------------------------
cat $DBSERVERLIST |
while read DBSERVER
do
	export RELSUPROLE=0
	export RELSUPROLE=`$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -b <<-! | grep -v Password | sed -e 's/  *//g'
	\`getPass $DBSERVER $ADMINLOGIN\`
	set nocount on
	go
	if exists (select name from master..syssrvroles where name = 'TIGMF_ALL_RELSUP')
		print "1"
	else
		print "0"
	go
	!
	`
# check the setting - it must be 0 or 1...if it's not, the query probably wasn't successful
	if [ "$RELSUPROLE" != "0" -a "$RELSUPROLE" != "1" ]
	then
	        echo "RELSUPROLE variable not properly set (not 0 or 1) - defaulting to 1" >> $LOGFILE
	        echo "RELSUPROLE=$RELSUPROLE" >> $LOGFILE
	        export RELSUPROLE=1
	fi
	if [ $RELSUPROLE -eq 0 ]
	then
		echo "`date` $DBSERVER - TIGMF_ALL_RELSUP does not exist, skipping to next DBSERVER" >> $LOGFILE
		continue
	fi

# get list of databases
	if [ "$ONEDBNAME" = "all" ]
	then
		getDbList -S $DBSERVER -user -xreadonly > $DBLIST
		if [ $? -eq 1 ]
		then
			export HIGHRC=1
			echo "ERROR - getting list of databases for $DBSERVER" >> $LOGFILE
			echo "Skipping TIGMF_ALL_RELSUP grants for $DBSERVER" >> $LOGFILE
			cat $DBLIST >> $LOGFILE
			continue
		fi
	else
		echo $ONEDBNAME > $DBLIST
	fi

#--------------------------------------------------------------------------
# Format the sql statements to generate the grant perm sql statements
# action 193 = select
# action 195 = insert
# action 196 = delete
# action 197 = update
# the group by and having is needed to check if ALL perms exist
# Do not grant perms on replication related objects (repmon and rs_ objects)
#--------------------------------------------------------------------------
	> $SQL1
	cat $DBLIST |
	while read DBNAME
	do
		export DBNAME
		echo "use $DBNAME" >> $SQL1
		echo "go" >> $SQL1
		echo "set nocount on" >> $SQL1
		echo "go" >> $SQL1
		echo "if exists (select * from $DBNAME..sysobjects where type in ('U','V') and name != 'repmon' and name not like 'rs[_]%' and id not in (select id from $DBNAME..sysprotects where (uid=user_id(\"TIGMF_ALL_RELSUP\")) and action in (193,195,196,197) group by id having count(*) = 4))" >> $SQL1
		echo "begin" >> $SQL1
		echo "select \"use $DBNAME\"" >> $SQL1
		echo "select \"go\"" >> $SQL1
                echo "select \"grant insert,update,delete,select on \",user_name(uid)+\".\"+name,\" to TIGMF_ALL_RELSUP\",convert(char(1),0xa)+\"go\"" >> $SQL1
                echo "from $DBNAME..sysobjects" >> $SQL1
                echo "where type in ('U','V')" >> $SQL1
                echo "and name != 'repmon' and name not like 'rs[_]%'" >> $SQL1
                echo "and id not in (select id from $DBNAME..sysprotects where (uid=user_id(\"TIGMF_ALL_RELSUP\")) and action in (193,195,196,197) group by id having count(*) = 4)" >> $SQL1
                echo "order by name" >> $SQL1
		echo "end" >> $SQL1
		echo "go" >> $SQL1
	done

#--------------------------------------------------------------------------
# Execute the sql statements that will generate the grant perm statements
#--------------------------------------------------------------------------
	echo "`date` $DBSERVER - Checking existing perms..." >> $LOGFILE
	> $SQL2
	getPass $DBSERVER $ADMINLOGIN | $ISQLEXE -U$ADMINLOGIN -S$DBSERVER -b -w200 -i$SQL1 | grep -v Password | sed 's/^ //g' >> $SQL2
	checkSqlErr $SQL2
	if [ $? -eq 1 ]
	then
		export HIGHRC=1
		echo "ERROR - querying $DBSERVER" >> $LOGFILE
		echo "Skipping TIGMF_ALL_RELSUP grants for $DBSERVER" >> $LOGFILE
		cat $SQL2 >> $LOGFILE
		continue
	fi

# if there are any perms that need to be granted...
	if [ -s $SQL2 ]
	then
		> $SQL3
		echo "set replication off" >> $SQL3
		echo "go" >> $SQL3
		cat $SQL2 >> $SQL3
	else
		echo "`date` $DBSERVER - No perms need to be granted" >> $LOGFILE
		continue
	fi

#--------------------------------------------------------------------------
# Pipe in the sql to grant the perms
# If errors, send email
#--------------------------------------------------------------------------
	echo "`date` $DBSERVER - Granting perms..." >> $LOGFILE
	> $SQLOUT
	getPass $DBSERVER $ADMINLOGIN | $ISQLEXE -U$ADMINLOGIN -S$DBSERVER -w200 -e -i$SQL3 | grep -v Password >> $SQLOUT

	cat $SQLOUT >> $LOGFILE

	checkSqlErr $SQLOUT
	if [ $? -eq 1 ]
	then
		export HIGHRC=1
		echo "ERROR - Granting TIGMF_ALL_RELSUP perms on $DBSERVER" >> $LOGFILE
		echo "$DBSERVER - Perm grants failed for TIGMF_ALL_RELSUP" >> $MAILFILE
		continue
	fi
done

#--------------------------------------------------------------------------
# Write trailer
# send email
# Exit
#--------------------------------------------------------------------------
echo "`date` Script complete" >> $LOGFILE

if [ $HIGHRC -eq 1 ]
then
	echo "See $LOGFILE for error details" >> $MAILFILE
	export MAILSUBJECT="$DBSERVER: ERRORS granting TIGMF_ALL_RELSUP role perms"
	sendMail
fi

exit $HIGHRC
