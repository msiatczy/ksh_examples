#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: lockLogins.scr -S <DBSERVER> {-L <login|login list> -xlist <exclude path/file> -xnorad -xdba -noprompt -perm -quiet}
#
#  Description: Lock logins on a dbserver
#
#     Location:	/sccm/dba/sybase/scripts/lockLogins.scr
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<DBSERVER> - Database server name
#		<xlist> - exclude list
#		<xnorad> - exclude norad login
#		<noprompt> - do not prompt for confirmation
#
#  Modification History:
#	07/11/02 M. Siatczynski	Initial Script
#	02/25/03 M. Siatczynski	Changed LOGFILE name, added date trailer
#	05/16/03 M. Siatczynski	Added error checking for LOGFILE
#	02/18/04 M. Siatczynski	Centralized - converted to lock only script (unlock now separate script)
#	07/06/04 M. Siatczynski	Add parm for exclusion of panacya login
#	07/12/05 M. Siatczynski	Add parm to lock specific list of logins
#	07/18/05 M. Siatczynski	Direct log file to useradmin dir rather than misc dir
#	12/05/05 M. Siatczynski	Exclude sybadmin from being locked - used for admin tasks
#	02/13/06 M. Siatczynski	Implement ISQLEXE, getPass, ADMINLOGIN
#	12/04/06 M. Siatczynski	Modify so -L can be list or single login
#	12/06/06 M. Siatczynski Add -perm parm to record locked logins in dba database, add HIGHRC, change SQLFILE to SQLFILE
#	05/23/07 M. Siatczynski Removed code for panacya -- login no longer exists
#				Change hardcoded sybadmin to ADMINLOGIN
#	10/14/08 M. Siatczynski Add -xdba parm to avoid locking dba logins
#	10/21/08 M. Siatczynski Do not exit with error for empty list
#	04/17/09 M. Siatczynski Add -quiet option so status messages are logged but don't show on console
#	07/29/09 J. Aspenleiter Changed xpatrol to xnorad.
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#------------------------------------------------------------------------------
# Input parameters
#------------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -S <DBSERVER> {-L <login|login list> -xlist <exclude path/file> -xnorad -xdba -noprompt -perm -quiet}"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 1
else
	while [ $# -gt 0 ]
	do
	        case $1 in
	                -S)		export DBSERVER=$2;shift 2;;
	                -L)		export LOGINSPEC=$2;shift 2;;
	                -xlist)		export XLIST=$2;shift 2;;
	                -xnorad)	export XNORAD=1;shift 1;;
	                -xdba)		export XDBA=1;shift 1;;
	                -noprompt)	export PROMPT=0;shift 1;;
	                -perm)		export PERM=1;shift 1;;
	                -quiet)		export QUIET=1;shift 1;;
	                -*)		echo $USAGE;exit 1;;
	                *)		echo $USAGE;exit 1;;
	        esac
	done
fi

if [ ! "$DBSERVER" ]
then
	echo $USAGE
	exit 1
fi

test ! "$XNORAD" && export XNORAD=0
test ! "$XDBA" && export XDBA=0
test ! "$PROMPT" && export PROMPT=1
test ! "$PERM" && export PERM=0
test ! "$QUIET" && export QUIET=0

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
export LOGFILE=$LOGDIR/useradmin/$DBSERVER/$DBSERVER.lockLogins.$DATETIME
export XDBALIST=$CTLDIR/dbaExcludeLock.lst
export SQLFILE=/tmp/sqlfile.$$
export SQLOUT=/tmp/sqlout.$$
export TEMPLIST=/tmp/templist.$$
export LOGINLIST=/tmp/loginlist.$$
export XLISTSORT=/tmp/xlistsort.$$
export NUMTOLOCK=0
export HIGHRC=0

# if running in quiet mode, then use OUTDEST to send WARNING messages to log rather than console
# NOTE:  eval MUST be used when specifying OUTDEST
test $QUIET -eq 1 && export OUTDEST=" >> $LOGFILE" || export OUTDEST="| tee -a $LOGFILE"

#--------------------------------------------------------------------------
#  If the exclusion list was passed, and it exists, sort it
#  If not passed, create an empty sorted exclude list for later generic code
#  If XNORAD=1, include norad in the exclude list
#--------------------------------------------------------------------------
> $XLISTSORT

test $XNORAD -eq 1 && echo 'norad' >> $XLISTSORT
test $XDBA -eq 1 && cat $XDBALIST >> $XLISTSORT

if [ "$XLIST" ]
then
	if [ -f "$XLIST" ]
	then
		sort -u $XLIST $XLISTSORT -o $XLISTSORT
	else
		echo "ERROR - $XLIST does not exist"
		exit 1
	fi
else
	sort -u $XLISTSORT -o $XLISTSORT
fi

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test $SQLFILE && \rm -f $SQLFILE
	test $TEMPLIST && \rm -f $TEMPLIST
	test $SQLOUT && \rm -f $SQLOUT
	test $LOGINLIST && \rm -f $LOGINLIST
	test $XLISTSORT && \rm -f $XLISTSORT
}

trap 'tempCleanup' EXIT INT TERM

#------------------------------------------------------------------------------
# write logfile headers
#------------------------------------------------------------------------------
> $LOGFILE
echo "$0 $*" >> $LOGFILE
echo "`date` Locking logins on $DBSERVER" >> $LOGFILE

#------------------------------------------------------------------------------
# If LOGINSPEC is passed, validate and format list of logins
# If LOGINSPEC is NOT passed, get list of logins from DBSERVER
# EXCLUDE the following logins:
# 1.  sa and ADMINLOGIN
# 2.  logins which are already locked (status = 2)
# 3.  logins in $XLISTSORT (generated above)
# check for errors
#------------------------------------------------------------------------------
if [ "$LOGINSPEC" ]
then
# make sure control file exists and has entries
	if [ -f $LOGINSPEC ]
	then
	        if [ -s $LOGINSPEC ]
	        then
	                cat $LOGINSPEC > $TEMPLIST
	        else
	                eval echo "WARNING - $LOGINSPEC is 0 bytes" $OUTDEST
	        fi
	else
# make sure the loginspec doesn't contain slashes--otherwise it may be an invalid file reference
	        echo $LOGINSPEC | grep '/' > /dev/null
	        if [ $? -eq 0 ]
	        then
	                echo "ERROR - $LOGINSPEC is not valid--possible invalid filename?"
	                exit 1
	        else
	                echo $LOGINSPEC > $TEMPLIST
	        fi
	fi
else
# get the login list from the DBSERVER
	> $SQLOUT
	$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -w200 -b <<-! | grep -v Password > $SQLOUT
	`getPass $DBSERVER $ADMINLOGIN`
	set nocount on
	go
	select name from master..syslogins where name not in ("sa","$ADMINLOGIN") and status & 2 <> 2
	go
	!

	checkSqlErr $SQLOUT
	if [ $? -eq 1 ]
	then
	        echo "ERROR - getting list of logins for $DBSERVER" | tee -a $LOGFILE
		cat $SQLOUT >> $LOGFILE
	        exit 1
	else
		cat $SQLOUT > $TEMPLIST
	fi
fi

# if there are logins to be locked, remove exclusions and count how many will be locked
if [ -s $TEMPLIST ]
then
	sed -e 's/  *//g' $TEMPLIST | sort | comm -23 - $XLISTSORT > $LOGINLIST
	export NUMTOLOCK=`wc -l < $LOGINLIST`
else
	eval echo "There are no logins to be locked on $DBSERVER" $OUTDEST
	exit 0
fi

#------------------------------------------------------------------------------
# Prompt for confirmation
#------------------------------------------------------------------------------
if [ $PROMPT -eq 1 ]
then
        echo "\nYou are about to lock $NUMTOLOCK logins on $DBSERVER\n"
        CONTINUE=""
        while [ "$CONTINUE" != "Y" -a "$CONTINUE" != "y" -a "$CONTINUE" != "N" -a "$CONTINUE" != "n" ]
        do
                echo "DO YOU WISH TO CONTINUE? {y/n}"
                read CONTINUE
        done

        if [ "$CONTINUE" = "n" -o "$CONTINUE" = "N" ]
        then
                echo "\n`date` Script exiting - no action taken on $DBSERVER.\n" | tee -a $LOGFILE
                exit 0
        fi
fi

#------------------------------------------------------------------------------
# Format the sql statements
# If -perm is passed, record the logins in the dba..locked_logins table
#  (only check PERM once, not for each login)
#------------------------------------------------------------------------------
> $SQLFILE
echo "use master" >> $SQLFILE
echo "go" >> $SQLFILE

cat $LOGINLIST |
while read LOGIN
do
	export LOGIN
	echo "exec sp_locklogin $LOGIN,\"lock\"" >> $SQLFILE
	echo "go" >> $SQLFILE
done

if [ $PERM -eq 1 ]
then
	cat $LOGINLIST |
	while read LOGIN
	do
		export LOGIN
		echo "if exists (select name from master..syslogins where name = \"$LOGIN\" and status&2=2)" >> $SQLFILE
		echo "and not exists (select name from dba..locked_logins where name = \"$LOGIN\")" >> $SQLFILE
		echo "insert dba..locked_logins (name) values (\"$LOGIN\")" >> $SQLFILE
		echo "go" >> $SQLFILE
	done
fi

# summarize lock status for all logins
echo "set nocount on" >> $SQLFILE
echo "select 'num accounts locked',count(*)" >> $SQLFILE
echo "from master..syslogins" >> $SQLFILE
echo "where status & 2 = 2" >> $SQLFILE
echo "select 'num accounts unlocked',count(*)" >> $SQLFILE
echo "from master..syslogins" >> $SQLFILE
echo "where status & 2 <> 2" >> $SQLFILE
echo "go" >> $SQLFILE

#------------------------------------------------------------------------------
# Execute the lock SQL
# check for errors
#------------------------------------------------------------------------------
> $SQLOUT
getPass $DBSERVER $ADMINLOGIN | $ISQLEXE -U$ADMINLOGIN -S$DBSERVER -w200 -e -i $SQLFILE | grep -v Password > $SQLOUT

checkSqlErr $SQLOUT
if [ $? -eq 1 ]
then
        echo "ERROR - locking logins on $DBSERVER" | tee -a $LOGFILE
        echo "Details in $LOGFILE"
	cat $SQLOUT >> $LOGFILE
        export HIGHRC=1
else
	cat $SQLOUT >> $LOGFILE
fi

#------------------------------------------------------------------------------
# exit
#------------------------------------------------------------------------------
echo "`date` Lock complete" >> $LOGFILE
test $HIGHRC -eq 0 && exit 0 || exit 1
