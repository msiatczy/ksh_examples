#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: sqlbtAdminPassword.scr -all | -S <DBSERVER>
#
#  Description: Run dtscheck for one or all ASEs on a host
#		This script is used following changeAdminPassword.scr to
#		update the sa password in the sqlbt control files.
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<parm1> - short description of parm if not obvious
#              	<parm2> - short description of parm if not obvious
#
#  Modification History:
#	10/07/05 M. Siatczynski New script
#	02/13/06 M. Siatczynski Change CTLDIR to SQLBTCTLDIR
#	04/13/06 M. Siatczynski Utilize sqlbtStdCtlDir.lst to update passwords for all applicable ctldirs
#	06/01/06 M. Siatczynski Disable number of failed login attempts prior to running dtscheck--otherwise, account gets locked out of ASE
#	02/12/07 M. Siatczynski Append hostname to list of service names
#	04/11/07 M. Siatczynski Reformat list of service names so exact matches are found
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#------------------------------------------------------------------------------
# Input parameters
#------------------------------------------------------------------------------
export USAGE="ERROR - Usage: $0 -all | -S <DBSERVER>"
export CALLED="$0 $*"

if [ $# -eq 0 ]
then
        echo $USAGE
        exit 1
else
        while [ $# -gt 0 ]
        do
                case $1 in
                        -all)   export ALL=1;shift 1;;
                        -S)     export ONEDBSERVER=$2;shift 2;;
                        -*)     echo $USAGE;exit 1;;
                        *)      echo $USAGE;exit 1;;
                esac
        done
fi

test ! "$ALL" && export ALL=0

# can't pass both -all and -S
if [ "$ONEDBSERVER" -a $ALL -eq 1 ]
then
        echo $USAGE
        echo "ERROR - -all and single dbserver are mutually exclusive"
        exit 1
fi

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
export SERVICENAMES=/tmp/servicenames.$$
export ASELIST=/tmp/aselist.$$
export CTLDIRLIST=/tmp/ctldirlist.$$
export STDCTLDIRLIST=$CTLDIR/sqlbtStdCtlDir.lst
export DUMPUSERLIST=/tmp/dumpuserlist.$$
export SQLOUT=/tmp/sqlout.$$

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test -f $SERVICENAMES && \rm -f $SERVICENAMES
	test -f $ASELIST && \rm -f $ASELIST
	test -f $CTLDIRLIST && \rm -f $CTLDIRLIST
	test -f $DUMPUSERLIST && \rm -f $DUMPUSERLIST
	test -f $SQLOUT && \rm -f $SQLOUT
}

trap 'tempCleanup' EXIT INT TERM

#--------------------------------------------------------------------------
#  Format list of ASEs
#--------------------------------------------------------------------------
if [ "$ONEDBSERVER" ]
then
	echo $ONEDBSERVER > $ASELIST
else
# get list of service names available on this host
# reformat the list of servicenames so exact matches are found (put a space before and after)
	> $SERVICENAMES
	/sccm/software/bin/get_service_name |
	while read SN
	do
		echo " $SN " >> $SERVICENAMES
	done
	echo " $HOST " >> $SERVICENAMES

# from the service name list, get list of Sybase ASEs
	if [ -s $SERVICENAMES ]
	then
		egrep -f $SERVICENAMES $ASEDIRLIST | cut -d" " -f1 > $ASELIST
	fi
fi

#--------------------------------------------------------------------------
#  Format list of control directories
#--------------------------------------------------------------------------
grep -v '^#' $STDCTLDIRLIST > $CTLDIRLIST

#--------------------------------------------------------------------------
#  For each ASE on this host...
#  Get list of sybase logins used for backups.  Disable failed login attempts for each of these logins.
#  Run dtscheck against the standard control directories
#--------------------------------------------------------------------------
if [ -s $ASELIST ]
then
	for DBSERVER in `cat $ASELIST`
#	cat $ASELIST |
#	while read DBSERVER
	do
		export SETDBSERVER=$DBSERVER
# re-source profile to set environment for ASE
		. /sccm/dba/sybase/.dbaSybProfile

		echo "\n\n\n$DBSERVER - Running dtscheck...\n"
		for SUBDIR in `cat $CTLDIRLIST`
		do
			export SQLBTCTLDIR=$DTBASE/$SUBDIR/$DBSERVER

# get distinct list of logins used for backups
			grep dumpuser $SQLBTCTLDIR/* | cut -d"=" -f2 | cut -d" " -f2 | sort | uniq > $DUMPUSERLIST

# for each distinct login, disable 'max failed_logins'
			for LOGINAME in `cat $DUMPUSERLIST`
			do
				echo "Disabling max failed_logins for $LOGINAME on $DBSERVER..."
				> $SQLOUT
				$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -w200 <<-! | grep -v Password: >> $SQLOUT
				`getPass $DBSERVER $ADMINLOGIN`
				sp_modifylogin $LOGINAME,"max failed_logins","0"
				go
				!

				checkSqlErr $SQLOUT
				if [ $? -eq 1 ]
				then
					echo "ERROR - Disabling max failed_logins for $LOGINAME on $DBSERVER"
					echo "Address the error and re-run this script"
					cat $SQLOUT
					exit 1
				else
					echo "DISABLED max failed_logins for $LOGINAME on $DBSERVER"
				fi
			done

			echo "\nUpdating $SQLBTCTLDIR...\n"
			$DT_SBACKTRACK_HOME/bin/dtscheck $SQLBTCTLDIR -verbose

# re-enable 'max_failed logins' to system-wide setting
# 6/1/06 MJS - (this is not perfect solution--as previous setting could have been an override of the system-wide setting)
			for LOGINAME in `cat $DUMPUSERLIST`
			do
				echo "Enabling system-wide 'max failed_logins' setting for $LOGINAME on $DBSERVER..."
				> $SQLOUT
				$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -w200 <<-! | grep -v Password: >> $SQLOUT
				`getPass $DBSERVER $ADMINLOGIN`
				sp_modifylogin $LOGINAME,"max failed_logins","20"
				go
				!

				checkSqlErr $SQLOUT
				if [ $? -eq 1 ]
				then
					echo "ERROR - Enabling system-wide 'max failed_logins' setting for $LOGINAME on $DBSERVER"
					echo "MANUALLY CORRECT THE 'max failed_logins' SETTING FOR $LOGINAME ON $DBSERVER"
					cat $SQLOUT
					exit 1
				else
					echo "ENABLED system-wide 'max failed_logins' setting for $LOGINAME on $DBSERVER"
				fi
			done
		done
	done
else
	echo "INFO:  There are no ASEs on `hostname`"
fi

#------------------------------------------------------------------------------
# exit
#------------------------------------------------------------------------------
exit 0
