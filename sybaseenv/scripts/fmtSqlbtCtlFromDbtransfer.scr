#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: fmtSqlbtFromDbtransfer.scr -S <source DBSERVER> -T <target DBSERVER> {-D <dbname>|<DB list> -clean}
#
#  Description: Short term script used to aid in formatting SQLBT control file for refreshes in Tempe
#		Modify SQLBT control files to reference dumps from /sccm/dbtransfer
#
#  NOTE:  This script MUST run from the TARGET DBSERVER.
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<parm1> - short description of parm if not obvious
#              	<clean> - flag to clean the target directory
#
#  NOTE:  ASSUMPTION IS THERE ARE ONLY 5 LINES FROM 'begin dump' TO 'end dump'
#		IN EACH SQLBT CONTROL FILE
#
#  Modification History:
#	04/05/07 M. Siatczynski	Initial Script
#	11/04/08 M. Siatczynski	Update location of TARFILE
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Sample block for input parameters
#------------------------------------------------------------------------------
export USAGE="ERROR - Usage: $0 -S <source DBSERVER> -T <target DBSERVER> {-D <dbname>|<DB list> -clean}"
export CALLED="$0 $*"

if [ $# -eq 0 ]
then
        echo $USAGE
        exit 1
else
        while [ $# -gt 0 ]
        do
                case $1 in
                        -S)     export SOURCE_DBSERVER=$2;shift 2;;
                        -T)     export TARGET_DBSERVER=$2;shift 2;;
                        -D)     export DBSPEC=$2;shift 2;;
                        -clean)  export CLEAN=1;shift 1;;
                        -*)     echo $USAGE;exit 1;;
                        *)      echo $USAGE;exit 1;;
                esac
        done
fi

if [ ! "$SOURCE_DBSERVER" -o ! "$TARGET_DBSERVER" ]
then
        echo $USAGE
        exit 1
fi

test ! "$CLEAN" && export CLEAN=0

# set environment after setting SETDBSERVER
export SETDBSERVER=$TARGET_DBSERVER
. /sccm/dba/sybase/.dbaSybProfile

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
export LOGFILE=$LOGDIR/backup/$TARGET_DBSERVER/$TARGET_DBSERVER.fmtSqlbtFromDbtransfer.$DATETIME
export TARFILE=/tmp/$SOURCE_DBSERVER.$TARGET_DBSERVER.sqlbt.ctl.tar
export TRANDIR=/sccm/dbtransfer/sybase/$SOURCE_DBSERVER
export SQLBTCTLDIR=$DT_PHYSICAL/$SOURCE_DBSERVER

export SEDFILE=/tmp/sedfile.$$
export DBLIST=/tmp/dblist.$$
export TEMPDIR=/tmp/$SOURCE_DBSERVER

#--------------------------------------------------------------------------
# define cleanup function and trap
# cd to home dir -- can't remove TEMPDIR if in ot
#--------------------------------------------------------------------------
function tempCleanup {
	test $SEDFILE && \rm -f $SEDFILE
	test $DBLIST && \rm -f $DBLIST
	cd
	test -d $TEMPDIR && \rm -rf $TEMPDIR
}

trap 'tempCleanup' EXIT INT TEM


> $LOGFILE

#------------------------------------------------------------------------------------
# make sure the TARFILE exists
#------------------------------------------------------------------------------------
if [ ! -s $TARFILE ]
then
	echo "ERROR - $TARFILE does not exist or is 0 bytes" | tee -a $LOGFILE
	exit 1
fi

#------------------------------------------------------------------------------------
# make the sqlbt control dir, if it doesn't exist
#------------------------------------------------------------------------------------
if [ ! -d $SQLBTCTLDIR ]
then
	mkdir $SQLBTCTLDIR
	touch $SQLBTCTLDIR/.dtoptions
fi

#------------------------------------------------------------------------------------
# if CLEAN flag is passed, remove all control files in the target directory
# clean up existing files in the directory
# make sure all files got removed
#------------------------------------------------------------------------------------
if [ $CLEAN -eq 1 ]
then
	echo "Removing all files under $SQLBTCTLDIR" >> $LOGFILE
	test -f $SQLBTCTLDIR/* && \rm $SQLBTCTLDIR/*

	if [ `ls $SQLBTCTLDIR | wc -l` -gt 0 ]
	then
	        echo "ERROR - All files were not removed from $SQLBTCTLDIR" >> $LOGFILE
	        exit 1
	fi
fi

#------------------------------------------------------------------------------------
# make the temp dir, if it doesn't exist
# untar the control files to a temp location
#------------------------------------------------------------------------------------
if [ ! -d $TEMPDIR ]
then
	mkdir $TEMPDIR
fi

cd $TEMPDIR
tar -xvf $TARFILE >> $LOGFILE 2>&1

#------------------------------------------------------------------------------------
# format list of databases
# cd out of TEMPDIR so it won't detect that passed dbname is in the directory
# if a file is passed, make sure it's > 0 bytes 
# if it's not clearly a file, make sure it's not an invalid filename
# if no spec is passed, gen list of all databases based on control files extracted to TEMPDIR
#------------------------------------------------------------------------------------
cd
if [ "$DBSPEC" ]
then
# make sure control file exists and has entries
	if [ -f $DBSPEC ]
	then
		if [ -s $DBSPEC ]
		then
			cat $DBSPEC > $DBLIST
		else
			echo "ERROR - $DBSPEC is 0 bytes"
			exit 1
		fi
	else
# make sure the dbspec doesn't contain slashes--otherwise it may be an invalid file reference
		echo $DBSPEC | grep '/' > /dev/null
		if [ $? -eq 0 ]
		then
			echo "ERROR - $DBSPEC is not valid--possible invalid filename?"
			exit 1
		else
			echo $DBSPEC > $DBLIST
		fi
	fi
else
	ls $TEMPDIR > $DBLIST
fi

#------------------------------------------------------------------------------------
# For each database, modify and copy the control file to the control directory
#------------------------------------------------------------------------------------
cat $DBLIST |
while read DBNAME
do
	export DBNAME

	> $SQLBTCTLDIR/$DBNAME

#------------------------------------------------------------------------------------
# Format the following replacements in control file:
# replace all pool occurrences with $TARGET_DBSERVER_full30 (Tempe pool)
#   default backup pool MUST be in .dtoptions and $TARGET_DBSERVER_full30 should already be in .dtoptions by default)
# replace the dump location with /sccm/dbtransfer
# replace 'server=-server *' with 'server $TARGET_DBSERVER' - extra precaution to prevent accidental load over production
#------------------------------------------------------------------------------------
	> $SEDFILE
	echo "s/disk:.*${SOURCE_DBSERVER}/disk:${TARGET_DBSERVER}_full30\/sccm\/dbtransfer\/sybase\/${SOURCE_DBSERVER}/g" >> $SEDFILE
	echo "s/default_backup_pool=.*$/default_backup_pool=${TARGET_DBSERVER}_full30/g" >> $SEDFILE
	echo "s/server=-server.*$/server=-server $TARGET_DBSERVER/g" >> $SEDFILE

	sed -f $SEDFILE $TEMPDIR/$DBNAME > $SQLBTCTLDIR/$DBNAME

	echo "CREATED new control file:  $SQLBTCTLDIR/$DBNAME" >> $LOGFILE
done

#------------------------------------------------------------------------------------
# exit
#------------------------------------------------------------------------------------
exit 0
