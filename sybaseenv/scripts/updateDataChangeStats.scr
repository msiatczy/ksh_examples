#!/bin/ksh 
#--------------------------------------------------------------------------
#        Usage: updateDataChangeStats.scr -S <DBSERVER> {-L <dblist> | -D <dbname> -DC <DC_Percent> -SAMP <Sample_Percent> -C <consumers> -m <maildest> -p <pagedest>}
#
#  Description: ASE 15 or greater - Run update statistics on any table with datachange > 2% on one or more databases on a server
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	DBSERVER - database server
#              	ONEDB - database name
#              	DBLIST - list of databases
#              	MAILDEST - override default maildest of dba
#              	PAGEDEST - page destination/flag
#
#
#  Modification History:
#	07/11/2008 J. Aspenleiter	New script for update stats dependant on datachange > 2%. (based on updateIndexStats.scr)
#	11/05/2008 J. Aspenleiter	Added parameters to adjust percents for datachange and sampling
#	01/18/2010 J. Aspenleiter	Added parameter consumers... 
#	02/07/2011 M. Siatczynski	Exit with warning if dblist is empty, exit 2 for error, 1 for warning
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

## unset the centrally-set PAGEDEST variable - setting determines whether or not to send page
unset PAGEDEST

#------------------------------------------------------------------------------
# Sample block for input parameters
#------------------------------------------------------------------------------
export USAGE="ERROR - Usage: $0 -S <DBSERVER> {-L <dblist> | -D <dbname> -DC <DC_Percent> -SAMP <Sample_Percent> -C consumers -m <maildest> -p <pagedest>}"
export CALLED="$0 $*"

if [ $# -eq 0 ]
then
        echo $USAGE
        exit 2
else
        while [ $# -gt 0 ]
        do
                case $1 in
                        -S)     export DBSERVER=$2;shift 2;;
                        -D)     export ONEDB=$2;shift 2;;
                        -L)     export DBLIST=$2;shift 2;;
			-DC)	export DATACHANGE=$2;shift 2;;
			-SAMP)	export SAMPLING=$2;shift 2;;
			-C)	export CONSUMERS=$2;shift 2;;
                        -m)     export MAILDEST=$2;shift 2;;
                        -p)     export PAGEDEST=$2;shift 2;;
                        -*)     echo $USAGE;exit 2;;
                        *)      echo $USAGE;exit 2;;
                esac
        done
fi

# DBSERVER MUST be passed
if [ ! "$DBSERVER" ]
then
    echo $USAGE
    exit 2
fi

# a single dbname and list of dbnames is mutually exclusive
if [ "$ONEDB" -a "$DBLIST" ]
then
        echo "$USAGE"
        echo "ERROR - DBNAME and DBLIST are mutually exclusive"
        exit 2
fi

# SET DEFAULT VALUES
if [ ! "$DATACHANGE" ]
then
     export DATACHANGE=5
fi

if [ ! "$SAMPLING" ]
then
     export SAMPLING=25
fi 

if [ ! "$CONSUMERS" ]
then
     export CONSUMERS=0
fi 


#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
# standard exlude list
export XLIST=$CTLDIR/$DBSERVER/$DBSERVER.statsExclude.lst
export STATSQL=/tmp/statsql.$$
export SORTDBLIST=/tmp/sortdblist.$$
export TMPDBLIST=/tmp/dblist.$$
export TMPXLIST=/tmp/xlist.$$
export MAILFILE=/tmp/mailfile.$$
export PAGEMSG=/tmp/pagemsg.$$

if [ "$ONEDB" ]
then
	export LOGFILE=$LOGDIR/stats/$DBSERVER/$DBSERVER.$ONEDB.updateDataChangeStats.$DATETIME
else
	export LOGFILE=$LOGDIR/stats/$DBSERVER/$DBSERVER.updateDataChangeStats.$DATETIME
fi

export ERRORFLAG=0
> $LOGFILE
> $MAILFILE

echo "`date` SCRIPT START" >> $LOGFILE

# make sure the passed lists exist
if [ "$DBLIST" -a ! -s "$DBLIST" ]
then
        echo "WARNING - $DBLIST does not exist or is 0 bytes" >> $LOGFILE
        exit 1
fi

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test -f $STATSQL && \rm -f $STATSQL
	test -f $SORTDBLIST && \rm -f $SORTDBLIST
	test -f $TMPDBLIST && \rm -f $TMPDBLIST
	test -f $TMPXLIST && \rm -f $TMPXLIST
	test -f $MAILFILE && \rm -f $MAILFILE
	test -f $PAGEMSG && \rm -f $PAGEMSG
}

trap 'tempCleanup' EXIT INT TERM

#--------------------------------------------------------------------------
#  Determine what databases to run update datachange stats on:
#	- single database (-D option)
#	- list of databases (-L option)
#	- all databases (no option) 
#		Exclude list is only used when running against all databases.
#  NOTE:  sed removes the spaces from the isql output, otherwise the files can't 
#  be accurately compared to the exclusion list
#  Automatically exclude read-only databases (status=1024)
#  Check for SQL errors
#--------------------------------------------------------------------------
> $SORTDBLIST
if [ "$ONEDB" ]
then
	echo $ONEDB > $TMPDBLIST
elif [ "$DBLIST" ]
then
	sort $DBLIST > $TMPDBLIST
else
	$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -b -w200 <<-! | grep -v Password | sed -e 's/ //g' | sort > $SORTDBLIST
	`getPass $DBSERVER $ADMINLOGIN`
	set nocount on
	go
	select name from master..sysdatabases
	where name not like 'tempdb%'
	and status&1024 <> 1024
	and status2&16 <> 16
	go
	!

	checkSqlErr $SORTDBLIST
	if [ $? -eq 1 ]
	then
		cat $SORTDBLIST >> $LOGFILE
		echo "ERROR - unable to obtain list of databases from $DBSERVER"
		echo "Review output in $LOGFILE"
		echo "`date` END" >> $LOGFILE
		exit 2
	fi

#--------------------------------------------------------------------------
#  Exclude database in the exclusion list
#--------------------------------------------------------------------------
	if [ -s $XLIST ]
	then
		sort $XLIST > $TMPXLIST
		comm -23 $SORTDBLIST $TMPXLIST > $TMPDBLIST

		echo "The following databases are excluded from update datachange statistics:\n" >> $LOGFILE
		cat $TMPXLIST >> $LOGFILE
		echo "" >> $LOGFILE
	else
		cat $SORTDBLIST > $TMPDBLIST
	fi
fi

#--------------------------------------------------------------------------
#  Execute update datachange statistics for each database in list based on stored proc parameters.
#--------------------------------------------------------------------------
if [ -s $TMPDBLIST ]
then
	for DBNAME in `cat $TMPDBLIST`
	do
		> $STATSQL
		echo "exec $DBNAME.dbo.sp_updatestats_datachange $DATACHANGE, '$SAMPLING', '$CONSUMERS'" >> $STATSQL
		echo "go" >> $STATSQL
		$SCRDIR/sqlTimer.scr -S $DBSERVER -i $STATSQL -o $LOGFILE -m $MAILFILE
		if [ $? -ne 0 ]
		then
			export ERRORFLAG=1
		fi
	done
else
	echo "No tables to process" >> $LOGFILE
fi

#--------------------------------------------------------------------------
# If there were any failures, send email
# If a page destination is set, then send a page
#--------------------------------------------------------------------------
echo "`date` SCRIPT END" >> $LOGFILE
if [ $ERRORFLAG -eq 1 ]
then
	echo "\nNOTE: Check $LOGFILE for further details.\n" >> $MAILFILE
	export MAILSUBJECT="$DBSERVER UPDATE DATACHANGE STATS FAILED"
	sendMail

	if [ "$PAGEDEST" ]
	then
		echo "`date` $DBSERVER UPDATE DATACHANGE STATS FAILED" > $PAGEMSG
		sendPage
	fi
	exit 2
else
	exit 0
fi
