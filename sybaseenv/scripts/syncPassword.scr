#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: syncPassword.scr -S <SOURCE DBSERVER> -T <TARGET DBSERVER> -login <login> {-noprompt}
#
#  Description: sync the password for login on the target dbserver using password info from source dbserver
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<parm1> - short description of parm if not obvious
#              	<parm2> - short description of parm if not obvious
#
#  Modification History:
#	05/30/06 M. Siatczynski	Initial Script
#	01/26/07 M. Siatczynski	Update proxy table name to login_pwd_hist
#	04/17/09 M. Siatczynski	Removed OUTDEST as redirect for error message--invalid variable
#--------------------------------------------------------------------------

. /sccm/dba/sybase/.dbaSybProfile

#------------------------------------------------------------------------------
# Sample block for input parameters
#------------------------------------------------------------------------------
export USAGE="ERROR - Usage: $0 -S <SOURCE DBSERVER> -T <TARGET DBSERVER> -login <login> {-noprompt}"
export CALLED="$0 $*"

if [ $# -eq 0 ]
then
        echo $USAGE
        exit 1
else
        while [ $# -gt 0 ]
        do
                case $1 in
                        -S)		export SOURCE_DBSERVER=$2;shift 2;;
                        -T)		export TARGET_DBSERVER=$2;shift 2;;
                        -login)		export LOGINAME=$2;shift 2;;
                        -noprompt)	export PROMPT=0;shift 1;;
                        -*)		echo $USAGE;exit 1;;
                        *)		echo $USAGE;exit 1;;
                esac
        done
fi

#--------------------------------------------------------------------------
#  Initialize Variables and verify parameters
#--------------------------------------------------------------------------
test ! "$PROMPT" && export PROMPT=1

if [ ! "$SOURCE_DBSERVER" -o ! "$TARGET_DBSERVER" -o ! "$LOGINAME" ]
then
	echo "$USAGE"
	exit 1
fi

if [ "$SOURCE_DBSERVER" = "$TARGET_DBSERVER" ]
then
	echo "$CALLED"
	echo "ERROR - SOURCE DBSERVER and TARGET DBSERVER can not be the same"
	exit 1
fi

export LOGFILE=$LOGDIR/useradmin/$TARGET_DBSERVER/$TARGET_DBSERVER.syncPassword.$DATETIME
export SQLFILE=/tmp/sqlfile.$$
export SQLOUT=/tmp/sqlout.$$
export HIGHRC=0

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test -f $SQLFILE && \rm -f $SQLFILE
	test -f $SQLOUT && \rm -f $SQLOUT
}

trap 'tempCleanup' EXIT INT TERM

#--------------------------------------------------------------------------
#  PROMPT TO CONTINUE
#--------------------------------------------------------------------------
if [ $PROMPT -eq 1 ]
then
	echo "\nThe password for $LOGINAME will be synced from $SOURCE_DBSERVER to $TARGET_DBSERVER\n"
	export CONTINUE=""
	while [ "$CONTINUE" != "Y" -a "$CONTINUE" != "y" -a "$CONTINUE" != "N" -a "$CONTINUE" != "n" ]
	do
	        echo "\nDO YOU WISH TO CONTINUE? {y/n}"
	        read CONTINUE
	done

	if [ "$CONTINUE" = "n" -o "$CONTINUE" = "N" ]
	then
	        echo "\nExiting - No action taken on $TARGET_DBSERVER\n"
	        exit 0
	fi
fi

#--------------------------------------------------------------------------
# Write headers
#--------------------------------------------------------------------------
> $LOGFILE
echo "`date` Syncing password for $LOGINAME from $SOURCE_DBSERVER to $TARGET_DBSERVER" >> $LOGFILE

#--------------------------------------------------------------------------
# Determine current value for "allow updates"
#--------------------------------------------------------------------------
export CURCONFIG=`$ISQLEXE -U$ADMINLOGIN -S$TARGET_DBSERVER -b -w200 <<-! | grep -v Password: | sed -e 's/  *//g'
\`getPass $TARGET_DBSERVER $ADMINLOGIN\`
set nocount on
go
select b.value from master..sysconfigures a, master..syscurconfigs b
where a.comment = 'allow updates to system tables'
and a.config = b.config
go
!
`
# check the setting - it must be 0 or 1...if it's not, the query probably wasn't successful
if [ "$CURCONFIG" != "0" -a "$CURCONFIG" != "1" ]
then
	echo "CURCONFIG variable not properly set (not 0 or 1) - defaulting to 0" >> $LOGFILE
	echo "CURCONFIG=$CURCONFIG" >> $LOGFILE
	export CURCONFIG=0
fi

#--------------------------------------------------------------------------
# Format SQL
#--------------------------------------------------------------------------
> $SQLFILE
# enable "allow updates to system tables" (if not already set)
if [ "$CURCONFIG" = "0" ]
then
	echo "sp_configure 'allow updates to system tables',1" >> $SQLFILE
	echo "go" >> $SQLFILE
fi

# update master..syslogins
echo "begin tran" >> $SQLFILE
echo "update master..syslogins set password=l.password, pwdate=l.pwdate" >> $SQLFILE
echo "from master..syslogins m, lookjack..${SOURCE_DBSERVER}_syslogins l" >> $SQLFILE
echo "where m.name = \"$LOGINAME\" and m.name = l.name" >> $SQLFILE
echo "if @@rowcount=1" >> $SQLFILE
echo "begin" >> $SQLFILE
echo "commit" >> $SQLFILE
# update lookjack..login_password_history
echo "insert lookjack..login_password_history" >> $SQLFILE
echo "select * from lookjack..${SOURCE_DBSERVER}_login_pwd_hist where name = \"$LOGINAME\" and pwdate = (select max(pwdate)" >> $SQLFILE
echo "from lookjack..${SOURCE_DBSERVER}_login_pwd_hist" >> $SQLFILE
echo "where name = \"$LOGINAME\")" >> $SQLFILE
echo "end" >> $SQLFILE
echo "else" >> $SQLFILE
echo "rollback" >> $SQLFILE
echo "go" >> $SQLFILE

# disable "allow updates to system tables" (if originally disabled)
if [ "$CURCONFIG" = "0" ]
then
	echo "sp_configure 'allow updates to system tables',0" >> $SQLFILE
	echo "go" >> $SQLFILE
fi

#--------------------------------------------------------------------------
# Execute the SQL
# Check for errors
#--------------------------------------------------------------------------
getPass $TARGET_DBSERVER $ADMINLOGIN | $ISQLEXE -U$ADMINLOGIN -S$TARGET_DBSERVER -w200 -e -i$SQLFILE | grep -v Password: >> $SQLOUT

cat $SQLOUT >> $LOGFILE
checkSqlErr $SQLOUT
if [ $? -eq 1 ]
then
        echo "ERROR - executing SQL against $TARGET_DBSERVER.  Review errors in $LOGFILE"
	export HIGHRC=1
fi

#--------------------------------------------------------------------------
#  Exit based on the highest return code
#--------------------------------------------------------------------------
if [ $HIGHRC -ne 0 ]
then
	echo "Password sync FAILED"
	echo "`date` Password sync FAILED" >> $LOGFILE
	exit 1
else
	echo "Password sync SUCCESSFUL"
	echo "`date` Password sync SUCCESSFUL" >> $LOGFILE
	exit 0
fi
