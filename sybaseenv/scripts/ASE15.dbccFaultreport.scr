#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: dbccFaultreport.scr -S <DBSERVER> {-D <DBNAME> -rptall -m <maildest> -p <pagedest>}
#
#  Description: Run sp_dbcc_faultreport against database(s)
#
#     Location:	/sccm/dba/sybase/scripts/dbccFaultreport.scr
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	DBSERVER - database server
#              	DBNAME - database name
#              	rptall - ignore exclusions and report ALL faults
#              	maildest - override default mail destination of dba
#              	pagedest - Page flag and destination
#
#
#  Modification History:
#	12/01/01 K. Hess	Initial Script
#	10/31/03 M. Siatczynski	Centralized script
#	04/12/05 M. Siatczynski	Removed exclusion coding for syslogs - exclusion logic moved internal to dbccdb
#	02/10/06 M. Siatczynski	Implement ISQLEXE, getPass, ADMINLOGIN
#	07/10/07 M. Siatczynski	Update for ASE15, change Type Code to Fault Type
#	11/14/08 M. Siatczynski	Remove parsing of long report and just generate short report
#	12/12/08 M. Siatczynski	Add -rptall parm to ignore exclusions and report all faults
#	12/17/08 M. Siatczynski	Ignore 18491 (no faults)
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile
## unset the centrally-set PAGEDEST variable - setting determines whether or not to send page
unset PAGEDEST

#------------------------------------------------------------------------------
# Input parameters
#------------------------------------------------------------------------------
export USAGE="ERROR - Usage: $0 -S <DBSERVER> {-D <dbname> -rptall -m <maildest> -p <pagedest>}"
export CALLED="$0 $*"

if [ $# -eq 0 ]
then
        echo $USAGE
        exit 1
else
        while [ $# -gt 0 ]
        do
                case $1 in
                        -S)     export DBSERVER=$2;shift 2;;
                        -D)     export DBNAME=$2;shift 2;;
                        -rptall)     export RPTALL=1;shift 1;;
                        -m)     export MAILDEST=$2;shift 2;;
                        -p)     export PAGEDEST=$2;shift 2;;
                        -*)     echo $USAGE;exit 1;;
                        *)      echo $USAGE;exit 1;;
                esac
        done
fi

if [ ! "$DBSERVER" ]
then
        echo $USAGE
        exit 1
fi

test ! "$RPTALL" && export RPTALL=0

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
export SQLOUT=/tmp/sqlout.$$
export CHECKSQL=/tmp/checksql.$$
export MAILFILE=/tmp/faultmail.$$

if [ "$DBNAME" ]
then
	export RPTFILE=$RPTDIR/dbcc/$DBSERVER/$DBSERVER.$DBNAME.dbccFaultreport.$DATETIME
else
	export RPTFILE=$RPTDIR/dbcc/$DBSERVER/$DBSERVER.dbccFaultreport.$DATETIME
fi

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test -f $SQLOUT && \rm -f $SQLOUT
	test -f $CHECKSQL && \rm -f $CHECKSQL
	test -f $MAILFILE && \rm -f $MAILFILE
}

trap 'tempCleanup' EXIT INT TERM

#--------------------------------------------------------------------------
#  Generate the fault report
#--------------------------------------------------------------------------
> $MAILFILE
> $RPTFILE
echo `date` >> $RPTFILE
echo "\nFAULT Report for $DBSERVER $DBNAME\n" >> $RPTFILE

export PARMSTRING=""
test "$DBNAME" && export PARMSTRING="$PARMSTRING, @dbname='$DBNAME'"
test $RPTALL -eq 1 && export PARMSTRING="$PARMSTRING, @exclusion_mode='ignore'"

$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -w200  <<-! | grep -v Password > $SQLOUT
`getPass $DBSERVER $ADMINLOGIN`
use dbccdb
go
sp_dbcc_faultreport short${PARMSTRING}
go
!

cat $SQLOUT >> $RPTFILE

checkSqlErr $SQLOUT
if [ $? -ne 0 ]
then
	export ALLFAULTS=0
	export NFC=0
	export ALLFAULTS=`grep -c 'Msg ' $SQLOUT`
	export NFC=`grep -c 'Msg 18491' $SQLOUT`
# if total errors equals number of 18491 errors, then report is clean, clear out the CHECKSQL file
	if [ $ALLFAULTS -eq $NFC ]
	then
		> $CHECKSQL
	else
		cat $SQLOUT > $CHECKSQL
		export STATUS=FAILED
	fi
else
	cat $SQLOUT > $CHECKSQL
fi

#--------------------------------------------------------------------------
#  Add uniq before sending MAILFILE to minimize duplicate messages
#--------------------------------------------------------------------------
if [ -s $CHECKSQL ]
then
	echo "\nReport will be emailed." >> $RPTFILE
	> $MAILFILE
        echo "Report Date:  `date`\n" >> $MAILFILE
	cat $CHECKSQL >> $MAILFILE
	export MAILSUBJECT="$DBSERVER DBCC FAULT REPORT $STATUS"
	sendMail
else
	echo "\nNo report will be emailed." >> $RPTFILE
fi
