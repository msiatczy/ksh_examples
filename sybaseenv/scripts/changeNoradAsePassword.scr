#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: changeNoradAsePassword.scr -U <user> -L <LOGIN> (-ASE <DBSERVER>) |-TEST -PROD>)
#
#  Description: Change password for the ASE login used by norad SYBASE agent
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#
#  Script may be run for
#  	one ASE on all SAMs where the ASE is defined (specify -ASE)
#  	all ASEs on all TEST/PROD SAMs (specify -TEST and/or -PROD)
#
#  Modification History:
#	01/21/11 M. Siatczynski Separated original resetNoradPassword.scr into two scripts, one for app and one for ASE
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile
. /sccm/dba/sybase/.dbaSybProfile.norad

#------------------------------------------------------------------------------
# Input parameters
#------------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -U <user> -L <LOGIN> (-ASE <DBSERVER>|-TEST -PROD>)"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 2
else
	while [ $# -gt 0 ]
	do
	        case $1 in
			-U)		export EXEUSER=$2;shift 2;;
			-L)		export LOGIN=$2;shift 2;;
			-TEST)		export DOTEST=1;shift 1;;
			-PROD)		export DOPROD=1;shift 1;;
			-ASE)		export ONEASE=$2;shift 2;;
			-*)		echo $USAGE;exit 2;;
			*)		echo $USAGE;exit 2;;
	        esac
	done
fi

#--------------------------------------------------------------------------
# Validate parameters
#--------------------------------------------------------------------------
# login must be passed
if [ ! "$EXEUSER" -o ! "$LOGIN" ]
then
	echo $USAGE
	exit 2
fi

# set default parms
test ! "$DOTEST" && export DOTEST=0
test ! "$DOPROD" && export DOPROD=0

# default login to norad console
export NORADADMIN=admin

# can't specify envs AND single ASE
if [ `expr $DOPROD + $DOTEST` -gt 0 -a "$ONEASE" ]
then
        echo "ERROR - TEST/PROD not valid with single ASE"
	echo $USAGE
	exit 2
fi

#--------------------------------------------------------------------------
#  Initialize variables  
#--------------------------------------------------------------------------
export LOGFILE=$LOGDIR/useradmin/central/changeNoradAsePassword.$LOGIN.$DATETIME
export SAMDETAILLIST=/tmp/samdetaillist.$$
export ENTITYCMDS=/tmp/entitycmds.$$
export SAMNAMELIST=/tmp/samnamelist.$$
export ASEPWDLIST=/tmp/asepwdlist.$$
export TMPOUT=/tmp/tmpout.$$
export HIGHRC=0

# save the original stty settings
export STTY_ORIG=`stty -g`

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
        test -f $SAMDETAILLIST && \rm -f $SAMDETAILLIST
        test -f $ENTITYCMDS && \rm -f $ENTITYCMDS
        test -f $SAMNAMELIST && \rm -f $SAMNAMELIST
        test -f $ASEPWDLIST && \rm -f $ASEPWDLIST
        test -f $TMPOUT && \rm -f $TMPOUT
# reinstate the original stty settings
        stty $STTY_ORIG
}

trap 'tempCleanup' EXIT INT TERM

#------------------------------------------------------------------------------
# Format detailed SAM list
# Format:  SAMENV SAMNAME ENTITY DOMAIN
#------------------------------------------------------------------------------
> $SAMDETAILLIST
if [ "$ONEASE" ]
then
	grep " $ONEASE " $NORADSAMLIST | cut -d" " -f1,2,4,5 | sort | uniq >> $SAMDETAILLIST
fi

if [ $DOTEST -eq 1 ]
then
	grep "^TEST " $NORADSAMLIST | cut -d" " -f1,2,4,5 | sort | uniq >> $SAMDETAILLIST
fi

if [ $DOPROD -eq 1 ]
then
	grep "^PROD " $NORADSAMLIST | cut -d" " -f1,2,4,5 | sort | uniq >> $SAMDETAILLIST
fi

# Make sure the list is not empty
if [ ! -s $SAMDETAILLIST ]
then
	echo "ERROR - No SAMs to process.  Exiting"
	exit 2
else
# determine whether to prompt for TEST/PROD passwords
	export PROMPTTEST=0
	export PROMPTPROD=0
	cut -d" " -f1 $SAMDETAILLIST | sort | uniq |
	while read SAMENV
	do
                case $SAMENV in
                        TEST)		export PROMPTTEST=1;;
                        PROD)		export PROMPTPROD=1;;
                        *)		echo "ERROR - Unknown SAM env";exit 2;;
                esac
	done
fi

#------------------------------------------------------------------------------
# Create unique SAM list for driving SAM-based loop
# Format:  SAMNAME DOMAIN
#------------------------------------------------------------------------------
> $SAMNAMELIST
cut -d" " -f1,2,4 $SAMDETAILLIST | sort | uniq > $SAMNAMELIST

#------------------------------------------------------------------------------
# Format list of ASEs on which to change passwords
# For driving ASE-based loop
# Check against ASEDIRLIST so we only change one password in replicated envs
# sort -uo (u=unique, o=output file), this continually sorts/appends to the existing file
#------------------------------------------------------------------------------
> $ASEPWDLIST

cut -d" " -f3 $SAMDETAILLIST | sort | uniq |
while read ENTITY
do
	export ENTITY
	grep "^$ENTITY " $ASEDIRLIST | cut -d" " -f5,11 | sort -uo $ASEPWDLIST - $ASEPWDLIST
done

#------------------------------------------------------------------------------
# Write headers
# chmod 600 as norad writes password info to the file
#------------------------------------------------------------------------------
> $LOGFILE
chmod 600 $LOGFILE

# TMPOUT is used for any temporary output
> $TMPOUT
chmod 600 $TMPOUT

#------------------------------------------------------------------------------
# Prompt for the passwords
#------------------------------------------------------------------------------
# Prompt for new test passwords
export NEWTESTPWD=""
export NEWPRODPWD=""

if [ $PROMPTTEST -eq 1 ]
then
	NEWPW1=""
	while [ "$NEWPW1" = "" ]
	do
	        echo "Enter NEW TEST password for $LOGIN:"
	        stty -echo
	        read NEWPW1
	        stty echo
	done
	NEWPW2=""
	while [ "$NEWPW2" = "" ]
	do
	        echo "Re-enter NEW TEST password for $LOGIN:"
	        stty -echo
	        read NEWPW2
	        stty echo
	done
	if [ "$NEWPW1" = "$NEWPW2" ]
	then
		export NEWTESTPWD=$NEWPW1
	else
		echo "ERROR - New TEST passwords entered do not match.  Exiting."
		exit 2
	fi
fi

# Prompt for new prod passwords
if [ $PROMPTPROD -eq 1 ]
then
	NEWPW1=""
	while [ "$NEWPW1" = "" ]
	do
	        echo "Enter NEW PROD password for $LOGIN:"
	        stty -echo
	        read NEWPW1
	        stty echo
	done
	NEWPW2=""
	while [ "$NEWPW2" = "" ]
	do
	        echo "Re-enter NEW PROD password for $LOGIN:"
	        stty -echo
	        read NEWPW2
	        stty echo
	done
	if [ "$NEWPW1" = "$NEWPW2" ]
	then
		export NEWPRODPWD=$NEWPW1
	else
		echo "ERROR - New PROD passwords entered do not match.  Exiting."
		exit 2
	fi
fi

#------------------------------------------------------------------------------
# MAIN program loop
# clear max failed logins - runs on ALL ASEs
# change ASE password- only runs on one ase for replication group
# alter norad ENTITIES
# restart SYBASE agents
# clear max failed logins - runs on ALL ASEs
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# disable max failed logins
# norad ENTITY = DBSERVER (ASE)
#------------------------------------------------------------------------------
cut -d" " -f3 $SAMDETAILLIST | sort | uniq  |
while read ENTITY
do
	export ENTITY
	
	> $TMPOUT

	echo "Disable max failed logins for $LOGIN on $ENTITY..." | tee -a $LOGFILE
	$ISQLEXE -U$EXEUSER -S$ENTITY -w200 -P"`getPass $ENTITY $EXEUSER`" <<-! >> $TMPOUT
	use master
	go
	sp_modifylogin $LOGIN,'max failed_logins','0'
	go
	!

	cat $TMPOUT >> $LOGFILE
	checkSqlErr $TMPOUT
	if [ $? -ne 0 ]
	then
		echo "ERROR - Disabling max_failed logins for $LOGIN on $ENTITY" | tee -a $LOGFILE
		cat $TMPOUT
	        export HIGHRC=2
	fi
done

#------------------------------------------------------------------------------
# Change ASE password
# norad ENTITY = DBSERVER (ASE)
#------------------------------------------------------------------------------
cat $ASEPWDLIST |
while read ASEENV ENTITY
do
	export ASEENV ENTITY
	
	if [ "$ASEENV" = "prod" ]
	then
		export NEWPWD=$NEWPRODPWD	
	else
		export NEWPWD=$NEWTESTPWD	
	fi

	> $TMPOUT

	echo "Changing ASE password for $LOGIN on $ENTITY..." | tee -a $LOGFILE
	$ISQLEXE -U$EXEUSER -S$ENTITY -w200 -P"`getPass $ENTITY $EXEUSER`" <<-! >> $TMPOUT
	use master
	go
	execute sp_password "`getPass $ENTITY $EXEUSER`","$NEWPWD",$LOGIN
	go
	!

	cat $TMPOUT >> $LOGFILE
	checkSqlErr $TMPOUT
	if [ $? -ne 0 ]
	then
		echo "ASE password change FAILED for $LOGIN on $ENTITY" | tee -a $LOGFILE
		cat $TMPOUT
	        export HIGHRC=2
	fi
done

#------------------------------------------------------------------------------
# Change password for each ENTITY on SAM and restart SYBASE agent
#------------------------------------------------------------------------------
echo "`date` Change ENTITY passwords and restart SYBASE agent for each SAM..." >> $LOGFILE

cat $SAMNAMELIST |
while read SAMENV SAMNAME DOMAIN
do
	export SAMENV SAMNAME DOMAIN
	
	if [ "$SAMENV" = "PROD" ]
	then
		export NEWPWD=$NEWPRODPWD	
	else
		export NEWPWD=$NEWTESTPWD	
	fi

# format cmds to alter entities on this SAM
	> $ENTITYCMDS
	grep " $SAMNAME " $SAMDETAILLIST | cut -d" " -f3 |
	while read ENTITY
	do
		echo "alter entity $ENTITY;pub=$LOGIN/$NEWPWD" >> $ENTITYCMDS
		echo "wait 5" >> $ENTITYCMDS
	done

	echo "\nChanging ENTITY passwords on $SAMNAME.$DOMAIN - LOGIN($LOGIN)" | tee -a $LOGFILE

	> $TMPOUT
	$NSM_HOME/bin/console -c -e $SAMNAME.$DOMAIN $NORADADMIN <<-ENDCOMMAND >> $TMPOUT
	`getPass $SAMNAME $NORADADMIN`
	target .sybase
	wait 5
	`cat $ENTITYCMDS`
	targetoff
	exit
	ENDCOMMAND
	
	cat $TMPOUT >> $LOGFILE
	checkNoradErr $TMPOUT
	if [ $? -ne 0 ]
	then
	        echo "ERROR - changing ENTITY passwords for $LOGIN on $SAMNAME" | tee -a $LOGFILE
	        export HIGHRC=2
	else
	        echo "ENTITY password change SUCCESSFUL for $LOGIN on $SAMNAME" | tee -a $LOGFILE

# if password change successful, restart the SYBASE agent
		echo "\nRestarting SYBASE agent for SAM $SAMNAME" | tee -a $LOGFILE
		> $TMPOUT
		$NSM_HOME/bin/console -c -e $SAMNAME.$DOMAIN $NORADADMIN <<-ENDCOMMAND >> $TMPOUT
		`getPass $SAMNAME $NORADADMIN`
		target .
		stop agent sybase
		wait 5
		start agent sybase
		wait 5
		targetoff
		exit
		ENDCOMMAND

		cat $TMPOUT >> $LOGFILE
		checkNoradErr $TMPOUT
		if [ $? -ne 0 ]
		then
		        echo "ERROR - Restarting SYBASE agent for $SAMNAME" | tee -a $LOGFILE
		        export HIGHRC=2
		else
		        echo "Sybase agent SUCCESSFULLY restarted for $SAMNAME" | tee -a $LOGFILE
		fi
	fi
done

#------------------------------------------------------------------------------
# clear max failed logins
# norad ENTITY = DBSERVER (ASE)
#------------------------------------------------------------------------------
cut -d" " -f3 $SAMDETAILLIST | sort | uniq  |
while read ENTITY
do
	export ENTITY
	
	> $TMPOUT

	echo "Enable max failed logins for $LOGIN on $ENTITY..." | tee -a $LOGFILE
	$ISQLEXE -U$EXEUSER -S$ENTITY -w200 -P"`getPass $ENTITY $EXEUSER`" <<-! >> $TMPOUT
	use master
	go
	sp_modifylogin $LOGIN,'max failed_logins','clear'
	go
	!

	cat $TMPOUT >> $LOGFILE
	checkSqlErr $TMPOUT
	if [ $? -ne 0 ]
	then
		echo "ERROR - Enabling max_failed logins for $LOGIN on $ENTITY" | tee -a $LOGFILE
		cat $TMPOUT
	        export HIGHRC=2
	fi
done

#------------------------------------------------------------------------------
# Check for errors
# Exit
#------------------------------------------------------------------------------
if [ $HIGHRC -ne 0 ]
then
        echo "\nERROR(S) FOUND during script execution" | tee -a $LOGFILE
        echo "Review $LOGFILE"
        exit $HIGHRC
else
        echo "\nScript execution SUCCESSFUL" | tee -a $LOGFILE
        echo "Review $LOGFILE"
        exit $HIGHRC
fi
