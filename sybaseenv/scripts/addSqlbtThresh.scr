#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: addSqlbtThresh.scr -S <DBSERVER> -D <dbname> -pct <thresh pct>
#
#  Description: Add SQLBT threshold at x pct
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<DBSERVER> - database server
#              	<DBNAME> - database name
#              	<PCT> - percent of log space at which to add the threshold
#
#  Modification History:
#	06/07/04 M. Siatczynski	Initial Script
#	02/13/06 M. Siatczynski	Implement ISQLEXE, getPass, ADMINLOGIN
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#------------------------------------------------------------------------------
# Sample block for input parameters
#------------------------------------------------------------------------------
export USAGE="ERROR - Usage: $0 -S <DBSERVER> -D <dbname> -pct <thresh pct>"
export CALLED="$0 $*"

if [ $# -eq 0 ]
then
        echo $USAGE
        exit 1
else
        while [ $# -gt 0 ]
        do
                case $1 in
                        -S)     export DBSERVER=$2;shift 2;;
                        -D)     export DBNAME=$2;shift 2;;
                        -pct)   export PCT=$2;shift 2;;
                        -*)     echo $USAGE;exit 1;;
                        *)      echo $USAGE;exit 1;;
                esac
        done
fi

if [ ! "$DBSERVER" -o ! "$DBNAME" -o ! "$PCT" ]
then
        echo $USAGE
        exit 1
fi

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
export SQLFILE1=/tmp/sqlfile1.$$
export SQLFILE2=/tmp/sqlfile2.$$
export SQLOUT=/tmp/sqlout.$$
export LOGFILE=$LOGDIR/misc/$DBSERVER/$DBSERVER.$DBNAME.addSqlbtThresh.$DATETIME
export HIGHRC=0

> $LOGFILE
date >> $LOGFILE
echo "Adding SQLBT threshold at $PCT % for $DBSERVER:$DBNAME" >> $LOGFILE

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test -f $SQLFILE1 && \rm -f $SQLFILE1
	test -f $SQLFILE2 && \rm -f $SQLFILE2
	test -f $SQLOUT && \rm -f $SQLOUT
}

trap 'tempCleanup' EXIT INT TERM

#------------------------------------------------------------------------------
# Format sql to check non-last chance thresholds on logsegments
#------------------------------------------------------------------------------
> $SQLFILE1
echo "set nocount on" >> $SQLFILE1
echo "go" >> $SQLFILE1
echo "use $DBNAME" >> $SQLFILE1
echo "go" >> $SQLFILE1

echo "print \"use $DBNAME\"" >> $SQLFILE1
echo "print \"go\"" >> $SQLFILE1
echo "go" >> $SQLFILE1


echo "select \"exec sp_addthreshold $DBNAME,logsegment,\",convert(int,((sum(u.size))*.${PCT})),\",sp_threshold_sqlbt\"" >> $SQLFILE1
echo "from master..sysusages u" >> $SQLFILE1
echo "where u.dbid = db_id(\"$DBNAME\") and u.segmap = 4 group by u.dbid " >> $SQLFILE1
echo "go" >> $SQLFILE1
echo "print \"go\"" >> $SQLFILE1
echo "go" >> $SQLFILE1

#------------------------------------------------------------------------------
# pipe in the sql to format the end sql
# check for errors
#------------------------------------------------------------------------------
> $SQLFILE2
getPass $DBSERVER $ADMINLOGIN | $ISQLEXE -U$ADMINLOGIN -S$DBSERVER -b -w500 -i$SQLFILE1 | grep -v Password >> $SQLFILE2

checkSqlErr $SQLFILE2
if [ $? -ne 0 ]
then
	echo "ERROR - executing format SQL against $DBSERVER" | tee -a $LOGFILE
	cat $SQLFILE2 >> $LOGFILE
	exit 1
fi

#------------------------------------------------------------------------------
# pipe in the sql to format the end sql
# check for errors
#------------------------------------------------------------------------------
> $SQLOUT
getPass $DBSERVER $ADMINLOGIN | $ISQLEXE -U$ADMINLOGIN -S$DBSERVER -b -e -w500 -i$SQLFILE2 | grep -v Password >> $SQLOUT

checkSqlErr $SQLOUT
if [ $? -ne 0 ]
then
	cat $SQLOUT >> $LOGFILE
	echo "ERROR - executing adding SQLBT threshold for $DBSERVER:$DBNAME" | tee -a $LOGFILE
	exit 1
else
	cat $SQLOUT >> $LOGFILE
	echo "SQLBT threshold added SUCCESSFULLY for $DBSERVER:$DBNAME" | tee -a $LOGFILE
fi

#------------------------------------------------------------------------------
# exit with 0 if an earlier error did not cause exit with 1
#------------------------------------------------------------------------------
exit 0
