#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: monitorIdtPasswordChange.scr -S <DBSERVER> -ctlfile <ctlfile> -since <7am|4pm>
#
#  Description: Custom script for WellsCap
#		Using the control file specified, notify via email when password for specific logins change
#		More than one email address can be notified.
#		This script is coded based around a static timeframe:
# 			-since 4pm detects password changes between 4pm the previous day and 7am the current day
# 			-since 7am detects password changes between 7am and 4pm the current day
#
#     Location:	/sccm/dba/sybase/scripts/monitorIdtPasswordChange.scr
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<DBSERVER> - DBSERVER
#		<ctlfile> - ctlfile which contains logins/emails of accounts to check
#
#  Modification History:
#       08/17/06 M. Siatczynski Initial script
#       09/13/06 M. Siatczynski Change email subject/text format
#       04/06/07 M. Siatczynski Remove CHANGEDLIST on exit
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile
. /sccm/dba/sybase/.dbaSybProfile.datefunctions

#------------------------------------------------------------------------------
# Input parameters
#------------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -S <DBSERVER> -ctlfile <ctlfile> -since <7am|4pm>"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 1
else
	while [ $# -gt 0 ]
	do
	        case $1 in
			-S)		export DBSERVER=$2;shift 2;;
			-ctlfile)	export CTLFILE=$2;shift 2;;
			-since)		export SINCETIME=$2;shift 2;;
			-*)		echo $USAGE;exit 1;;
			*)		echo $USAGE;exit 1;;
	        esac
	done
fi

# these parms must be passed
if [ ! "$DBSERVER" -o ! "$CTLFILE" -o ! "$SINCETIME" ]
then
	echo $USAGE
	exit 1
fi

# make sure control file exists and has entries
if [ ! -s $CTLFILE ]
then
	echo "ERROR - $CTLFILE does not exist or is 0 bytes"
	exit 1
fi

# make sure SINCETIME is either 7am or 4pm
if [ "$SINCETIME" != "7am" -a "$SINCETIME" != "4pm" ]
then
	echo "ERROR - since parameter MUST be either 7am or 4pm"
	exit 1
fi

#--------------------------------------------------------------------------
#  Initialize variables  
#--------------------------------------------------------------------------
export MAILFILE=/tmp/mailfile.$$
export CHECKLIST=/tmp/checklist.$$
export CHANGEDLIST=/tmp/changedlist.$$
export LOGFILE=$LOGDIR/useradmin/$DBSERVER/$DBSERVER.monitorIdtPasswordChange.$DATETIME
export HIGHRC=0

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test $MAILFILE && \rm -f $MAILFILE
	test $CHECKLIST && \rm -f $CHECKLIST
	test $CHANGEDLIST && \rm -f $CHANGEDLIST
}

trap 'tempCleanup' EXIT INT TERM

#------------------------------------------------------------------------------
# Set datetime variables used in script call
# Extra calculations are needed for YESTERDAY
#------------------------------------------------------------------------------
# ASSUMPTIONS:
# if 7am is passed, get any passwords changed since 4pm the PREVIOUS day
# else get any passwords changed since 7am the CURRENT day
if [ "$SINCETIME" = "7am" ]
then
	export SINCEDATETIME="$YYYYMMDD 07:00:00"
else
	CURRJJJ=`date +"%j"`
	CURRYYYY=`date +"%Y"`
	YESTJJJ=`expr $CURRJJJ - 1`
	if [ $YESTJJJ -eq 0 ]
	then
		export YESTYYYY=`expr $CURRYYYY - 1`
		export YESTJJJ=`getDaysInYear $YESTYYYY`
	else
		export YESTYYYY=$CURRYYYY
	fi
	export YESTYYYYMMDD=`getYYYYMMDD $YESTJJJ $YESTYYYY`

	export SINCEDATETIME="$YESTYYYYMMDD 16:00:00"
fi

#------------------------------------------------------------------------------
# Get list of logins to check
#------------------------------------------------------------------------------
grep -v '^#' $CTLFILE | cut -d':' -f1 > $CHECKLIST

#------------------------------------------------------------------------------
# write headers
#------------------------------------------------------------------------------
> $LOGFILE
echo "`date` START Monitor IDT password changes since $SINCEDATETIME for the following list of logins:" >> $LOGFILE
cat $CHECKLIST >> $LOGFILE

#------------------------------------------------------------------------------
# Call findPasswordChange.scr to find the logins with changed passwords
#------------------------------------------------------------------------------
$SCRDIR/findPasswordChange.scr -S $DBSERVER -L $CHECKLIST -since "$SINCEDATETIME" > $CHANGEDLIST

#------------------------------------------------------------------------------
# For each changed account, get the corresponding email from the control file
#------------------------------------------------------------------------------
if [ -s $CHANGEDLIST ]
then
	echo "`date` The following password changes were detected:" >> $LOGFILE
	cat $CHANGEDLIST >> $LOGFILE

	cat $CHANGEDLIST |
	while read LINE
	do
		export LINE
		export LOGIN=`echo $LINE | cut -d";" -f1`
		export PWDATE=`echo $LINE | cut -d";" -f2`

# unset MAILSUBJECT and MAILDEST so they don't accidentally get reused from previous record
		unset MAILSUBJECT
		unset MAILDEST

		export EMAIL=`grep ^$LOGIN: $CTLFILE | cut -d":" -f2`

# format and send mail message
		echo "Sending email for $LOGIN password change to $EMAIL" >> $LOGFILE
		> $MAILFILE
		echo "Sybase instance: $DBSERVER  Account: $LOGIN  Last Pwd Chg: $PWDATE" >> $MAILFILE
		export MAILSUBJECT="Sybase account password changed - Instance: $DBSERVER  Account: $LOGIN"
		export MAILDEST=$EMAIL
		sendMail -noheader
	done
else
	echo "`date` $DBSERVER - No password changes since $SINCEDATETIME for the logins listed above." >> $LOGFILE
fi

echo "`date` END Monitor IDT password changes since $SINCEDATETIME" >> $LOGFILE

#------------------------------------------------------------------------------
# exit with final return status
#------------------------------------------------------------------------------
if [ $HIGHRC -eq 1 ]
then
        echo "Script FAILED - output in $LOGFILE"
        exit 1
else
        exit 0
fi
