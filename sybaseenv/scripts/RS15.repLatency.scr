#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: repLatency.scr -S <source DBSERVER> -T <target DBSERVER> -RS <REPSERVER> -RSASE <RS ASE> -RSSD <RSSD> {-m <maildest>} {-p <pagedest>}
#
#  Description: Update repmon table in each replicated database on the source.
#		Compare it to the repmon table on the target to determin latency.
#
#     Location:	/sccm/dba/sybase/scripts/repLatency.scr
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<source dbserver> - Source dbserver
#              	<target dbserver> - Target dbserver
#              	<repserver> - Repserver
#              	<RSASE dbserver> - Repserver ASE
#              	<RSSD> - Name of RSSD database
#
#  Modification History:
#	07/20/02 M. Siatczynski Rewrite original script
#	07/25/02 M. Siatczynski Send separate page for each database (easier to read)
#	02/10/03 M. Siatczynski Added RSSD as an input parm
#	03/22/03 M. Siatczynski Added RSSD as part of LOGFILE name during SAMREP cutover
#	04/04/03 M. Siatczynski Added RSSD to email subject line
#	04/23/03 M. Siatczynski Corrected coding error in paging line
#	07/08/03 M. Siatczynski Changed code to email if latency -ge 15 minutes (previously -gt)
#	07/11/03 M. Siatczynski Centralize script, replace local LOGFILE with central RPTFILE
#				Write to MMYYYY log file rather than individual log file per run
#				Only email of latency -ge 60 minutes (previously 15 minutes)
#				Eliminate MAIL variable
#				Source the central profile
#	02/12/04 M. Siatczynski Centralized script 
#				Added -RS parm
#	07/14/04 M. Siatczynski Changed COUNT to MINLATE and tee'd output to SQLOUT rather than redirecting (MINLATE was not getting set with redirect)
#	03/22/05 M. Siatczynski Add logic to account for read-only databases (status=1024)
#	05/18/05 M. Siatczynski Add logic to account for databases in load (status2=16)
#	08/02/05 M. Siatczynski Changed RPTFILE location
#	10/07/05 M. Siatczynski Updated code that gets list of replicated databases to get dbs that have both active(A) AND standby(S) defined
#	10/12/05 M. Siatczynski Previous code update for dblist was not correct - modified query
#	02/10/06 M. Siatczynski Implement ISQLEXE, getPass, ADMINLOGIN
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile
## unset the centrally-set PAGEDEST variable - setting determines whether or not to send page
unset PAGEDEST

USAGE="ERROR - Usage: $0 -S <SOURCE DBSERVER> -T <TARGET DBSERVER> -RS <REPSERVER> -RSASE <RS ASE> -RSSD <RSSD> {-m <maildest>} {-p <pagedest>}"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 1
else
	while [ $# -gt 0 ]
	do
	        case $1 in
	                -S)	export SRC_DBSERVER=$2;shift 2;;
	                -T)	export TGT_DBSERVER=$2;shift 2;;
	                -RS)	export REPSERVER=$2;shift 2;;
	                -RSASE)	export RSASE=$2;shift 2;;
	                -RSSD)	export RSSD=$2;shift 2;;
	                -m)	export MAILDEST=$2;shift 2;;
	                -p)	export PAGEDEST=$2;shift 2;;
	                -*)	echo $USAGE;exit 1;;
	                *)	echo $USAGE;exit 1;;
	        esac
	done
fi


# All three servers and RSSD must be passed
if [ ! "$SRC_DBSERVER" -o ! "$TGT_DBSERVER" -o ! "$REPSERVER" -o ! "$RSASE" -o ! "$RSSD" ]
then
    echo $USAGE
    exit 1
fi

integer MINLATE
test ! -d $RPTDIR/replication/repLatency/$REPSERVER && mkdir $RPTDIR/replication/repLatency/$REPSERVER
export RPTFILE=$RPTDIR/replication/repLatency/$REPSERVER/$REPSERVER.${SRC_DBSERVER}_to_${TGT_DBSERVER}.using_${RSSD}.repLatency.$MMYYYY
export DBLIST=/tmp/dblist.$$
export PAGEMSG=/tmp/pagemsg.$$
export MAILFILE=/tmp/mailfile.$$
export SQLOUT=/tmp/sqlout.$$

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test $DBLIST && \rm -f $DBLIST
	test $PAGEMSG && \rm -f $PAGEMSG
	test $MAILFILE && \rm -f $MAILFILE
	test $SQLOUT && \rm -f $SQLOUT
}

trap 'tempCleanup' EXIT INT TERM

#--------------------------------------------------------------------------
#  Get list of all replicated databases where BOTH active and standby connections
#  exist for the source and target dbservers
#  Check for sql errors against RSASE
#--------------------------------------------------------------------------
$OCSBIN/isql -U$ADMINLOGIN -S$RSASE -b <<-! | egrep -v '(Password|rows affected|^$)' > $DBLIST
	`getPass $RSASE $ADMINLOGIN`
	set nocount on
	go
	use $RSSD
	go
	select a.dbname from rs_databases a where a.dsname = "$SRC_DBSERVER" and a.ptype = "A"
	and a.dbname in (select b.dbname from rs_databases b where b.dsname = "$TGT_DBSERVER" and b.ptype = "S")
	order by a.dbname
	go
	!

checkSqlErr $DBLIST
if [ $? -eq 1 ]
then
	echo "ERROR - SQL error(s) getting list of replicated databases from $RSASE:$RSSD"
	cat $DBLIST
	exit 1
fi

#--------------------------------------------------------------------------
#  If there are no databases to process, exit the script
#--------------------------------------------------------------------------
test ! -s $DBLIST && exit 0

#--------------------------------------------------------------------------
#  If database is not read only (status=1024):
#	Update the repmon table in the database on the source server
#	Update corresponding entry for database in dba..master_repmon on target server
#	Insert an entry into dba..master_repmon if none exists for the database
#  Check for SQL errors following each isql call
#  THIS SHOULD EVENTUALLY BE CHANGED TO FORMAT THE SQL AND MAKE A SINGLE ISQL CALL.
#--------------------------------------------------------------------------
cat $DBLIST |
while read DBNAME
do
	$ISQLEXE -U$ADMINLOGIN -S$SRC_DBSERVER <<-! | grep -v Password > $SQLOUT
	`getPass $SRC_DBSERVER $ADMINLOGIN`
	set nocount on
	go
	if (select status&1024 from master..sysdatabases where name = "$DBNAME") <> 1024
	begin
		update $DBNAME..repmon 
		set reptime=getdate()
		where id=1
		if (@@rowcount=0)
			insert into $DBNAME..repmon values (1,getdate())
	end
	go
	!

	checkSqlErr $SQLOUT
	if [ $? -eq 1 ]
	then
		echo "ERROR - SQL error(s) updating $SRC_DBSERVER:$DBNAME..repmon"
		cat $SQLOUT
	fi

	$ISQLEXE -U$ADMINLOGIN -S$TGT_DBSERVER <<-! | grep -v Password > $SQLOUT
	`getPass $TGT_DBSERVER $ADMINLOGIN`
	set nocount on
	go
	if (select status&1024 from master..sysdatabases where name = "$DBNAME") <> 1024
	begin
		update dba..master_repmon
		set master_reptime=getdate()
		where dbname="$DBNAME"
		if (@@rowcount=0)
			insert into dba..master_repmon values ("$DBNAME",getdate(),getdate())
	end
	go
	!

	checkSqlErr $SQLOUT
	if [ $? -eq 1 ]
	then
		echo "ERROR - SQL error(s) updating $TGT_DBSERVER:dba..master_repmon with current time"
		cat $SQLOUT
	fi
done

#--------------------------------------------------------------------------
# Wait 30 seconds and give the replication server time to push the data though
#--------------------------------------------------------------------------
sleep 30

#--------------------------------------------------------------------------
# Use dba..master_repmon on the target server to check the latency
#--------------------------------------------------------------------------
export MINLATE=0
> $MAILFILE
cat $DBLIST |
while read DBNAME
do
#--------------------------------------------------------------------------
# Update dba..master_repmon with the target database's datetime
# Do not update databases with offline status--accounts for databases in load (status2=16)
#--------------------------------------------------------------------------
	$ISQLEXE -U$ADMINLOGIN -S$TGT_DBSERVER <<-! | grep -v Password > $SQLOUT
	`getPass $TGT_DBSERVER $ADMINLOGIN`
	set nocount on
	go
	if (select status&1024 from master..sysdatabases where name = "$DBNAME") <> 1024
	and (select status2&16 from master..sysdatabases where name = "$DBNAME") <> 16
	begin
		update dba..master_repmon
		set dba.db_reptime=target.reptime
		from dba..master_repmon dba, $DBNAME..repmon target
		where dbname="$DBNAME"
		if (@@rowcount=0)
			update dba..master_repmon
			set db_reptime=""
			where dbname="$DBNAME"
	end
	go
	!

	checkSqlErr $SQLOUT
	if [ $? -eq 1 ]
	then
		echo "ERROR - SQL error(s) updating $TGT_DBSERVER:dba..master_repmon with replicated time"
		cat $SQLOUT
	fi

#--------------------------------------------------------------------------
# Calculate how many minutes the target server is behind the source server
#--------------------------------------------------------------------------
	export MINLATE="$(print "$($ISQLEXE -U$ADMINLOGIN -S$TGT_DBSERVER -b <<-! | tee $SQLOUT
		`getPass $TGT_DBSERVER $ADMINLOGIN`
		set nocount on
		go
		if (select status&1024 from master..sysdatabases where name = "$DBNAME") <> 1024
			select ltrim(convert(char(11),(datediff(mi,master_reptime,db_reptime))*(-1))) from dba..master_repmon where dbname="$DBNAME"
		go
		! )" | grep -v Password )"

	checkSqlErr $SQLOUT
	if [ $? -eq 1 ]
	then
		export COUNTRC=1
		echo "ERROR - SQL error(s) calculating MINLATE for $DBNAME"
		cat $SQLOUT
	else
		export COUNTRC=0
	fi

#--------------------------------------------------------------------------
# If latency > 0 minutes write a log record.
# If latency >= 60 minutes format a mail message.
# If latency >= 120 minutes and a page destination is set, send a page.
# (Send a separate page for each database -- easier to read on pager)
#--------------------------------------------------------------------------
	if [ $COUNTRC -eq 0 -a $MINLATE -gt 0 ]
	then
		echo "`date +'%D %T'` : $DBNAME : $TGT_DBSERVER is behind $SRC_DBSERVER by [minutes]: $MINLATE" >> $RPTFILE
		if [ $MINLATE -ge 60 ]
		then
			echo "`date +'%D %T'` : $DBNAME : $TGT_DBSERVER is behind $SRC_DBSERVER by [minutes]: $MINLATE" >> $MAILFILE
			if [ $MINLATE -ge 120 -a "$PAGEDEST" ]
			then
				echo "`date +'%D %T'` $DBNAME : $TGT_DBSERVER is behind $SRC_DBSERVER by [minutes]: $MINLATE" > $PAGEMSG
		        	sendPage
			fi
		fi
        fi
done

#--------------------------------------------------------------------------
#  If MAILFILE exists and has size > 0 bytes, send mail 
#--------------------------------------------------------------------------
if [ -s $MAILFILE ]
then
	export MAILSUBJECT="$REPSERVER REPLICATION Latency Report"
	sendMail
fi

#--------------------------------------------------------------------------
#  Exit with 0
#--------------------------------------------------------------------------
exit 0
