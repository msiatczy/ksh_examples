#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: pushProcDb.scr -P <FULLPATH_procname> -S <DBSERVER> -D <dbname>|all
#
#  Description: Push one proc to one ASE and one or all databases.
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	<parm1> - short description of parm if not obvious
#              	<parm2> - short description of parm if not obvious
#
#  Modification History:
#	11/11/08 J. Aspenleiter	Initial Script - Copied from pushProc.scr
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -P <FULLPATH_procname> -S <DBSERVER> -D <dbname>|all"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 1
else
	while [ $# -gt 0 ]
	do
	        case $1 in
	                -P)	export PROCNAME=$2;shift 2;;
	                -S)	export DBSERVER=$2;shift 2;;
			-D)	export ONEDATABASE=$2;shift 2;;
	                -*)	echo $USAGE;exit 1;;
	                *)	echo $USAGE;exit 1;;
	        esac
	done
fi

if [ ! "$PROCNAME" -o ! "$DBSERVER" -o ! "$ONEDATABASE" ]
then
	echo $USAGE
	exit 1
fi

#--------------------------------------------------------------------------
# initialize variables
#--------------------------------------------------------------------------
export LOGFILE=$LOGDIR/central/pushProc.$DATETIME
#export DBSERVERLIST=/tmp/dbserver.lst.$$
#export PROCLIST=/tmp/proc.lst.$$
export DBLIST=/tmp/dbname.lst.$$

#--------------------------------------------------------------------------
# format DBSERVER list
#--------------------------------------------------------------------------
#echo $ONEDBSERVER > $DBSERVERLIST

#--------------------------------------------------------------------------
# generate proc list
# defaults to all files ending with .prc under $DISTDIR/procs
#--------------------------------------------------------------------------
#echo $ONEPROC > $PROCLIST

#--------------------------------------------------------------------------
# format database array 
#--------------------------------------------------------------------------
> $DBLIST
if [ "$ONEDATABASE" = "all" ]
then
	$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -b -w200 <<-! | grep -v Password >> $DBLIST
	`getPass $DBSERVER $ADMINLOGIN`
	set nocount on
	go
	-- select name from sysdatabases order by name
	select name from sysdatabases where name not like 'tempdb%' and name not in
	(
	'dba','lookjack','sybsystemprocs','sybsystemdb','sybsyntax','sybsecurity_archive','sybsecurity',
	'dbccalt', 'dbccdb'
	)
	and status&1024 <> 1024
	go
	!
else
	echo $ONEDATABASE >> $DBLIST

fi
echo "THIS PART DONE"
#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
#	test -f $DBSERVERLIST && \rm -f $DBSERVERLIST
#	test -f $PROCLIST && \rm -f $PROCLIST
	test -f $DBLIST && \rm -f $DBLIST
}

trap 'tempCleanup' EXIT INT TERM

#--------------------------------------------------------------------------
#  Add the new proc(s) to dbserver(s)
#--------------------------------------------------------------------------
> $LOGFILE
echo "`date` Pushing procs" >> $LOGFILE

#cat $DBSERVERLIST |
#while read DBSERVER
#do
#	export DBSERVER
	echo "\nCreating proc(s) on $DBSERVER..." | tee -a $LOGFILE
#	for PROC in `cat $PROCLIST`
#	do
		echo "$PROCNAME" | tee -a $LOGFILE
#		export PROCFILE=$PROC
		if [ ! -s $PROCNAME ]
		then
			echo "ERROR - $PROCNAME does not exist or is 0 bytes" | tee -a $LOGFILE
			exit 1
		fi
		for DB in `cat $DBLIST`
		do
		echo "Creating proc in $DB" | tee -a $LOGFILE
		getPass $DBSERVER $ADMINLOGIN | $ISQLEXE -U$ADMINLOGIN -S$DBSERVER -D$DB -i$PROCNAME -w200 | grep -v Password >> $LOGFILE
		done
#	done
#done

#--------------------------------------------------------------------------
#  check SQL errors
#  exit
#--------------------------------------------------------------------------
checkSqlErr $LOGFILE
if [ $? -ne 0 ]
then
        echo "ERROR - creating proc(s)" | tee -a $LOGFILE
        echo "Review $LOGFILE"
        exit 1
else
        echo "proc(s) SUCCESSFULLY created" | tee -a $LOGFILE
	exit 0
fi
