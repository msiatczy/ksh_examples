#!/bin/ksh
#--------------------------------------------------------------------------
#        Usage: genProcDDL.scr -S <DBSERVER> -D <dbname>|all -P <procname>|all -o <output directory>
#
#  Description: Pull DDL for one or more stored procedures, including perms
#		DDL for each proc is written to a separate file under the designated output directory
#		A separate log file is created for each DBSERVER
#
#     Location:	/sccm/dba/sybase/scripts
#
#    Called by:	(optional) Script or Autosys script that calls this script
#
#        Calls:	(optional) Any scripts this script executes
#   
#   Parameters:	-S DBSERVER
#              	-D DBNAME|all
#              	-P procname|all
#
#  Modification History:
#	03/02/07 M. Siatczynski	Initial Script
#--------------------------------------------------------------------------
. /sccm/dba/sybase/.dbaSybProfile

#--------------------------------------------------------------------------
#  Initialize Variables  
#--------------------------------------------------------------------------
USAGE="ERROR - Usage: $0 -S <DBSERVER> -D <dbname>|all -P <procname>|all -o <output directory>"

if [ $# -eq 0 ]
then
	echo $USAGE
	exit 1
else
	while [ $# -gt 0 ]
	do
	        case $1 in
	                -S)	export ONEDBSERVER=$2;shift 2;;
	                -D)	export DBSPEC=$2;shift 2;;
	                -P)	export PROCSPEC=$2;shift 2;;
	                -o)	export OUTDIR=$2;shift 2;;
	                -*)	echo $USAGE;exit 1;;
	                *)	echo $USAGE;exit 1;;
	        esac
	done
fi

#--------------------------------------------------------------------------
#  Validate parms
#--------------------------------------------------------------------------
if [ ! "$ONEDBSERVER" -o ! "$DBSPEC" -o ! "$PROCSPEC" -o ! "$OUTDIR" ]
then
	echo $USAGE
	exit 1
fi

# make sure the output directory exists and is writeable
if ! [ -d $OUTDIR -a -w $OUTDIR ]
then
	echo "ERROR - $OUTDIR does not exist or is not writeable"
	exit 1
fi

#--------------------------------------------------------------------------
#  Use this to describe major sections of code
#--------------------------------------------------------------------------
export DBSERVERLIST=/tmp/serverlist.$$
export DBLIST=/tmp/dbnamelist.$$
export PROCLIST=/tmp/proclist.$$
export TMPPROC=/tmp/proc.defncopy.$$
export PERMSQL=/tmp/perm.sql.$$
export DEFNCOPYOUT=/tmp/defncopyout.$$

export HIGHRC=0

#--------------------------------------------------------------------------
# define cleanup function and trap
#--------------------------------------------------------------------------
function tempCleanup {
	test $DBSERVERLIST && \rm -f $DBSERVERLIST
	test $DBLIST && \rm -f $DBLIST
	test $PROCLIST && \rm -f $PROCLIST
	test $TMPPROC && \rm -f $TMPPROC
	test $PERMSQL && \rm -f $PERMSQL
	test $DEFNCOPYOUT && \rm -f $DEFNCOPYOUT
}

trap 'tempCleanup' EXIT INT TERM


#--------------------------------------------------------------------------
# Initialize list of dbservers
# Using DBSERVERLIST leaves flexibility for running against multiple ASEs in the future
#--------------------------------------------------------------------------
echo "$ONEDBSERVER" > $DBSERVERLIST

#--------------------------------------------------------------------------
# Process each DBSERVER separately
#--------------------------------------------------------------------------
cat $DBSERVERLIST |
while read DBSERVER
do
	export DBSERVER
#--------------------------------------------------------------------------
# Write headers
#--------------------------------------------------------------------------
	export LOGFILE=$LOGDIR/misc/$DBSERVER/$DBSERVER.genProcDDL.$DATETIME
	> $LOGFILE
	echo "`date` BEGIN Getting proc DDL for $DBSERVER" >> $LOGFILE

#--------------------------------------------------------------------------
# If a single dbname is passed, put it in the list, otherwise generate a 
# list of all USER DBs on the server
# Ignore read only databases (status=1024) and offline databases (status2=16)
#--------------------------------------------------------------------------
	if [ "$DBSPEC" = "all" ]
	then
		$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -b -w200 <<-! | grep -v Password > $DBLIST
		`getPass $DBSERVER $ADMINLOGIN`
		set nocount on
		go
		select name from master..sysdatabases where 
		name not in ('master','model','lookjack','dba','corporate') and 
		name not like 'dbcc%' and 
		name not like 'sybsystem%' and
		name not like 'sybsecurity%' and
		name not like 'tempdb%' and
		status & 1024 <> 1024 and
		status2 & 16 <> 16
		go
		!

		checkSqlErr $DBLIST
		if [ $? -eq 1 ]
		then
			export HIGHRC=1
			echo "ERROR - getting list of databases for $DBSERVER" >> $LOGFILE
			echo "Skipping default grants for $DBSERVER" >> $LOGFILE
			cat $DBLIST >> $LOGFILE
			continue
		fi
	else
		echo $DBSPEC > $DBLIST
	fi

#--------------------------------------------------------------------------
# For each DBNAME...
# Get list of procs and owners for each database (remove all spaces)
#--------------------------------------------------------------------------
	cat $DBLIST |
	while read DBNAME
	do
		export DBNAME
		if [ "$PROCSPEC" = "all" ]
		then
			$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -b -w200 -D$DBNAME <<-! | grep -v Password | sed -e 's/^ //g' -e 's/  */ /g' > $PROCLIST
			`getPass $DBSERVER $ADMINLOGIN`
			set nocount on
			go
			use $DBNAME
			go
			select user_name(uid)+" "+name from $DBNAME..sysobjects where type = 'P'
			and name not like 'rs[_]%'
			order by name
			go
			!
			checkSqlErr $PROCLIST
			if [ $? -eq 1 ]
			then
				export HIGHRC=1
				echo "ERROR - getting list of procs for $DBNAME" >> $LOGFILE
				echo "Skipping proc DDL gen for $DBNAME" >> $LOGFILE
				cat $PROCLIST >> $LOGFILE
				continue
			fi
		else
			$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -b -w200 -D$DBNAME <<-! | grep -v Password | sed -e 's/^ //g' -e 's/  */ /g' > $PROCLIST
			`getPass $DBSERVER $ADMINLOGIN`
			set nocount on
			go
			use $DBNAME
			go
			select user_name(uid)+" "+name from $DBNAME..sysobjects where type = 'P'
			and name = "$PROCSPEC"
			order by name
			go
			!
			checkSqlErr $PROCLIST
			if [ $? -eq 1 ]
			then
				export HIGHRC=1
				echo "ERROR - getting list of procs for $DBNAME" >> $LOGFILE
				echo "Skipping proc DDL gen for $DBNAME" >> $LOGFILE
				cat $PROCLIST >> $LOGFILE
				continue
			fi
		fi
		
#--------------------------------------------------------------------------
# For each proc...
# Write standard header to drop, if it exists
# Execute defncopy to get the source code (strip the DEFNCOPY trailer and append a go)
# Write standard trailer to print creation status
# Get perms for the proc
#--------------------------------------------------------------------------
		cat $PROCLIST |
		while read OWNER PROCNAME
		do
			export OWNER PROCNAME

			export PROCSQL=$OUTDIR/$DBSERVER.$DBNAME.$PROCNAME.sql
			> $PROCSQL

			export DEFNCOPYRC=0
			> $TMPPROC
			$OCSBIN/defncopy -S $DBSERVER -U $ADMINLOGIN -P `getPass $DBSERVER $ADMINLOGIN` out $TMPPROC $DBNAME $OWNER.$PROCNAME > $DEFNCOPYOUT 2>&1
			export DEFNCOPYRC=$?
			if [ $DEFNCOPYRC -ne 0 -o ! -s $TMPPROC ]
			then
				export HIGHRC=1
				echo "ERROR - executing defncopy for $OWNER.$PROCNAME" >> $LOGFILE
				echo "Skipping to next proc" >> $LOGFILE
				cat $DEFNCOPYOUT >> $LOGFILE
				echo "FAILED:  $PROCNAME"
				continue
			else
# write the header
				echo "IF OBJECT_ID('$OWNER.$PROCNAME') IS NOT NULL" >> $PROCSQL
				echo "BEGIN" >> $PROCSQL
				echo "    DROP PROCEDURE $OWNER.$PROCNAME" >> $PROCSQL
				echo "    IF OBJECT_ID('$OWNER.$PROCNAME') IS NOT NULL" >> $PROCSQL
				echo "        PRINT '<<< FAILED DROPPING PROCEDURE $OWNER.$PROCNAME >>>'" >> $PROCSQL
				echo "    ELSE" >> $PROCSQL
				echo "        PRINT '<<< DROPPED PROCEDURE $OWNER.$PROCNAME >>>'" >> $PROCSQL
				echo "END" >> $PROCSQL
				echo "go" >> $PROCSQL
				echo "" >> $PROCSQL
# cat the code
				grep -v 'DEFNCOPY: END OF DEFINITION' $TMPPROC >> $PROCSQL
				echo "go" >> $PROCSQL
				echo "" >> $PROCSQL
# write the trailer
				echo "IF OBJECT_ID('$OWNER.$PROCNAME') IS NOT NULL" >> $PROCSQL
				echo "    PRINT '<<< CREATED PROCEDURE $OWNER.$PROCNAME >>>'" >> $PROCSQL
				echo "ELSE" >> $PROCSQL
				echo "    PRINT '<<< FAILED CREATING PROCEDURE $OWNER.$PROCNAME >>>'" >> $PROCSQL
				echo "go" >> $PROCSQL
				echo "" >> $PROCSQL

#------------------------------------------------------------------------------
# Get permissions
# Code base was taking from a SQL trace done with DBArtisan.
#------------------------------------------------------------------------------
				> $PERMSQL
				$ISQLEXE -U$ADMINLOGIN -S$DBSERVER -w200 -b <<-! | grep -v Password | sed -e 's/^ //g' > $PERMSQL
				`getPass $DBSERVER $ADMINLOGIN`
				set nocount on
				go
				use $DBNAME
				go

				select distinct
				case
					when P.protecttype = 1
					then "grant "
					when P.protecttype = 2
					then "revoke "
				end+
				upper(A.name)+
				" on "+
-- specify object as owner.object
				user_name(O.uid)+"."+
				O.name+
				case
					when col_name(P.id,C.number) is not NULL
					then "("+col_name(P.id,C.number)+") "
					when col_name(P.id,C.number) is NULL
					then " "
				end+
				case
					when P.protecttype = 1
					then "to "
					when P.protecttype = 2
					then "from "
				end+
				user_name(P.uid)+
				convert(char(1),0xa)+"go"
				from
				sysprotects P,
				sysobjects O,
				master.dbo.spt_values A,
				master.dbo.spt_values C
				where
				convert(tinyint,substring(isnull(P.columns,0x1),C.low,1))&C.high!=0
				and C.type = 'P'
				and C.number<=255
				and A.type='T'
				and A.number=P.action
				and O.id=P.id
				and O.name="$PROCNAME"
				--order by protecttype to get grants first and then revokes
				order by P.protecttype,O.id,P.uid
				go
				!
	
				checkSqlErr $PERMSQL
				if [ $? -eq 1 ]
				then
					export HIGHRC=1
					echo "ERROR - getting perms for $PROCNAME" >> $LOGFILE
					echo "Skipping proc $PROCNAME" >> $LOGFILE
					cat $PERMSQL >> $LOGFILE
					echo "FAILED:  $PROCNAME"
					continue
				else
# cat the perms
					cat $PERMSQL >> $PROCSQL
					echo "SUCCESSFUL:  $PROCNAME ($PROCSQL)"
				fi
			fi

# END OF PROC LOOP
		done
# END OF DBNAME LOOP
	done
# END OF DBSERVER LOOP
done

#------------------------------------------------------------------------------
# Write log trailer
#------------------------------------------------------------------------------
echo "`date` COMPLETE - Getting proc DDL for $ONEDBSERVER" >> $LOGFILE

#------------------------------------------------------------------------------
# Exit with final return code based on HIGHRC
#------------------------------------------------------------------------------
if [ $HIGHRC -ne 0 ]
then
	echo "ERROR - getting proc DDL for $ONEDBSERVER" | tee -a $LOGFILE
	exit 1
else
	exit 0
fi
